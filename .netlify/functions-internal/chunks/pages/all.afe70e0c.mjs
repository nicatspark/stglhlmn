import mime from 'mime';
import { dim, bold, red, yellow, cyan, green } from 'kleur/colors';
import sizeOf from 'image-size';
import fs from 'node:fs/promises';
import { fileURLToPath } from 'node:url';
import 'node:path';
import 'http-cache-semantics';
import 'node:os';
import 'magic-string';
import 'node:stream';
import 'slash';
import { c as createAstro, a as createComponent, r as renderTemplate, b as addAttribute, m as maybeRenderHead, s as spreadAttributes, d as renderSlot, e as renderComponent, u as unescapeHTML, F as Fragment, f as renderHead, _ as __astro_tag_component__, g as createVNode } from '../astro.70d31893.mjs';
/* empty css                           */import rss from '@astrojs/rss';
import { useEffect, useState, useRef } from 'react';
import { c as classes } from '../hydroactive-functional-wc.aab01a9b.116f65cf.mjs';
import { jsx, jsxs } from 'react/jsx-runtime';
/* empty css                                        *//* empty css                                        *//* empty css                          */
const PREFIX = "@astrojs/image";
const dateTimeFormat = new Intl.DateTimeFormat([], {
  hour: "2-digit",
  minute: "2-digit",
  second: "2-digit"
});
const levels = {
  debug: 20,
  info: 30,
  warn: 40,
  error: 50,
  silent: 90
};
function getPrefix(level, timestamp) {
  let prefix = "";
  if (timestamp) {
    prefix += dim(dateTimeFormat.format(new Date()) + " ");
  }
  switch (level) {
    case "debug":
      prefix += bold(green(`[${PREFIX}] `));
      break;
    case "info":
      prefix += bold(cyan(`[${PREFIX}] `));
      break;
    case "warn":
      prefix += bold(yellow(`[${PREFIX}] `));
      break;
    case "error":
      prefix += bold(red(`[${PREFIX}] `));
      break;
  }
  return prefix;
}
const log = (_level, dest) => ({ message, level, prefix = true, timestamp = true }) => {
  if (levels[_level] >= levels[level]) {
    dest(`${prefix ? getPrefix(level, timestamp) : ""}${message}`);
  }
};
const error = log("error", console.error);

async function metadata(src, data) {
  const file = data || await fs.readFile(src);
  const { width, height, type, orientation } = await sizeOf(file);
  const isPortrait = (orientation || 0) >= 5;
  if (!width || !height || !type) {
    return void 0;
  }
  return {
    src: fileURLToPath(src),
    width: isPortrait ? height : width,
    height: isPortrait ? width : height,
    format: type,
    orientation
  };
}

function isRemoteImage(src) {
  return /^(https?:)?\/\//.test(src);
}
function removeQueryString(src) {
  const index = src.lastIndexOf("?");
  return index > 0 ? src.substring(0, index) : src;
}
function extname(src) {
  const base = basename(src);
  const index = base.lastIndexOf(".");
  if (index <= 0) {
    return "";
  }
  return base.substring(index);
}
function basename(src) {
  return removeQueryString(src.replace(/^.*[\\\/]/, ""));
}

function isOutputFormat(value) {
  return ["avif", "jpeg", "jpg", "png", "webp"].includes(value);
}
function isAspectRatioString(value) {
  return /^\d*:\d*$/.test(value);
}
function parseAspectRatio(aspectRatio) {
  if (!aspectRatio) {
    return void 0;
  }
  if (typeof aspectRatio === "number") {
    return aspectRatio;
  } else {
    const [width, height] = aspectRatio.split(":");
    return parseInt(width) / parseInt(height);
  }
}
function isSSRService(service) {
  return "transform" in service;
}
class BaseSSRService {
  async getImageAttributes(transform) {
    const { width, height, src, format, quality, aspectRatio, ...rest } = transform;
    return {
      ...rest,
      width,
      height
    };
  }
  serializeTransform(transform) {
    const searchParams = new URLSearchParams();
    if (transform.quality) {
      searchParams.append("q", transform.quality.toString());
    }
    if (transform.format) {
      searchParams.append("f", transform.format);
    }
    if (transform.width) {
      searchParams.append("w", transform.width.toString());
    }
    if (transform.height) {
      searchParams.append("h", transform.height.toString());
    }
    if (transform.aspectRatio) {
      searchParams.append("ar", transform.aspectRatio.toString());
    }
    if (transform.fit) {
      searchParams.append("fit", transform.fit);
    }
    if (transform.background) {
      searchParams.append("bg", transform.background);
    }
    if (transform.position) {
      searchParams.append("p", encodeURI(transform.position));
    }
    searchParams.append("href", transform.src);
    return { searchParams };
  }
  parseTransform(searchParams) {
    if (!searchParams.has("href")) {
      return void 0;
    }
    let transform = { src: searchParams.get("href") };
    if (searchParams.has("q")) {
      transform.quality = parseInt(searchParams.get("q"));
    }
    if (searchParams.has("f")) {
      const format = searchParams.get("f");
      if (isOutputFormat(format)) {
        transform.format = format;
      }
    }
    if (searchParams.has("w")) {
      transform.width = parseInt(searchParams.get("w"));
    }
    if (searchParams.has("h")) {
      transform.height = parseInt(searchParams.get("h"));
    }
    if (searchParams.has("ar")) {
      const ratio = searchParams.get("ar");
      if (isAspectRatioString(ratio)) {
        transform.aspectRatio = ratio;
      } else {
        transform.aspectRatio = parseFloat(ratio);
      }
    }
    if (searchParams.has("fit")) {
      transform.fit = searchParams.get("fit");
    }
    if (searchParams.has("p")) {
      transform.position = decodeURI(searchParams.get("p"));
    }
    if (searchParams.has("bg")) {
      transform.background = searchParams.get("bg");
    }
    return transform;
  }
}

const imagePoolModulePromise = import('../image-pool.8c97b1e1.mjs');
class SquooshService extends BaseSSRService {
  async processAvif(image, transform) {
    const encodeOptions = transform.quality ? { avif: { quality: transform.quality } } : { avif: {} };
    await image.encode(encodeOptions);
    const data = await image.encodedWith.avif;
    return {
      data: data.binary,
      format: "avif"
    };
  }
  async processJpeg(image, transform) {
    const encodeOptions = transform.quality ? { mozjpeg: { quality: transform.quality } } : { mozjpeg: {} };
    await image.encode(encodeOptions);
    const data = await image.encodedWith.mozjpeg;
    return {
      data: data.binary,
      format: "jpeg"
    };
  }
  async processPng(image, transform) {
    await image.encode({ oxipng: {} });
    const data = await image.encodedWith.oxipng;
    return {
      data: data.binary,
      format: "png"
    };
  }
  async processWebp(image, transform) {
    const encodeOptions = transform.quality ? { webp: { quality: transform.quality } } : { webp: {} };
    await image.encode(encodeOptions);
    const data = await image.encodedWith.webp;
    return {
      data: data.binary,
      format: "webp"
    };
  }
  async autorotate(transform, inputBuffer) {
    try {
      const meta = await metadata(transform.src, inputBuffer);
      switch (meta == null ? void 0 : meta.orientation) {
        case 3:
        case 4:
          return { type: "rotate", numRotations: 2 };
        case 5:
        case 6:
          return { type: "rotate", numRotations: 1 };
        case 7:
        case 8:
          return { type: "rotate", numRotations: 3 };
      }
    } catch {
    }
  }
  async transform(inputBuffer, transform) {
    const operations = [];
    if (!isRemoteImage(transform.src)) {
      const autorotate = await this.autorotate(transform, inputBuffer);
      if (autorotate) {
        operations.push(autorotate);
      }
    } else if (transform.src.startsWith("//")) {
      transform.src = `https:${transform.src}`;
    }
    if (transform.width || transform.height) {
      const width = transform.width && Math.round(transform.width);
      const height = transform.height && Math.round(transform.height);
      operations.push({
        type: "resize",
        width,
        height
      });
    }
    if (!transform.format) {
      error({
        level: "info",
        prefix: false,
        message: red(`Unknown image output: "${transform.format}" used for ${transform.src}`)
      });
      throw new Error(`Unknown image output: "${transform.format}" used for ${transform.src}`);
    }
    const { processBuffer } = await imagePoolModulePromise;
    const data = await processBuffer(inputBuffer, operations, transform.format, transform.quality);
    return {
      data: Buffer.from(data),
      format: transform.format
    };
  }
}
const service = new SquooshService();
var squoosh_default = service;

const squoosh = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: squoosh_default
}, Symbol.toStringTag, { value: 'Module' }));

const fnv1a52 = (str) => {
  const len = str.length;
  let i = 0, t0 = 0, v0 = 8997, t1 = 0, v1 = 33826, t2 = 0, v2 = 40164, t3 = 0, v3 = 52210;
  while (i < len) {
    v0 ^= str.charCodeAt(i++);
    t0 = v0 * 435;
    t1 = v1 * 435;
    t2 = v2 * 435;
    t3 = v3 * 435;
    t2 += v0 << 8;
    t3 += v1 << 8;
    t1 += t0 >>> 16;
    v0 = t0 & 65535;
    t2 += t1 >>> 16;
    v1 = t1 & 65535;
    v3 = t3 + (t2 >>> 16) & 65535;
    v2 = t2 & 65535;
  }
  return (v3 & 15) * 281474976710656 + v2 * 4294967296 + v1 * 65536 + (v0 ^ v3 >> 4);
};
const etag = (payload, weak = false) => {
  const prefix = weak ? 'W/"' : '"';
  return prefix + fnv1a52(payload).toString(36) + payload.length.toString(36) + '"';
};

async function loadRemoteImage(src) {
  try {
    const res = await fetch(src);
    if (!res.ok) {
      return void 0;
    }
    return Buffer.from(await res.arrayBuffer());
  } catch (err) {
    console.error(err);
    return void 0;
  }
}
const get$1 = async ({ request }) => {
  try {
    const url = new URL(request.url);
    const transform = squoosh_default.parseTransform(url.searchParams);
    let inputBuffer = void 0;
    const sourceUrl = isRemoteImage(transform.src) ? new URL(transform.src) : new URL(transform.src, url.origin);
    inputBuffer = await loadRemoteImage(sourceUrl);
    if (!inputBuffer) {
      return new Response("Not Found", { status: 404 });
    }
    const { data, format } = await squoosh_default.transform(inputBuffer, transform);
    return new Response(data, {
      status: 200,
      headers: {
        "Content-Type": mime.getType(format) || "",
        "Cache-Control": "public, max-age=31536000",
        ETag: etag(data.toString()),
        Date: new Date().toUTCString()
      }
    });
  } catch (err) {
    console.error(err);
    return new Response(`Server Error: ${err}`, { status: 500 });
  }
};

const _page0 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  get: get$1
}, Symbol.toStringTag, { value: 'Module' }));

const $$Astro$c = createAstro("https://hervy.netlify.com/");
const $$BaseHead = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$c, $$props, $$slots);
  Astro2.self = $$BaseHead;
  const { title, description, image = "/placeholder-social.jpg" } = Astro2.props;
  return renderTemplate`<!-- Global Metadata --><meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<link rel="icon" type="image/svg+xml" href="/favicon.svg">
<!-- <link rel='icon' type='image/svg+xml' href='/favicon.svg' media="(prefers-color-scheme: light)"/> -->
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">
<meta name="generator"${addAttribute(Astro2.generator, "content")}>

<!-- Primary Meta Tags -->
<title>${title}</title>
<meta name="title"${addAttribute(title, "content")}>
<meta name="description"${addAttribute(description, "content")}>
<meta name="color-scheme" content="dark light">

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website">
<meta property="og:url"${addAttribute(Astro2.url, "content")}>
<meta property="og:title"${addAttribute(title, "content")}>
<meta property="og:description"${addAttribute(description, "content")}>
<meta property="og:image"${addAttribute(new URL(image, Astro2.url), "content")}>

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image">
<meta property="twitter:url"${addAttribute(Astro2.url, "content")}>
<meta property="twitter:title"${addAttribute(title, "content")}>
<meta property="twitter:description"${addAttribute(description, "content")}>
<meta property="twitter:image"${addAttribute(new URL(image, Astro2.url), "content")}>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/BaseHead.astro");

const $$Astro$b = createAstro("https://hervy.netlify.com/");
const $$HeaderLink = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$b, $$props, $$slots);
  Astro2.self = $$HeaderLink;
  const { href, class: className, ...props } = Astro2.props;
  const { pathname } = Astro2.url;
  const isActive = href === pathname || href === pathname.replace(/\/$/, "");
  return renderTemplate`${maybeRenderHead($$result)}<a${addAttribute(href, "href")}${addAttribute([[className, { active: isActive }], "astro-EIMMU3LG"], "class:list")}${spreadAttributes(props)}>
  ${renderSlot($$result, $$slots["default"])}
</a>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/HeaderLink.astro");

const $$Astro$a = createAstro("https://hervy.netlify.com/");
const $$Uiswitch = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$a, $$props, $$slots);
  Astro2.self = $$Uiswitch;
  const { className } = Astro2.props;
  return renderTemplate`${maybeRenderHead($$result)}<label${addAttribute(`switch ${className} astro-OLAUK6V5`, "class")}>
  <input type="checkbox" class="astro-OLAUK6V5">
  <span class="slider astro-OLAUK6V5"></span>
</label>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/Uiswitch.astro");

let scrollPos = 0;
let previousScrollDir, id;
const CheckScrollDirection = () => {
  const check = () => {
    const scrollUp = document.body.getBoundingClientRect().top > scrollPos;
    if (previousScrollDir != scrollUp) {
      clearTimeout(id);
      document.dispatchEvent(
        new CustomEvent("NEWSCROLLDIRECTION", {
          detail: scrollUp ? "UP" : "DOWN"
        })
      );
    }
    previousScrollDir = scrollUp;
    id = setTimeout(() => previousScrollDir = void 0, 2e3);
    scrollPos = document.body.getBoundingClientRect().top;
  };
  const init = () => {
    document.addEventListener("scroll", check);
    return window.removeEventListener("scroll", check);
  };
  useEffect(() => init(), []);
};

const __variableDynamicImportRuntimeHelper = (glob, path) => {
    const v = glob[path];
    if (v) {
        return typeof v === 'function' ? v() : Promise.resolve(v);
    }
    return new Promise((_, reject) => {
        (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(reject.bind(null, new Error('Unknown variable dynamic import: ' + path)));
    });
};

const $$Astro$9 = createAstro("https://hervy.netlify.com/");
const $$Icon = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$9, $$props, $$slots);
  Astro2.self = $$Icon;
  const { icon } = Astro2.props;
  const { default: innerHTML } = await __variableDynamicImportRuntimeHelper((/* #__PURE__ */ Object.assign({"../svg/logo.svg": () => import('../logo.cc75ca70.mjs')})), `../svg/${icon}.svg`);
  return renderTemplate`${renderComponent($$result, "Fragment", Fragment, {}, { "default": () => renderTemplate`${unescapeHTML(innerHTML)}` })}`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/icon.astro");

const $$Astro$8 = createAstro("https://hervy.netlify.com/");
const $$Header = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$8, $$props, $$slots);
  Astro2.self = $$Header;
  return renderTemplate`${maybeRenderHead($$result)}<header class="astro-3EF6KSR2">
  <div class="logo astro-3EF6KSR2">
    ${renderComponent($$result, "Icon", $$Icon, { "icon": "logo", "class": "astro-3EF6KSR2" })}
    <h1 class="astro-3EF6KSR2"><a href="/" class="astro-3EF6KSR2">UX/FULLSTACK DEV</a></h1></div>
  <nav class="astro-3EF6KSR2">
    ${renderComponent($$result, "HeaderLink", $$HeaderLink, { "href": "/", "class": "astro-3EF6KSR2" }, { "default": () => renderTemplate`Home` })}
    ${renderComponent($$result, "HeaderLink", $$HeaderLink, { "href": "/blog", "class": "astro-3EF6KSR2" }, { "default": () => renderTemplate`Articles` })}
    ${renderComponent($$result, "HeaderLink", $$HeaderLink, { "href": "/about", "class": "astro-3EF6KSR2" }, { "default": () => renderTemplate`About` })}
    ${renderComponent($$result, "UiSwitch", $$Uiswitch, { "className": "theme-toggle astro-3EF6KSR2" })}
    ${renderComponent($$result, "CheckScrollDirection", CheckScrollDirection, { "client:load": true, "client:component-hydration": "load", "client:component-path": "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/CheckScrollDirection", "client:component-export": "default", "class": "astro-3EF6KSR2" })}
  </nav>
  
</header>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/Header.astro");

const $$Astro$7 = createAstro("https://hervy.netlify.com/");
const $$Footer = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$7, $$props, $$slots);
  Astro2.self = $$Footer;
  const today = new Date();
  return renderTemplate`${maybeRenderHead($$result)}<footer class="astro-SZ7XMLTE">
  &copy; ${today.getFullYear()} Nicolas Hervy. All rights reserved.
</footer>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/Footer.astro");

const SITE_TITLE = "My personal website.";
const SITE_DESCRIPTION = "Welcome to my website!";

const face = {"src":"/_astro/_male_intellectual_face_in_paper_art.3de1ad66.png","width":1024,"height":1024,"format":"png"};

function resolveSize(transform) {
  if (transform.width && transform.height) {
    return transform;
  }
  if (!transform.width && !transform.height) {
    throw new Error(`"width" and "height" cannot both be undefined`);
  }
  if (!transform.aspectRatio) {
    throw new Error(
      `"aspectRatio" must be included if only "${transform.width ? "width" : "height"}" is provided`
    );
  }
  let aspectRatio;
  if (typeof transform.aspectRatio === "number") {
    aspectRatio = transform.aspectRatio;
  } else {
    const [width, height] = transform.aspectRatio.split(":");
    aspectRatio = Number.parseInt(width) / Number.parseInt(height);
  }
  if (transform.width) {
    return {
      ...transform,
      width: transform.width,
      height: Math.round(transform.width / aspectRatio)
    };
  } else if (transform.height) {
    return {
      ...transform,
      width: Math.round(transform.height * aspectRatio),
      height: transform.height
    };
  }
  return transform;
}
async function resolveTransform(input) {
  if (typeof input.src === "string") {
    return resolveSize(input);
  }
  const metadata = "then" in input.src ? (await input.src).default : input.src;
  let { width, height, aspectRatio, background, format = metadata.format, ...rest } = input;
  if (!width && !height) {
    width = metadata.width;
    height = metadata.height;
  } else if (width) {
    let ratio = parseAspectRatio(aspectRatio) || metadata.width / metadata.height;
    height = height || Math.round(width / ratio);
  } else if (height) {
    let ratio = parseAspectRatio(aspectRatio) || metadata.width / metadata.height;
    width = width || Math.round(height * ratio);
  }
  return {
    ...rest,
    src: metadata.src,
    width,
    height,
    aspectRatio,
    format,
    background
  };
}
async function getImage(transform) {
  var _a, _b, _c;
  if (!transform.src) {
    throw new Error("[@astrojs/image] `src` is required");
  }
  let loader = (_a = globalThis.astroImage) == null ? void 0 : _a.loader;
  if (!loader) {
    const { default: mod } = await Promise.resolve().then(() => squoosh).catch(() => {
      throw new Error(
        "[@astrojs/image] Builtin image loader not found. (Did you remember to add the integration to your Astro config?)"
      );
    });
    loader = mod;
    globalThis.astroImage = globalThis.astroImage || {};
    globalThis.astroImage.loader = loader;
  }
  const resolved = await resolveTransform(transform);
  const attributes = await loader.getImageAttributes(resolved);
  const isDev = (_b = (Object.assign({"BASE_URL":"/","MODE":"production","DEV":false,"PROD":true},{_:process.env._,SSR:true,}))) == null ? void 0 : _b.DEV;
  const isLocalImage = !isRemoteImage(resolved.src);
  const _loader = isDev && isLocalImage ? globalThis.astroImage.defaultLoader : loader;
  if (!_loader) {
    throw new Error("@astrojs/image: loader not found!");
  }
  const { searchParams } = isSSRService(_loader) ? _loader.serializeTransform(resolved) : globalThis.astroImage.defaultLoader.serializeTransform(resolved);
  const imgSrc = !isLocalImage && resolved.src.startsWith("//") ? `https:${resolved.src}` : resolved.src;
  let src;
  if (/^[\/\\]?@astroimage/.test(imgSrc)) {
    src = `${imgSrc}?${searchParams.toString()}`;
  } else {
    searchParams.set("href", imgSrc);
    src = `/_image?${searchParams.toString()}`;
  }
  if ((_c = globalThis.astroImage) == null ? void 0 : _c.addStaticImage) {
    src = globalThis.astroImage.addStaticImage(resolved);
  }
  return {
    ...attributes,
    src
  };
}

async function resolveAspectRatio({ src, aspectRatio }) {
  if (typeof src === "string") {
    return parseAspectRatio(aspectRatio);
  } else {
    const metadata = "then" in src ? (await src).default : src;
    return parseAspectRatio(aspectRatio) || metadata.width / metadata.height;
  }
}
async function resolveFormats({ src, formats }) {
  const unique = new Set(formats);
  if (typeof src === "string") {
    unique.add(extname(src).replace(".", ""));
  } else {
    const metadata = "then" in src ? (await src).default : src;
    unique.add(extname(metadata.src).replace(".", ""));
  }
  return Array.from(unique).filter(Boolean);
}
async function getPicture(params) {
  const { src, alt, widths, fit, position, background } = params;
  if (!src) {
    throw new Error("[@astrojs/image] `src` is required");
  }
  if (!widths || !Array.isArray(widths)) {
    throw new Error("[@astrojs/image] at least one `width` is required");
  }
  const aspectRatio = await resolveAspectRatio(params);
  if (!aspectRatio) {
    throw new Error("`aspectRatio` must be provided for remote images");
  }
  const allFormats = await resolveFormats(params);
  const lastFormat = allFormats[allFormats.length - 1];
  const maxWidth = Math.max(...widths);
  let image;
  async function getSource(format) {
    const imgs = await Promise.all(
      widths.map(async (width) => {
        const img = await getImage({
          src,
          alt,
          format,
          width,
          fit,
          position,
          background,
          aspectRatio
        });
        if (format === lastFormat && width === maxWidth) {
          image = img;
        }
        return `${img.src} ${width}w`;
      })
    );
    return {
      type: mime.getType(format) || format,
      srcset: imgs.join(",")
    };
  }
  const sources = await Promise.all(allFormats.map((format) => getSource(format)));
  return {
    sources,
    image
  };
}

const $$Astro$6 = createAstro("https://hervy.netlify.com/");
const $$Image = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$6, $$props, $$slots);
  Astro2.self = $$Image;
  const { loading = "lazy", decoding = "async", ...props } = Astro2.props;
  if (props.alt === void 0 || props.alt === null) {
    warnForMissingAlt();
  }
  const attrs = await getImage(props);
  return renderTemplate`${maybeRenderHead($$result)}<img${spreadAttributes(attrs)}${addAttribute(loading, "loading")}${addAttribute(decoding, "decoding")}>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/node_modules/@astrojs/image/components/Image.astro");

const $$Astro$5 = createAstro("https://hervy.netlify.com/");
const $$Picture = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$5, $$props, $$slots);
  Astro2.self = $$Picture;
  const {
    src,
    alt,
    sizes,
    widths,
    aspectRatio,
    fit,
    background,
    position,
    formats = ["avif", "webp"],
    loading = "lazy",
    decoding = "async",
    ...attrs
  } = Astro2.props;
  if (alt === void 0 || alt === null) {
    warnForMissingAlt();
  }
  const { image, sources } = await getPicture({
    src,
    widths,
    formats,
    aspectRatio,
    fit,
    background,
    position,
    alt
  });
  delete image.width;
  delete image.height;
  return renderTemplate`${maybeRenderHead($$result)}<picture>
	${sources.map((attrs2) => renderTemplate`<source${spreadAttributes(attrs2)}${addAttribute(sizes, "sizes")}>`)}
	<img${spreadAttributes(image)}${addAttribute(loading, "loading")}${addAttribute(decoding, "decoding")}${addAttribute(alt, "alt")}${spreadAttributes(attrs)}>
</picture>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/node_modules/@astrojs/image/components/Picture.astro");

let altWarningShown = false;
function warnForMissingAlt() {
  if (altWarningShown === true) {
    return;
  }
  altWarningShown = true;
  console.warn(`
[@astrojs/image] "alt" text was not provided for an <Image> or <Picture> component.

A future release of @astrojs/image may throw a build error when "alt" text is missing.

The "alt" attribute holds a text description of the image, which isn't mandatory but is incredibly useful for accessibility. Set to an empty string (alt="") if the image is not a key part of the content (it's decoration or a tracking pixel).
`);
}

const aktieansvar = {"src":"/_astro/AktieAnsvar-logo-ligg.ef92e35a.png","width":500,"height":112,"format":"png"};

const akzonobel = {"src":"/_astro/akzonobel.8b255f32.png","width":500,"height":97,"format":"png"};

const gp = {"src":"/_astro/GP.9f8a1738.png","width":500,"height":78,"format":"png"};

const scania = {"src":"/_astro/scania.31287598.png","width":500,"height":58,"format":"png"};

const stena = {"src":"/_astro/stena.afd87eab.png","width":300,"height":172,"format":"png"};

const svt = {"src":"/_astro/svt.32bb5baf.png","width":500,"height":124,"format":"png"};

const akelius = {"src":"/_astro/akelius.24ac1cf3.png","width":500,"height":128,"format":"png"};

const skf = {"src":"/_astro/skf.f500aea1.png","width":500,"height":90,"format":"png"};

const $$Astro$4 = createAstro("https://hervy.netlify.com/");
const $$Clients = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$4, $$props, $$slots);
  Astro2.self = $$Clients;
  return renderTemplate`${maybeRenderHead($$result)}<aside class="neu-box astro-CKTVHCKL">
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 500 / 112, "src": aktieansvar, "alt": "Aktie-ansvar", "format": "png", "class": "astro-CKTVHCKL" })}</div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "aspectRatio": 500 / 97, "width": 250, "src": akzonobel, "alt": "Akzo Nobel", "class": "astro-CKTVHCKL" })}</div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 500 / 78, "src": gp, "alt": "G\xF6teborgs-posten", "class": "astro-CKTVHCKL" })}</div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 500 / 58, "src": scania, "alt": "Scania", "class": "astro-CKTVHCKL" })}</div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 300 / 172, "src": stena, "alt": "Stena", "class": "astro-CKTVHCKL" })}</div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 500 / 124, "src": svt, "alt": "Svt", "class": "astro-CKTVHCKL" })}</div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 1200 / 165, "src": "../assets/clients/Volvo.png", "alt": "Volvo", "class": "astro-CKTVHCKL" })}</div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 500 / 128, "src": akelius, "alt": "Akelius", "style": "padding-inline: 1rem", "class": "astro-CKTVHCKL" })}
  </div>
  <div class="astro-CKTVHCKL">${renderComponent($$result, "Image", $$Image, { "width": 250, "aspectRatio": 500 / 95, "src": skf, "alt": "SKF", "style": "padding-inline: 0.5rem", "class": "astro-CKTVHCKL" })}
  </div>
</aside>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/Clients.astro");

const $$Astro$3 = createAstro("https://hervy.netlify.com/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$3, $$props, $$slots);
  Astro2.self = $$Index;
  return renderTemplate`<html lang="en" class="astro-J7PV25F6">
  <head>
    ${renderComponent($$result, "BaseHead", $$BaseHead, { "title": SITE_TITLE, "description": SITE_DESCRIPTION, "class": "astro-J7PV25F6" })}
  ${renderHead($$result)}</head>
  <body class="astro-J7PV25F6">
    <main class="astro-J7PV25F6">
      <div class="hero neu-box astro-J7PV25F6">
        <div class="astro-J7PV25F6">
          <p class="astro-J7PV25F6">
            <span class="entry astro-J7PV25F6">As a frontend aficionado</span> with 25 years of
            experience, I bring a wealth of knowledge and expertise to any project.
          </p>
          <p class="astro-J7PV25F6">I have a strong understanding of both frontend and backend
            technologies, as well as a keen eye for design and user experience.
            My extensive experience allows me to quickly understand the needs of
            a project and deliver high-quality solutions that meet or exceed
            expectations. I am a valuable asset to any team looking to improve
            their web and app development process.</p>
        </div>
        <div class="astro-J7PV25F6">${renderComponent($$result, "Image", $$Image, { "src": face, "alt": "Hero image", "width": 400, "aspectRatio": 1 / 1, "format": "png", "class": "astro-J7PV25F6" })}</div>
      </div>
      ${renderComponent($$result, "Clients", $$Clients, { "class": "astro-J7PV25F6" })}
    </main>
    ${renderComponent($$result, "Footer", $$Footer, { "class": "astro-J7PV25F6" })}
    ${renderComponent($$result, "Header", $$Header, { "title": SITE_TITLE, "class": "astro-J7PV25F6" })}
    
  </body></html>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/index.astro");

const $$file$2 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/index.astro";
const $$url$2 = "";

const _page1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Index,
  file: $$file$2,
  url: $$url$2
}, Symbol.toStringTag, { value: 'Module' }));

const TocPanel = () => {
  const [showMax, setShowMax] = useState(3);
  const isSnippetsPage = globalThis?.location?.pathname.split("/")[1] === "snippets";
  const ref = useRef(null);
  const [headers, setHeaders] = useState([]);
  const getHeaders = () => {
    const article = document.querySelector("article");
    const headerEls = article?.querySelectorAll("h5");
    if (!headerEls)
      return;
    const headerArr = [...headerEls];
    setHeaders(headerArr);
  };
  const scrollToEl = (el) => {
    const headerHeight = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--header-height"));
    const margin = 10;
    const pixelsToScroll = window.scrollY + el.getBoundingClientRect().y - headerHeight - margin;
    window.scrollTo({
      top: pixelsToScroll,
      behavior: "smooth"
    });
  };
  useEffect(() => {
    if (ref.current && !isSnippetsPage)
      ref.current.setAttribute("hidden", "true");
    else
      getHeaders();
  }, []);
  return /* @__PURE__ */ jsx("div", {
    ref,
    hidden: headers.length === 0,
    className: classes.toccontainer,
    children: /* @__PURE__ */ jsxs("ul", {
      children: [headers.slice(0, showMax).map((h, i) => /* @__PURE__ */ jsx("li", {
        children: /* @__PURE__ */ jsx("button", {
          onClick: () => scrollToEl(h),
          children: h.innerText
        })
      }, i)), headers.length > showMax && /* @__PURE__ */ jsx("li", {
        className: "showall",
        children: /* @__PURE__ */ jsxs("button", {
          onClick: () => setShowMax(100),
          children: ["show all ", headers.length]
        })
      })]
    })
  });
};
__astro_tag_component__(TocPanel, "@astrojs/react");

const $$Astro$2 = createAstro("https://hervy.netlify.com/");
const $$SnippetPost = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$SnippetPost;
  const {
    content: { title, description, pubDate, updatedDate, heroImage }
  } = Astro2.props;
  return renderTemplate`<html lang="en" class="astro-W43PTR6A">
  <head>
    ${renderComponent($$result, "BaseHead", $$BaseHead, { "title": title, "description": description, "class": "astro-W43PTR6A" })}
    
  ${renderHead($$result)}</head>

  <body class="astro-W43PTR6A">
    ${renderComponent($$result, "Header", $$Header, { "class": "astro-W43PTR6A" })}
    <main class="astro-W43PTR6A">
      <article class="snippet astro-W43PTR6A">
        ${heroImage && renderTemplate`<img${addAttribute(720, "width")}${addAttribute(360, "height")}${addAttribute(heroImage, "src")} alt="" class="astro-W43PTR6A">`}
        <h2 class="title astro-W43PTR6A">${title}</h2>
        ${pubDate && renderTemplate`<time class="astro-W43PTR6A">${pubDate}</time>`}
        ${updatedDate && renderTemplate`<div class="updated astro-W43PTR6A">
              Last updated on <time class="astro-W43PTR6A">${updatedDate}</time>
            </div>`}
        ${renderComponent($$result, "Toc", TocPanel, { "client:load": true, "client:component-hydration": "load", "client:component-path": "/Users/nicolashervy/Desktop/Astro-selpromo/src/components/Toc", "client:component-export": "default", "class": "astro-W43PTR6A" })}
        ${renderSlot($$result, $$slots["default"])}
      </article>
    </main>
    ${renderComponent($$result, "Footer", $$Footer, { "class": "astro-W43PTR6A" })}
    
    
  </body></html>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/layouts/SnippetPost.astro");

const html$A = "<h5 id=\"attempt\">Attempt</h5>\n<p>This snippet executes a function, returning either the result or the caught error object.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">attempt</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">args</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">try</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">args)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  } </span><span style=\"color: #FF7B72\">catch</span><span style=\"color: #C9D1D9\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> e </span><span style=\"color: #FF7B72\">instanceof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Error</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> e </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Error</span><span style=\"color: #C9D1D9\">(e)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> elements </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">attempt</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">selector</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> document.</span><span style=\"color: #D2A8FF\">querySelectorAll</span><span style=\"color: #C9D1D9\">(selector)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}, </span><span style=\"color: #A5D6FF\">'>_>'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (elements </span><span style=\"color: #FF7B72\">instanceof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Error</span><span style=\"color: #C9D1D9\">) elements </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [] </span><span style=\"color: #8B949E\">// elements = []</span></span></code></pre>\n<h5 id=\"average\">Average</h5>\n<p>This snippet returns the average of two or more numerical values.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">average</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">nums</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  nums.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">acc</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> acc </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> val, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> nums.</span><span style=\"color: #79C0FF\">length</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">average</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// 2</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">average</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 2</span></span></code></pre>\n<h5 id=\"defer\">Defer</h5>\n<p>This snippet delays the execution of a function until the current call stack is cleared.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">defer</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">args</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(fn, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">args)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">defer</span><span style=\"color: #C9D1D9\">(console.log, </span><span style=\"color: #A5D6FF\">'a'</span><span style=\"color: #C9D1D9\">), console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'b'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// logs 'b' then 'a'</span></span></code></pre>\n<h5 id=\"function-name\">Function name</h5>\n<p>This snippet prints the name of a function into the console.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">functionName</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (console.</span><span style=\"color: #D2A8FF\">debug</span><span style=\"color: #C9D1D9\">(fn.name), fn)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">functionName</span><span style=\"color: #C9D1D9\">(Math.max) </span><span style=\"color: #8B949E\">// max (logged in debug channel of console)</span></span></code></pre>\n<h5 id=\"get-type\">Get type</h5>\n<ul>\n<li>This snippet can be used to get the type of a value.\n*/\nconst getType = (v) =>\nv === undefined\n? ‘undefined’\n: v === null\n? ‘null’\n: v.constructor.name.toLowerCase()</li>\n</ul>\n<p>getType(new Set([1, 2, 3])) // ‘set’</p>\n<h5 id=\"is\">Is</h5>\n<p>This snippet can be used to check if a value is of a particular type.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">type</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">[, </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">].</span><span style=\"color: #D2A8FF\">includes</span><span style=\"color: #C9D1D9\">(val) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> val.</span><span style=\"color: #79C0FF\">constructor</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> type</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(Array, [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(ArrayBuffer, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">ArrayBuffer</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(Map, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Map</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(RegExp,</span><span style=\"color: #A5D6FF\"> /</span><span style=\"color: #79C0FF\">.</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(Set, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Set</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(WeakMap, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">WeakMap</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(WeakSet, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">WeakSet</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(String, </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(String, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">String</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(Number, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(Number, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Number</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(Boolean, </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">is</span><span style=\"color: #C9D1D9\">(Boolean, </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Boolean</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"is-number\">Is number</h5>\n<p>This snippet can be used to check whether a provided value is a number.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isNumber</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">isNaN</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">parseFloat</span><span style=\"color: #C9D1D9\">(n)) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isFinite</span><span style=\"color: #C9D1D9\">(n)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isNumber</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'1'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// false</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isNumber</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"is-promise-like\">Is promise like</h5>\n<p>This snippet checks whether an object looks like a Promise.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isPromiseLike</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  obj </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> obj </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'object'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> obj </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'function'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> obj.then </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'function'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isPromiseLike</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">''</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isPromiseLike</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// false</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isPromiseLike</span><span style=\"color: #C9D1D9\">({}) </span><span style=\"color: #8B949E\">// false</span></span></code></pre>\n<h5 id=\"ispromise--isfunction-similar-to-the-above-but-less-code\">isPromise / isFunction (similar to the above but less code)</h5>\n<p>Checks if function is a promise. Note that it will execute them aswell.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isPromise</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">item</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">Object</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #79C0FF\">prototype</span><span style=\"color: #C9D1D9\">.toString.</span><span style=\"color: #D2A8FF\">call</span><span style=\"color: #C9D1D9\">(item) </span><span style=\"color: #FF7B72\">==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'[object Promise]'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isFunction</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">item</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">Object</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #79C0FF\">prototype</span><span style=\"color: #C9D1D9\">.toString.</span><span style=\"color: #D2A8FF\">call</span><span style=\"color: #C9D1D9\">(item) </span><span style=\"color: #FF7B72\">==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'[object Function]'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isPromise</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {})) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isFunction</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {}) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"is-valid-json\">Is valid JSON</h5>\n<p>This snippet can be used to check whether a string is a valid JSON.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isValidJSON</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">try</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">parse</span><span style=\"color: #C9D1D9\">(str)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">true</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  } </span><span style=\"color: #FF7B72\">catch</span><span style=\"color: #C9D1D9\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">false</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isValidJSON</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'{\"name\":\"Adam\",\"age\":20}'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isValidJSON</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'{\"name\":\"Adam\",age:\"20\"}'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// false</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isValidJSON</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"minn\">MinN</h5>\n<p>This snippet returns the n smallest elements from a list. If n is greater than or equal to the list’s length, then it will return the original list (sorted in ascending order).</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">minN</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">arr].</span><span style=\"color: #D2A8FF\">sort</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> a </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> b).</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, n)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">minN</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">minN</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [1,2]</span></span></code></pre>\n<h5 id=\"random-hexadecimal-color-code\">Random Hexadecimal Color Code</h5>\n<p>This snippet can be used to generate a random hexadecimal color code.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">generateRandomHexColor</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #A5D6FF\">`#${</span><span style=\"color: #C9D1D9\">Math</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #D2A8FF\">floor</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #C9D1D9\">Math</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #A5D6FF\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #79C0FF\">0xffffff</span><span style=\"color: #A5D6FF\">).</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #79C0FF\">16</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">}`</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">generateRandomHexColor</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #8B949E\">// \"#e34155\"</span></span></code></pre>\n<h5 id=\"run-promises-in-series\">Run promises in series</h5>\n<p>This snippet can be used to run an array of promises in series.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">runPromisesInSeries</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">ps</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  ps.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">p</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">next</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> p.</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(next), </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">resolve</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">d</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">r</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(r, d))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">runPromisesInSeries</span><span style=\"color: #C9D1D9\">([() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">), () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2000</span><span style=\"color: #C9D1D9\">)])</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Executes each promise sequentially, taking a total of 3 seconds to complete</span></span></code></pre>\n<h5 id=\"sleep\">Sleep</h5>\n<p>This snippet can be used to delay the execution of an asynchronous function by putting it into sleep.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sleep</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">ms</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">resolve</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(resolve, ms))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sleepyWork</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"I'm going to sleep for 1 second.\"</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sleep</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'I woke up after 1 second.'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"time-taken\">Time taken</h5>\n<p>This snippet can be used to find out the time it takes to execute a function.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">timeTaken</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">callback</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">time</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'timeTaken'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">r</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">callback</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">timeEnd</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'timeTaken'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> r</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">timeTaken</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">pow</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// 1024, (logged): timeTaken: 0.02099609375ms</span></span></code></pre>\n<h5 id=\"times\">Times</h5>\n<p>This snippet can be used to iterate over a callback n times.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">times</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">context</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">undefined</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> i </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">while</span><span style=\"color: #C9D1D9\"> (fn.</span><span style=\"color: #D2A8FF\">call</span><span style=\"color: #C9D1D9\">(context, i) </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">++</span><span style=\"color: #C9D1D9\">i </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> n) {}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> output </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">''</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">times</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">, (</span><span style=\"color: #FFA657\">i</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (output </span><span style=\"color: #FF7B72\">+=</span><span style=\"color: #C9D1D9\"> i))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(output) </span><span style=\"color: #8B949E\">// 01234</span></span></code></pre>\n<h5 id=\"to-currency\">To currency</h5>\n<p>This snippet can be used to format a number like a currency.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">toCurrency</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">curr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">LanguageFormat</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">undefined</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Intl.</span><span style=\"color: #D2A8FF\">NumberFormat</span><span style=\"color: #C9D1D9\">(LanguageFormat, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    style: </span><span style=\"color: #A5D6FF\">'currency'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    currency: curr,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }).</span><span style=\"color: #D2A8FF\">format</span><span style=\"color: #C9D1D9\">(n)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toCurrency</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">123456.789</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'EUR'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// €123,456.79  | currency: Euro | currencyLangFormat: Local</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toCurrency</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">123456.789</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'USD'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'en-us'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// $123,456.79  | currency: US Dollar | currencyLangFormat: English (United States)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toCurrency</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">123456.789</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'USD'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'fa'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// ۱۲۳٬۴۵۶٫۷۹ ؜$ | currency: US Dollar | currencyLangFormat: Farsi</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toCurrency</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">322342436423.2435</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'JPY'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// ¥322,342,436,423 | currency: Japanese Yen | currencyLangFormat: Local</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toCurrency</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">322342436423.2435</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'JPY'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'fi'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 322 342 436 423 ¥ | currency: Japanese Yen | currencyLangFormat: Finnish</span></span></code></pre>\n<h5 id=\"to-decimal-mark\">To decimal mark</h5>\n<p>This snippet uses the toLocaleString() function to convert float-point arithmetic to the decimal mark form by using a number to make a comma-separated string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">toDecimalMark</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">num</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> num.</span><span style=\"color: #D2A8FF\">toLocaleString</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'en-US'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toDecimalMark</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">12305030388.9087</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// \"12,305,030,388.909\"</span></span></code></pre>\n<h5 id=\"validate-number\">Validate number</h5>\n<p>This snippet can be used to check whether a value is a number.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">validateNumber</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">isNaN</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">parseFloat</span><span style=\"color: #C9D1D9\">(n)) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isFinite</span><span style=\"color: #C9D1D9\">(n) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Number</span><span style=\"color: #C9D1D9\">(n) </span><span style=\"color: #FF7B72\">==</span><span style=\"color: #C9D1D9\"> n</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">validateNumber</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'10'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"cancellable-fetch\">Cancellable fetch</h5>\n<p><a href=\"https://developers.google.com/web/updates/2017/09/abortable-fetch\">https://developers.google.com/web/updates/2017/09/abortable-fetch</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">https://developer.mozilla.org/en-US/docs/Web/API/AbortController</a></p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">cancelableFetch</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">reqInfo</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">reqInit</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">abortController</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">AbortController</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">signal</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> abortController.signal</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">cancel</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> abortController.abort.</span><span style=\"color: #D2A8FF\">bind</span><span style=\"color: #C9D1D9\">(abortController)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">wrapResult</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">result</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (result </span><span style=\"color: #FF7B72\">instanceof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Promise</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> promise </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> result</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      promise.</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">onfulfilled</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">onrejected</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> nativeThenResult </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> Object.</span><span style=\"color: #D2A8FF\">getPrototypeOf</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">).then.</span><span style=\"color: #D2A8FF\">call</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          onfulfilled,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          onrejected</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">wrapResult</span><span style=\"color: #C9D1D9\">(nativeThenResult)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      promise.cancel </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> cancel</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> result</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">req</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> window.</span><span style=\"color: #D2A8FF\">fetch</span><span style=\"color: #C9D1D9\">(reqInfo, Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">({ signal: signal }, reqInit))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">wrapResult</span><span style=\"color: #C9D1D9\">(req)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// =========== usage</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">req</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">cancelableFetch</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'/api/config'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> res.</span><span style=\"color: #D2A8FF\">json</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">catch</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">err</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (err.code </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> DOMException.</span><span style=\"color: #79C0FF\">ABORT_ERR</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Request canceled.'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #8B949E\">// handle error</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> req.</span><span style=\"color: #D2A8FF\">cancel</span><span style=\"color: #C9D1D9\">(), </span><span style=\"color: #79C0FF\">2000</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"try-x-number-of-times-then-bail-if-unsuccessful\">Try X number of times then bail if unsuccessful</h5>\n<p>Run a (anonymous) function recursivly a countdown number of\ntimes until condition are met or countdown is done.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">cbFetch</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fetch</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'http://trickyURL.com'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">;({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">do</span><span style=\"color: #C9D1D9\">({ </span><span style=\"color: #FFA657\">countdown</span><span style=\"color: #C9D1D9\"> } </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { countdown: </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Counting down: '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> countdown)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    countdown</span><span style=\"color: #FF7B72\">--</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">// Do (asynk) work.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">cbFetch</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      .</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Success'</span><span style=\"color: #C9D1D9\">, res)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      .</span><span style=\"color: #D2A8FF\">catch</span><span style=\"color: #C9D1D9\">(()</span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (countdown </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">do</span><span style=\"color: #C9D1D9\">({ countdown }), </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">//</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}.</span><span style=\"color: #D2A8FF\">do</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ----- or check if something has loaded in the UI</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">;({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">do</span><span style=\"color: #C9D1D9\">({ </span><span style=\"color: #FFA657\">countdown</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">interval</span><span style=\"color: #C9D1D9\"> } </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { countdown: </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">, interval: </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\"> }) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Counting down: '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> countdown)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    countdown</span><span style=\"color: #FF7B72\">--</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">// Do (asynk) work.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'#root'</span><span style=\"color: #C9D1D9\">)) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Loaded.'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (countdown </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">do</span><span style=\"color: #C9D1D9\">({ countdown }), interval)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">error</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Never loaded.'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">//</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}.</span><span style=\"color: #D2A8FF\">do</span><span style=\"color: #C9D1D9\">())</span></span></code></pre>\n<h5 id=\"return-a-random-boolean\">Return a random boolean</h5>\n<p>Result: a 50/50 change on returning true of false</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">randomBoolean</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">>=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0.5</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">randomBoolean</span><span style=\"color: #C9D1D9\">())</span></span></code></pre>\n<h5 id=\"check-if-the-provided-day-is-a-weekday\">Check if the provided day is a weekday</h5>\n<p>Using this method, you’ll be able to check\nif the date that you provide in the function\nis either a weekday or weekend day.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isWeekday</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">date</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> date.</span><span style=\"color: #D2A8FF\">getDay</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">isWeekday</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2021</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">11</span><span style=\"color: #C9D1D9\">)))</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: true (Monday)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">isWeekday</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2021</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">)))</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: false (Sunday)</span></span></code></pre>\n<h5 id=\"check-if-the-current-tab-is-in-view--focus\">Check if the current tab is in view / focus</h5>\n<p>We can check if the current tab is in view / focus\nby using the document.hidden property.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isBrowserTabInView</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> document.hidden</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isBrowserTabInView</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: returns true or false depending on</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// if tab is in view / focus</span></span></code></pre>\n<h5 id=\"check-if-a-number-is-even-or-odd\">Check if a number is even or odd</h5>\n<p>A super simple task that can be solved by using the modulo\noperator (%). If you’re not too familiar with it, here’s a\nnice visual explanation on Stack Overflow.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isEven</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">num</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> num </span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">isEven</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: true</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">isEven</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: false</span></span></code></pre>\n<h5 id=\"get-the-time-from-a-date\">Get the time from a date</h5>\n<p>By using the .toTimeString() method and slicing the string at the\ncorrect place, we can get the time from a date that we provide,\nor get the current time.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">timeFromDate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">date</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> date.</span><span style=\"color: #D2A8FF\">toTimeString</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">8</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">timeFromDate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2021</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">17</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">30</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)))</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: \"17:30:00\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">timeFromDate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">()))</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: will log the current time</span></span></code></pre>\n<h5 id=\"truncate-a-number-to-a-fixed-decimal-point\">Truncate a number to a fixed decimal point</h5>\n<p>Using the Math.pow() method, we can truncate a number to a certain\ndecimal point that we provide in the function.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">toFixed</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fixed</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">~~</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">pow</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, fixed) </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> n) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">pow</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, fixed)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Examples</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toFixed</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">25.198726354</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 25.1</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toFixed</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">25.198726354</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 25.19</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toFixed</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">25.198726354</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 25.198</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toFixed</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">25.198726354</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 25.1987</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toFixed</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">25.198726354</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 25.19872</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">toFixed</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">25.198726354</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 25.198726</span></span></code></pre>\n<h5 id=\"check-if-an-element-is-currently-in-focus\">Check if an element is currently in focus</h5>\n<p>We can check if an element is currently in focus using the\ndocument.activeElement property.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">elementIsInFocus</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> el </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> document.activeElement</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">elementIsInFocus</span><span style=\"color: #C9D1D9\">(anyElement)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: will return true if in focus, false if not in focus</span></span></code></pre>\n<h5 id=\"check-if-the-current-user-has-touch-events-supported\">Check if the current user has touch events supported</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">touchSupported</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #A5D6FF\">'ontouchstart'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> window </span><span style=\"color: #FF7B72\">||</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (window.DocumentTouch </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> document </span><span style=\"color: #FF7B72\">instanceof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">window</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #FFA657\">DocumentTouch</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">touchSupported</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: will return true if touch events are supported, false if not</span></span></code></pre>\n<h5 id=\"check-if-the-current-user-is-on-an-apple-device\">Check if the current user is on an Apple device</h5>\n<p>We can use navigator.platform to check if the current user is\non an Apple device.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">isAppleDevice</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\"> /Mac</span><span style=\"color: #FF7B72\">|</span><span style=\"color: #A5D6FF\">iPod</span><span style=\"color: #FF7B72\">|</span><span style=\"color: #A5D6FF\">iPhone</span><span style=\"color: #FF7B72\">|</span><span style=\"color: #A5D6FF\">iPad/</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(navigator.platform)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(isAppleDevice)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: will return true if user is on an Apple device</span></span></code></pre>\n<h5 id=\"scroll-to-top-of-the-page\">Scroll to top of the page</h5>\n<p>The window.scrollTo() method will take an x- and y-coordinate to\nscroll to. If we set these to zero and zero, we’ll scroll to the\ntop of the page.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">goToTop</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> window.</span><span style=\"color: #D2A8FF\">scrollTo</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">goToTop</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: will scroll the browser to the top of the page</span></span></code></pre>\n<h5 id=\"get-average-value-of-arguments\">Get average value of arguments</h5>\n<p>We can use the reduce method to get the average value of the\narguments that we provide in this function.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">average</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">args</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> args.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> a </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> b) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> args.</span><span style=\"color: #79C0FF\">length</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">average</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: 2.5</span></span></code></pre>\n<h5 id=\"convert-fahrenheit--celsius\">Convert Fahrenheit / Celsius</h5>\n<p>Dealing with temperatures can be confusing at times. These 2 functions\nwill help you convert Fahrenheit to Celsius and the other way around.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">celsiusToFahrenheit</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">celsius</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (celsius </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">9</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">32</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fahrenheitToCelsius</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">fahrenheit</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> ((fahrenheit </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">32</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">9</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Examples</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">celsiusToFahrenheit</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">15</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 59</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">celsiusToFahrenheit</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 32</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">celsiusToFahrenheit</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">20</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// -4</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">fahrenheitToCelsius</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">59</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 15</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">fahrenheitToCelsius</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">32</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 0</span></span></code></pre>\n<h5 id=\"get-selected-text-on-webpage\">Get selected text on webpage</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getSelectedText</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> window.</span><span style=\"color: #D2A8FF\">getSelection</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">()</span></span></code></pre>\n<h5 id=\"serialize-a-function-together-with-environment-variables\">Serialize a function together with environment variables</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// First, what we want to serialize.</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">123</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">b</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'hello'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">y</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> a </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> x </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> b </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> y</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Serialize a function *with its captured environment*</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">sf</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">serializeFn</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">serialize</span><span style=\"color: #C9D1D9\">(test, { a: a, b: b })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Deserialize with captured environment</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">pf</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">serializeFn</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">parse</span><span style=\"color: #C9D1D9\">(sf)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// And call it</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">pf</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">', world'</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">serializeFn</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">serialize</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">f</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">env</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #C9D1D9\">({ src: f.</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">(), env: env })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">parse</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">serialized</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">parsed</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">parse</span><span style=\"color: #C9D1D9\">(serialized)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createFunction</span><span style=\"color: #C9D1D9\">(parsed.src, parsed.env </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> {})</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createFunction</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">src</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">env</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Function</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">createFunctionBody</span><span style=\"color: #C9D1D9\">(src, env))(env)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createFunctionBody</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">src</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">env</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #A5D6FF\">'\"use strict\";</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(env).</span><span style=\"color: #D2A8FF\">reduceRight</span><span style=\"color: #C9D1D9\">(addVar, </span><span style=\"color: #A5D6FF\">'return '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> src </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">';'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">addVar</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">s</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">k</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'var '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> k </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">' = arguments[0].'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> k </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">';</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> s</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> { serialize, parse }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"create-a-hash-of-any-string\">Create a hash of any string</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">hashCode</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">s</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  s.</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> ((a </span><span style=\"color: #FF7B72\">&#x3C;&#x3C;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> a </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> b.</span><span style=\"color: #D2A8FF\">charCodeAt</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"get-text-selection\">Get text selection</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getSelectedText</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> window.</span><span style=\"color: #D2A8FF\">getSelection</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">getSelectedText</span><span style=\"color: #C9D1D9\">()</span></span></code></pre>\n<h5 id=\"copy-to-clipboard\">Copy to clipboard</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">copyToClipboard</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">text</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  navigator.clipboard?.writeText </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> navigator.clipboard.</span><span style=\"color: #D2A8FF\">writeText</span><span style=\"color: #C9D1D9\">(text)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">copyToClipboard</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Hello World'</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"clear-all-cookies\">Clear all cookies</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">clearCookies</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> document.cookie</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">';'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    (</span><span style=\"color: #FFA657\">cookie</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      (document.cookie </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> cookie</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/=</span><span style=\"color: #79C0FF\">.</span><span style=\"color: #FF7B72\">*</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">`=;expires=${</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #A5D6FF\">).</span><span style=\"color: #D2A8FF\">toUTCString</span><span style=\"color: #A5D6FF\">()</span><span style=\"color: #A5D6FF\">};path=/`</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span></code></pre>\n<h5 id=\"turn-url-query-params-into-an-object\">Turn url query params into an object</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getParameters</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">URL</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">URL</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">parse</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #A5D6FF\">'{\"'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">decodeURI</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">URL</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'?'</span><span style=\"color: #C9D1D9\">)[</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/\"/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'</span><span style=\"color: #79C0FF\">\\\\</span><span style=\"color: #A5D6FF\">\"'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/&#x26;/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'\",\"'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/=/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'\":\"'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">+</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #A5D6FF\">'\"}'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">URL</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">getParameters</span><span style=\"color: #C9D1D9\">(window.location)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Result: { search : \"easy\", page : 3 }</span></span></code></pre>\n<h5 id=\"detect-dark-mode\">Detect dark mode</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">isDarkMode</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  window.matchMedia </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> window.</span><span style=\"color: #D2A8FF\">matchMedia</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'(prefers-color-scheme: dark)'</span><span style=\"color: #C9D1D9\">).matches</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(isDarkMode) </span><span style=\"color: #8B949E\">// Result: True or False</span></span></code></pre>\n<h5 id=\"scroll-to-top--bottom\">Scroll to top / bottom</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">scrollToTop</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">element</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  element.</span><span style=\"color: #D2A8FF\">scrollIntoView</span><span style=\"color: #C9D1D9\">({ behavior: </span><span style=\"color: #A5D6FF\">'smooth'</span><span style=\"color: #C9D1D9\">, block: </span><span style=\"color: #A5D6FF\">'start'</span><span style=\"color: #C9D1D9\"> })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">scrollToBottom</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">element</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  element.</span><span style=\"color: #D2A8FF\">scrollIntoView</span><span style=\"color: #C9D1D9\">({ behavior: </span><span style=\"color: #A5D6FF\">'smooth'</span><span style=\"color: #C9D1D9\">, block: </span><span style=\"color: #A5D6FF\">'end'</span><span style=\"color: #C9D1D9\"> })</span></span></code></pre>\n<h5 id=\"tries-to-execute-a-function-until-it-does-not-return-falsey-attempts-number-of-times\">Tries to execute a function until it does not return falsey, ‘attempts’ number of times</h5>\n<p>Try to execute a function until it returns true or it times out.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">asyncRetrier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">attempts</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">options</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {}) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">defaultOptions</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { delay: </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">, args: [] }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> { </span><span style=\"color: #79C0FF\">delay</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">args</span><span style=\"color: #C9D1D9\"> } </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">defaultOptions, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">options }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">totalAttempts</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> attempts</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">resolve</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">reject</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">wrapper</span><span style=\"color: #C9D1D9\">(fn, args)()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">wrapper</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">args</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      attempts</span><span style=\"color: #FF7B72\">--</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(attempts, args)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">result</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">args)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!!</span><span style=\"color: #C9D1D9\">result)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #D2A8FF\">resolve</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            result,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            status: </span><span style=\"color: #A5D6FF\">'Success'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            attempts: totalAttempts </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> attempts,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (attempts </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #D2A8FF\">reject</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            result: </span><span style=\"color: #79C0FF\">undefined</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            status: </span><span style=\"color: #A5D6FF\">`Tried ${</span><span style=\"color: #C9D1D9\">totalAttempts</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #C9D1D9\">attempts</span><span style=\"color: #A5D6FF\">} times but failed all.`</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            attempts: totalAttempts </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> attempts,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">wrapper</span><span style=\"color: #C9D1D9\">(fn, args)(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">args), delay, attempts)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">testFunction</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0.5</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> str </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">false</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">asyncRetrier</span><span style=\"color: #C9D1D9\">(testFunction, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">, { delay: </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">, args: [</span><span style=\"color: #A5D6FF\">'myString'</span><span style=\"color: #C9D1D9\">] })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`Success after ${</span><span style=\"color: #C9D1D9\">res</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #C9D1D9\">attempts</span><span style=\"color: #A5D6FF\">} attempts, got =>`</span><span style=\"color: #C9D1D9\">, res.result)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">catch</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">err</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(err.status))</span></span></code></pre>\n<h5 id=\"create-uuid\">Create UUID</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">uuid</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #79C0FF\">[xy]</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">c</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> r </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">16</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      v </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> c </span><span style=\"color: #FF7B72\">==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'x'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> r </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> (r </span><span style=\"color: #FF7B72\">&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0x3</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0x8</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> v.</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">16</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">userID</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">uuid</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #8B949E\">//something like: \"ec0c22fa-f909-48da-92cb-db17ecdb91c5\"</span></span></code></pre>\n<h5 id=\"capitalize-first-letter-of-string\">Capitalize first letter of string</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">firstUcase</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">charAt</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">toUpperCase</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"optimize-svg\">Optimize svg</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">svgOptimizerProps</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">addSvgAttr</span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Record</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">removeAttributes</span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">[]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">removeTags</span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">[]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">replaceAttrValue</span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Record</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">str</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/**</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Cleans up svg code.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * In object add keys in camelCase where attributes normaly are kebab case.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Minimal defaults are set.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * </span><span style=\"color: #FF7B72\">@param</span><span style=\"color: #8B949E\"> </span><span style=\"color: #C9D1D9\">str</span><span style=\"color: #8B949E\"> - [string] String to process.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * </span><span style=\"color: #FF7B72\">@param</span><span style=\"color: #8B949E\"> </span><span style=\"color: #C9D1D9\">removeAttributes</span><span style=\"color: #8B949E\"> - [array] Attributes to remove.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * </span><span style=\"color: #FF7B72\">@param</span><span style=\"color: #8B949E\"> </span><span style=\"color: #C9D1D9\">removeTags</span><span style=\"color: #8B949E\"> - [array] Attributes to remove.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * </span><span style=\"color: #FF7B72\">@param</span><span style=\"color: #8B949E\"> </span><span style=\"color: #C9D1D9\">replaceAttrValue</span><span style=\"color: #8B949E\"> - [object] Replace value attributes if exists. Transforms camelcase to kebab case.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * </span><span style=\"color: #FF7B72\">@param</span><span style=\"color: #8B949E\"> </span><span style=\"color: #C9D1D9\">addSvgAttr</span><span style=\"color: #8B949E\"> - [object] Add attributes with value to svg tag. Transforms camelcase to kebab case.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * </span><span style=\"color: #FF7B72\">@returns</span><span style=\"color: #8B949E\"> string</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> */</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">svgOptimizer</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">removeAttributes</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #A5D6FF\">'xml'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'doctype'</span><span style=\"color: #C9D1D9\">],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">removeTags</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #A5D6FF\">'width'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'height'</span><span style=\"color: #C9D1D9\">],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">replaceAttrValue</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {},</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">addSvgAttr</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { width: </span><span style=\"color: #A5D6FF\">'100%'</span><span style=\"color: #C9D1D9\">, height: </span><span style=\"color: #A5D6FF\">'100%'</span><span style=\"color: #C9D1D9\"> },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">svgOptimizerProps</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">str)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Error</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #A5D6FF\">'Missing string and/or options in argument to svgOptimizer.'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">attributesRegex</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">attributes</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">[]) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">RegExp</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #A5D6FF\">`([</span><span style=\"color: #79C0FF\">\\s</span><span style=\"color: #A5D6FF\">]*(${</span><span style=\"color: #C9D1D9\">attributes</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #D2A8FF\">join</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #A5D6FF\">'|'</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">})=\")([a-zA-Z0-9:;%</span><span style=\"color: #79C0FF\">\\/\\.\\s\\(\\)\\-\\,</span><span style=\"color: #A5D6FF\">]*)(\")`</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #A5D6FF\">'gmi'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// REMOVE TAGS</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">tagsRegex</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">tags</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">[]) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">RegExp</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`</span><span style=\"color: #79C0FF\">\\s</span><span style=\"color: #A5D6FF\">*&#x3C;[!?]*[</span><span style=\"color: #79C0FF\">\\/</span><span style=\"color: #A5D6FF\">]*(${</span><span style=\"color: #C9D1D9\">tags</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #D2A8FF\">join</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #A5D6FF\">'|'</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">})[^>]*></span><span style=\"color: #79C0FF\">\\s</span><span style=\"color: #A5D6FF\">*`</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'gmi'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  str </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">tagsRegex</span><span style=\"color: #C9D1D9\">(removeTags.</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">camelcaseToKebabcase</span><span style=\"color: #C9D1D9\">(a))),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #A5D6FF\">''</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// TODO: If xmlns is remove also remove \"xlink:\" from links, sometimes also \"xmlns:xlink:\".</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// REMOVE ATTRIBUTES</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  str </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">attributesRegex</span><span style=\"color: #C9D1D9\">(removeAttributes), </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Clean up trailing whitespace in svg tag</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  str </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/(&#x3C;svg</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #79C0FF\">>]</span><span style=\"color: #A5D6FF\">( )>)/</span><span style=\"color: #FF7B72\">gi</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'&#x3C;svg>'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// REPLACE ATTRIBUTE VALUES IF EXISTS</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(replaceAttrValue).</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">attr</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    str </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">attributesRegex</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #D2A8FF\">camelcaseToKebabcase</span><span style=\"color: #C9D1D9\">(attr)]),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #A5D6FF\">`$1${</span><span style=\"color: #C9D1D9\">replaceAttrValue</span><span style=\"color: #A5D6FF\">[</span><span style=\"color: #C9D1D9\">attr</span><span style=\"color: #A5D6FF\">]</span><span style=\"color: #A5D6FF\">}$4`</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// ADD ATTRIBUTES WITH VALUES TO SVG TAG</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">svgTagRegex</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">RegExp</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'/(&#x3C;svg[^>]*>)/'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'gmi'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Extract svg tag</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">svgTag</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (str.</span><span style=\"color: #D2A8FF\">match</span><span style=\"color: #C9D1D9\">(svgTagRegex) </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> [])[</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// First: remove same previous attributes</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> newSvgTag </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> svgTag?.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">attributesRegex</span><span style=\"color: #C9D1D9\">(Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(addSvgAttr)), </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Second: insert requested attributes with value</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (newSvgTag </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> svgTag) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> attributesToAdd </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">''</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(addSvgAttr).</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">attr</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      attributesToAdd </span><span style=\"color: #FF7B72\">+=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">` ${</span><span style=\"color: #D2A8FF\">camelcaseToKebabcase</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #C9D1D9\">attr</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">}=\"${</span><span style=\"color: #C9D1D9\">addSvgAttr</span><span style=\"color: #A5D6FF\">[</span><span style=\"color: #C9D1D9\">attr</span><span style=\"color: #A5D6FF\">]</span><span style=\"color: #A5D6FF\">}\"`</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    newSvgTag </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> newSvgTag.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'&#x3C;svg'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">`&#x3C;svg${</span><span style=\"color: #C9D1D9\">attributesToAdd</span><span style=\"color: #A5D6FF\">}`</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">// Reinsert updated svg tag</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    str </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(svgTag, newSvgTag)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// RETURN OPTIMIZED STRING</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> str</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// INTERNAL HELPERS</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// =================================================================================================</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">camelcaseToKebabcase</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">propertyName</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">upperToHyphenLower</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">match</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">offset</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      (offset </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'-'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> match.</span><span style=\"color: #D2A8FF\">toLowerCase</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> propertyName.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #79C0FF\">[A-Z]</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, upperToHyphenLower)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Usage</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/* console.log('svgOptimizer', svgOptimizer({</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">    str, </span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">    removeAttributes: ['height','focusable','xmlns'], </span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">    replaceAttrValue: {fill: 'currentColor'}, </span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">    removeTags: ['xml','doctype'],</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">    addSvgAttr: {width: '100%', height: '100%', focusInline: 'false'}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">})) */</span></span></code></pre>";

				const frontmatter$C = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript helpers","description":"Usefull helpers","pubDate":"Jan 7 2023"};
				const file$C = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-helper-functions.md";
				const url$C = "/snippets/snippets-helper-functions";
				function rawContent$A() {
					return "\n##### Attempt\n\nThis snippet executes a function, returning either the result or the caught error object.\n\n```javascript\nconst attempt = (fn, ...args) => {\n  try {\n    return fn(...args)\n  } catch (e) {\n    return e instanceof Error ? e : new Error(e)\n  }\n}\nvar elements = attempt(function (selector) {\n  return document.querySelectorAll(selector)\n}, '>_>')\nif (elements instanceof Error) elements = [] // elements = []\n```\n\n##### Average\n\nThis snippet returns the average of two or more numerical values.\n\n```javascript\nconst average = (...nums) =>\n  nums.reduce((acc, val) => acc + val, 0) / nums.length\naverage(...[1, 2, 3]) // 2\naverage(1, 2, 3) // 2\n```\n\n##### Defer\n\nThis snippet delays the execution of a function until the current call stack is cleared.\n\n```javascript\nconst defer = (fn, ...args) => setTimeout(fn, 1, ...args)\n\ndefer(console.log, 'a'), console.log('b') // logs 'b' then 'a'\n```\n\n##### Function name\n\nThis snippet prints the name of a function into the console.\n\n```javascript\nconst functionName = (fn) => (console.debug(fn.name), fn)\n\nfunctionName(Math.max) // max (logged in debug channel of console)\n```\n\n##### Get type\n\n- This snippet can be used to get the type of a value.\n  \\*/\n  const getType = (v) =>\n  v === undefined\n  ? 'undefined'\n  : v === null\n  ? 'null'\n  : v.constructor.name.toLowerCase()\n\ngetType(new Set([1, 2, 3])) // 'set'\n\n##### Is\n\nThis snippet can be used to check if a value is of a particular type.\n\n```javascript\nconst is = (type, val) => ![, null].includes(val) && val.constructor === type\n\nis(Array, [1]) // true\nis(ArrayBuffer, new ArrayBuffer()) // true\nis(Map, new Map()) // true\nis(RegExp, /./g) // true\nis(Set, new Set()) // true\nis(WeakMap, new WeakMap()) // true\nis(WeakSet, new WeakSet()) // true\nis(String, '') // true\nis(String, new String('')) // true\nis(Number, 1) // true\nis(Number, new Number(1)) // true\nis(Boolean, true) // true\nis(Boolean, new Boolean(true)) // true\n```\n\n##### Is number\n\nThis snippet can be used to check whether a provided value is a number.\n\n```javascript\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n)\n}\n\nisNumber('1') // false\nisNumber(1) // true\n```\n\n##### Is promise like\n\nThis snippet checks whether an object looks like a Promise.\n\n```javascript\nconst isPromiseLike = (obj) =>\n  obj !== null &&\n  (typeof obj === 'object' || typeof obj === 'function') &&\n  typeof obj.then === 'function'\n\nisPromiseLike({\n  then: function () {\n    return ''\n  },\n}) // true\nisPromiseLike(null) // false\nisPromiseLike({}) // false\n```\n\n##### isPromise / isFunction (similar to the above but less code)\n\nChecks if function is a promise. Note that it will execute them aswell.\n\n```javascript\nconst isPromise = (item) =>\n  Object.prototype.toString.call(item) == '[object Promise]'\nconst isFunction = (item) =>\n  Object.prototype.toString.call(item) == '[object Function]'\n\nisPromise(new Promise(() => {})) // true\nisFunction(() => {}) // true\n```\n\n##### Is valid JSON\n\nThis snippet can be used to check whether a string is a valid JSON.\n\n```javascript\nconst isValidJSON = (str) => {\n  try {\n    JSON.parse(str)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nisValidJSON('{\"name\":\"Adam\",\"age\":20}') // true\nisValidJSON('{\"name\":\"Adam\",age:\"20\"}') // false\nisValidJSON(null) // true\n```\n\n##### MinN\n\nThis snippet returns the n smallest elements from a list. If n is greater than or equal to the list’s length, then it will return the original list (sorted in ascending order).\n\n```javascript\nconst minN = (arr, n = 1) => [...arr].sort((a, b) => a - b).slice(0, n)\n\nminN([1, 2, 3]) // [1]\nminN([1, 2, 3], 2) // [1,2]\n```\n\n##### Random Hexadecimal Color Code\n\nThis snippet can be used to generate a random hexadecimal color code.\n\n```javascript\nconst generateRandomHexColor = () =>\n  `#${Math.floor(Math.random() * 0xffffff).toString(16)}`\n\ngenerateRandomHexColor() // \"#e34155\"\n```\n\n##### Run promises in series\n\nThis snippet can be used to run an array of promises in series.\n\n```javascript\nconst runPromisesInSeries = (ps) =>\n  ps.reduce((p, next) => p.then(next), Promise.resolve())\nconst delay = (d) => new Promise((r) => setTimeout(r, d))\n\nrunPromisesInSeries([() => delay(1000), () => delay(2000)])\n// Executes each promise sequentially, taking a total of 3 seconds to complete\n```\n\n##### Sleep\n\nThis snippet can be used to delay the execution of an asynchronous function by putting it into sleep.\n\n```javascript\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms))\n\nasync function sleepyWork() {\n  console.log(\"I'm going to sleep for 1 second.\")\n  await sleep(1000)\n  console.log('I woke up after 1 second.')\n}\n```\n\n##### Time taken\n\nThis snippet can be used to find out the time it takes to execute a function.\n\n```javascript\nconst timeTaken = (callback) => {\n  console.time('timeTaken')\n  const r = callback()\n  console.timeEnd('timeTaken')\n  return r\n}\n\ntimeTaken(() => Math.pow(2, 10)) // 1024, (logged): timeTaken: 0.02099609375ms\n```\n\n##### Times\n\nThis snippet can be used to iterate over a callback n times.\n\n```javascript\nconst times = (n, fn, context = undefined) => {\n  let i = 0\n  while (fn.call(context, i) !== false && ++i < n) {}\n}\n\nvar output = ''\ntimes(5, (i) => (output += i))\nconsole.log(output) // 01234\n```\n\n##### To currency\n\nThis snippet can be used to format a number like a currency.\n\n```javascript\nconst toCurrency = (n, curr, LanguageFormat = undefined) =>\n  Intl.NumberFormat(LanguageFormat, {\n    style: 'currency',\n    currency: curr,\n  }).format(n)\n\ntoCurrency(123456.789, 'EUR') // €123,456.79  | currency: Euro | currencyLangFormat: Local\ntoCurrency(123456.789, 'USD', 'en-us') // $123,456.79  | currency: US Dollar | currencyLangFormat: English (United States)\ntoCurrency(123456.789, 'USD', 'fa') // ۱۲۳٬۴۵۶٫۷۹ ؜$ | currency: US Dollar | currencyLangFormat: Farsi\ntoCurrency(322342436423.2435, 'JPY') // ¥322,342,436,423 | currency: Japanese Yen | currencyLangFormat: Local\ntoCurrency(322342436423.2435, 'JPY', 'fi') // 322 342 436 423 ¥ | currency: Japanese Yen | currencyLangFormat: Finnish\n```\n\n##### To decimal mark\n\nThis snippet uses the toLocaleString() function to convert float-point arithmetic to the decimal mark form by using a number to make a comma-separated string.\n\n```javascript\nconst toDecimalMark = (num) => num.toLocaleString('en-US')\n\ntoDecimalMark(12305030388.9087) // \"12,305,030,388.909\"\n```\n\n##### Validate number\n\nThis snippet can be used to check whether a value is a number.\n\n```javascript\nconst validateNumber = (n) =>\n  !isNaN(parseFloat(n)) && isFinite(n) && Number(n) == n\n\nvalidateNumber('10') // true\n```\n\n##### Cancellable fetch\n\n<https://developers.google.com/web/updates/2017/09/abortable-fetch>\n<https://developer.mozilla.org/en-US/docs/Web/API/AbortController>\n\n```javascript\nexport function cancelableFetch(reqInfo, reqInit) {\n  const abortController = new AbortController()\n  const signal = abortController.signal\n  const cancel = abortController.abort.bind(abortController)\n\n  const wrapResult = function (result) {\n    if (result instanceof Promise) {\n      var promise = result\n      promise.then = function (onfulfilled, onrejected) {\n        var nativeThenResult = Object.getPrototypeOf(this).then.call(\n          this,\n          onfulfilled,\n          onrejected\n        )\n        return wrapResult(nativeThenResult)\n      }\n      promise.cancel = cancel\n    }\n    return result\n  }\n\n  const req = window.fetch(reqInfo, Object.assign({ signal: signal }, reqInit))\n  return wrapResult(req)\n}\n\n// =========== usage\n\nconst req = cancelableFetch('/api/config')\n  .then((res) => res.json())\n  .catch((err) => {\n    if (err.code === DOMException.ABORT_ERR) {\n      console.log('Request canceled.')\n    } else {\n      // handle error\n    }\n  })\n\nsetTimeout(() => req.cancel(), 2000)\n```\n\n##### Try X number of times then bail if unsuccessful\n\nRun a (anonymous) function recursivly a countdown number of\ntimes until condition are met or countdown is done.\n\n```javascript\nconst cbFetch = async () => fetch('http://trickyURL.com')\n\n;({\n  do({ countdown } = { countdown: 5 }) {\n    console.log('Counting down: ' + countdown)\n    countdown--\n    // Do (asynk) work.\n    cbFetch()\n      .then(res => console.log('Success', res)\n      .catch(()=>{\n        if (countdown !== 0) setTimeout(() => this.do({ countdown }), 1000)\n    })\n    //\n  },\n}.do())\n\n// ----- or check if something has loaded in the UI\n\n;({\n  do({ countdown, interval } = { countdown: 5, interval: 1000 }) {\n    console.log('Counting down: ' + countdown)\n    countdown--\n    // Do (asynk) work.\n    if(document.querySelector('#root')) {\n      console.log('Loaded.')\n    } else if (countdown !== 0) setTimeout(() => this.do({ countdown }), interval)\n    else console.error('Never loaded.')\n    //\n  },\n}.do())\n```\n\n##### Return a random boolean\n\nResult: a 50/50 change on returning true of false\n\n```javascript\nconst randomBoolean = () => Math.random() >= 0.5\nconsole.log(randomBoolean())\n```\n\n##### Check if the provided day is a weekday\n\nUsing this method, you’ll be able to check\nif the date that you provide in the function\nis either a weekday or weekend day.\n\n```javascript\nconst isWeekday = (date) => date.getDay() % 6 !== 0\nconsole.log(isWeekday(new Date(2021, 0, 11)))\n// Result: true (Monday)\nconsole.log(isWeekday(new Date(2021, 0, 10)))\n// Result: false (Sunday)\n```\n\n##### Check if the current tab is in view / focus\n\nWe can check if the current tab is in view / focus\nby using the document.hidden property.\n\n```javascript\nconst isBrowserTabInView = () => document.hidden\nisBrowserTabInView()\n// Result: returns true or false depending on\n// if tab is in view / focus\n```\n\n##### Check if a number is even or odd\n\nA super simple task that can be solved by using the modulo\noperator (%). If you’re not too familiar with it, here’s a\nnice visual explanation on Stack Overflow.\n\n```javascript\nconst isEven = (num) => num % 2 === 0\nconsole.log(isEven(2))\n// Result: true\nconsole.log(isEven(3))\n// Result: false\n```\n\n##### Get the time from a date\n\nBy using the .toTimeString() method and slicing the string at the\ncorrect place, we can get the time from a date that we provide,\nor get the current time.\n\n```javascript\nconst timeFromDate = (date) => date.toTimeString().slice(0, 8)\nconsole.log(timeFromDate(new Date(2021, 0, 10, 17, 30, 0)))\n// Result: \"17:30:00\"\nconsole.log(timeFromDate(new Date()))\n// Result: will log the current time\n```\n\n##### Truncate a number to a fixed decimal point\n\nUsing the Math.pow() method, we can truncate a number to a certain\ndecimal point that we provide in the function.\n\n```javascript\nconst toFixed = (n, fixed) => ~~(Math.pow(10, fixed) * n) / Math.pow(10, fixed)\n// Examples\ntoFixed(25.198726354, 1) // 25.1\ntoFixed(25.198726354, 2) // 25.19\ntoFixed(25.198726354, 3) // 25.198\ntoFixed(25.198726354, 4) // 25.1987\ntoFixed(25.198726354, 5) // 25.19872\ntoFixed(25.198726354, 6) // 25.198726\n```\n\n##### Check if an element is currently in focus\n\nWe can check if an element is currently in focus using the\ndocument.activeElement property.\n\n```javascript\nconst elementIsInFocus = (el) => el === document.activeElement\nelementIsInFocus(anyElement)\n// Result: will return true if in focus, false if not in focus\n```\n\n##### Check if the current user has touch events supported\n\n```javascript\nconst touchSupported = () =>\n  'ontouchstart' in window ||\n  (window.DocumentTouch && document instanceof window.DocumentTouch)\nconsole.log(touchSupported())\n// Result: will return true if touch events are supported, false if not\n```\n\n##### Check if the current user is on an Apple device\n\nWe can use navigator.platform to check if the current user is\non an Apple device.\n\n```javascript\nconst isAppleDevice = /Mac|iPod|iPhone|iPad/.test(navigator.platform)\nconsole.log(isAppleDevice)\n// Result: will return true if user is on an Apple device\n```\n\n##### Scroll to top of the page\n\nThe window.scrollTo() method will take an x- and y-coordinate to\nscroll to. If we set these to zero and zero, we’ll scroll to the\ntop of the page.\n\n```javascript\nconst goToTop = () => window.scrollTo(0, 0)\ngoToTop()\n// Result: will scroll the browser to the top of the page\n```\n\n##### Get average value of arguments\n\nWe can use the reduce method to get the average value of the\narguments that we provide in this function.\n\n```javascript\nconst average = (...args) => args.reduce((a, b) => a + b) / args.length\naverage(1, 2, 3, 4)\n// Result: 2.5\n```\n\n##### Convert Fahrenheit / Celsius\n\nDealing with temperatures can be confusing at times. These 2 functions\nwill help you convert Fahrenheit to Celsius and the other way around.\n\n```javascript\nconst celsiusToFahrenheit = (celsius) => (celsius * 9) / 5 + 32\nconst fahrenheitToCelsius = (fahrenheit) => ((fahrenheit - 32) * 5) / 9\n// Examples\ncelsiusToFahrenheit(15) // 59\ncelsiusToFahrenheit(0) // 32\ncelsiusToFahrenheit(-20) // -4\nfahrenheitToCelsius(59) // 15\nfahrenheitToCelsius(32) // 0\n```\n\n##### Get selected text on webpage\n\n```javascript\nconst getSelectedText = () => window.getSelection().toString()\n```\n\n##### Serialize a function together with environment variables\n\n```javascript\n// First, what we want to serialize.\nconst a = 123,\n  b = 'hello'\nfunction test(x, y) {\n  console.log(this)\n  return a + x + b + y\n}\n\n// Serialize a function *with its captured environment*\nconst sf = serializeFn().serialize(test, { a: a, b: b })\n\n// Deserialize with captured environment\nconst pf = serializeFn().parse(sf)\n\n// And call it\nconsole.log(pf(10, ', world'))\n\nfunction serializeFn() {\n  const serialize = (f, env) => JSON.stringify({ src: f.toString(), env: env })\n  const parse = (serialized) => {\n    const parsed = JSON.parse(serialized)\n    return createFunction(parsed.src, parsed.env || {})\n  }\n  const createFunction = (src, env) =>\n    new Function(createFunctionBody(src, env))(env)\n  const createFunctionBody = (src, env) =>\n    '\"use strict\";\\n' +\n    Object.keys(env).reduceRight(addVar, 'return ' + src + ';')\n  const addVar = (s, k) => 'var ' + k + ' = arguments[0].' + k + ';\\n' + s\n  return { serialize, parse }\n}\n```\n\n##### Create a hash of any string\n\n```javascript\nconst hashCode = (s) =>\n  s.split('').reduce((a, b) => ((a << 5) - a + b.charCodeAt(0)) | 0, 0)\n```\n\n##### Get text selection\n\n```javascript\nconst getSelectedText = () => window.getSelection().toString()\ngetSelectedText()\n```\n\n##### Copy to clipboard\n\n```javascript\nconst copyToClipboard = (text) =>\n  navigator.clipboard?.writeText && navigator.clipboard.writeText(text)\ncopyToClipboard('Hello World')\n```\n\n##### Clear all cookies\n\n```javascript\nconst clearCookies = document.cookie\n  .split(';')\n  .forEach(\n    (cookie) =>\n      (document.cookie = cookie\n        .replace(/^ +/, '')\n        .replace(/=.*/, `=;expires=${new Date(0).toUTCString()};path=/`))\n  )\n```\n\n##### Turn url query params into an object\n\n```javascript\nconst getParameters = (URL) => {\n  URL = JSON.parse(\n    '{\"' +\n      decodeURI(URL.split('?')[1])\n        .replace(/\"/g, '\\\\\"')\n        .replace(/&/g, '\",\"')\n        .replace(/=/g, '\":\"') +\n      '\"}'\n  )\n  return JSON.stringify(URL)\n}\ngetParameters(window.location)\n// Result: { search : \"easy\", page : 3 }\n```\n\n##### Detect dark mode\n\n```javascript\nconst isDarkMode =\n  window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\nconsole.log(isDarkMode) // Result: True or False\n```\n\n##### Scroll to top / bottom\n\n```javascript\nconst scrollToTop = (element) =>\n  element.scrollIntoView({ behavior: 'smooth', block: 'start' })\n\nconst scrollToBottom = (element) =>\n  element.scrollIntoView({ behavior: 'smooth', block: 'end' })\n```\n\n##### Tries to execute a function until it does not return falsey, 'attempts' number of times\n\nTry to execute a function until it returns true or it times out.\n\n```javascript\nfunction asyncRetrier(fn, attempts = 10, options = {}) {\n  const defaultOptions = { delay: 1000, args: [] }\n  const { delay, args } = { ...defaultOptions, ...options }\n  const totalAttempts = attempts\n  return new Promise((resolve, reject) => {\n    wrapper(fn, args)()\n    function wrapper(fn, args) {\n      attempts--\n      console.log(attempts, args)\n      return async () => {\n        const result = await fn(...args)\n        if (!!result)\n          resolve({\n            result,\n            status: 'Success',\n            attempts: totalAttempts - attempts,\n          })\n        else if (attempts === 0)\n          reject({\n            result: undefined,\n            status: `Tried ${totalAttempts - attempts} times but failed all.`,\n            attempts: totalAttempts - attempts,\n          })\n        else setTimeout(() => wrapper(fn, args)(...args), delay, attempts)\n      }\n    }\n  })\n}\n\nfunction testFunction(str) {\n  return Math.random() - 0.5 > 0 ? str : false\n}\n\nasyncRetrier(testFunction, 5, { delay: 1000, args: ['myString'] })\n  .then((res) =>\n    console.log(`Success after ${res.attempts} attempts, got =>`, res.result)\n  )\n  .catch((err) => console.log(err.status))\n```\n\n##### Create UUID\n\n```javascript\nfunction uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nconst userID = uuid() //something like: \"ec0c22fa-f909-48da-92cb-db17ecdb91c5\"\n```\n\n##### Capitalize first letter of string\n\n```typescript\nconst firstUcase = (str: string) => str.charAt(0).toUpperCase() + str.slice(1)\n```\n\n##### Optimize svg\n\n```typescript\ninterface svgOptimizerProps {\n  addSvgAttr?: Record<string, string>\n  removeAttributes?: string[]\n  removeTags?: string[]\n  replaceAttrValue?: Record<string, string>\n  str: string\n}\n\n/**\n * Cleans up svg code.\n * In object add keys in camelCase where attributes normaly are kebab case.\n * Minimal defaults are set.\n *\n * @param str - [string] String to process.\n * @param removeAttributes - [array] Attributes to remove.\n * @param removeTags - [array] Attributes to remove.\n * @param replaceAttrValue - [object] Replace value attributes if exists. Transforms camelcase to kebab case.\n * @param addSvgAttr - [object] Add attributes with value to svg tag. Transforms camelcase to kebab case.\n * @returns string\n */\nexport function svgOptimizer({\n  str,\n  removeAttributes = ['xml', 'doctype'],\n  removeTags = ['width', 'height'],\n  replaceAttrValue = {},\n  addSvgAttr = { width: '100%', height: '100%' },\n}: svgOptimizerProps) {\n  if (!str)\n    throw new Error(\n      'Missing string and/or options in argument to svgOptimizer.'\n    )\n  const attributesRegex = (attributes: string[]) =>\n    new RegExp(\n      `([\\s]*(${attributes.join('|')})=\")([a-zA-Z0-9:;%\\/\\.\\s\\(\\)\\-\\,]*)(\")`,\n      'gmi'\n    )\n\n  // =================================================================================================\n  // REMOVE TAGS\n  // =================================================================================================\n\n  const tagsRegex = (tags: string[]) =>\n    new RegExp(`\\s*<[!?]*[\\/]*(${tags.join('|')})[^>]*>\\s*`, 'gmi')\n  str = str.replace(\n    tagsRegex(removeTags.map((a: string) => camelcaseToKebabcase(a))),\n    ''\n  )\n  // TODO: If xmlns is remove also remove \"xlink:\" from links, sometimes also \"xmlns:xlink:\".\n\n  // =================================================================================================\n  // REMOVE ATTRIBUTES\n  // =================================================================================================\n\n  str = str.replace(attributesRegex(removeAttributes), '')\n\n  // Clean up trailing whitespace in svg tag\n  str = str.replace(/(<svg[^>]( )>)/gi, '<svg>')\n\n  // =================================================================================================\n  // REPLACE ATTRIBUTE VALUES IF EXISTS\n  // =================================================================================================\n\n  Object.keys(replaceAttrValue).forEach((attr: string) => {\n    str = str.replace(\n      attributesRegex([camelcaseToKebabcase(attr)]),\n      `$1${replaceAttrValue[attr]}$4`\n    )\n  })\n\n  // =================================================================================================\n  // ADD ATTRIBUTES WITH VALUES TO SVG TAG\n  // =================================================================================================\n\n  const svgTagRegex = new RegExp('/(<svg[^>]*>)/', 'gmi')\n  // Extract svg tag\n  const svgTag = (str.match(svgTagRegex) || [])[0]\n  // First: remove same previous attributes\n  let newSvgTag = svgTag?.replace(attributesRegex(Object.keys(addSvgAttr)), '')\n  // Second: insert requested attributes with value\n  if (newSvgTag && svgTag) {\n    let attributesToAdd = ''\n    Object.keys(addSvgAttr).forEach((attr: string) => {\n      attributesToAdd += ` ${camelcaseToKebabcase(attr)}=\"${addSvgAttr[attr]}\"`\n    })\n    newSvgTag = newSvgTag.replace('<svg', `<svg${attributesToAdd}`)\n    // Reinsert updated svg tag\n    str = str.replace(svgTag, newSvgTag)\n  }\n\n  // =================================================================================================\n  // RETURN OPTIMIZED STRING\n  // =================================================================================================\n\n  return str\n\n  // =================================================================================================\n  // INTERNAL HELPERS\n  // =================================================================================================\n\n  function camelcaseToKebabcase(propertyName: string) {\n    const upperToHyphenLower = (match: string, offset: number) =>\n      (offset > 0 ? '-' : '') + match.toLowerCase()\n    return propertyName.replace(/[A-Z]/g, upperToHyphenLower)\n  }\n}\n\n// Usage\n/* console.log('svgOptimizer', svgOptimizer({\n    str, \n    removeAttributes: ['height','focusable','xmlns'], \n    replaceAttrValue: {fill: 'currentColor'}, \n    removeTags: ['xml','doctype'],\n    addSvgAttr: {width: '100%', height: '100%', focusInline: 'false'}\n})) */\n```\n";
				}
				function compiledContent$A() {
					return html$A;
				}
				function getHeadings$C() {
					return [{"depth":5,"slug":"attempt","text":"Attempt"},{"depth":5,"slug":"average","text":"Average"},{"depth":5,"slug":"defer","text":"Defer"},{"depth":5,"slug":"function-name","text":"Function name"},{"depth":5,"slug":"get-type","text":"Get type"},{"depth":5,"slug":"is","text":"Is"},{"depth":5,"slug":"is-number","text":"Is number"},{"depth":5,"slug":"is-promise-like","text":"Is promise like"},{"depth":5,"slug":"ispromise--isfunction-similar-to-the-above-but-less-code","text":"isPromise / isFunction (similar to the above but less code)"},{"depth":5,"slug":"is-valid-json","text":"Is valid JSON"},{"depth":5,"slug":"minn","text":"MinN"},{"depth":5,"slug":"random-hexadecimal-color-code","text":"Random Hexadecimal Color Code"},{"depth":5,"slug":"run-promises-in-series","text":"Run promises in series"},{"depth":5,"slug":"sleep","text":"Sleep"},{"depth":5,"slug":"time-taken","text":"Time taken"},{"depth":5,"slug":"times","text":"Times"},{"depth":5,"slug":"to-currency","text":"To currency"},{"depth":5,"slug":"to-decimal-mark","text":"To decimal mark"},{"depth":5,"slug":"validate-number","text":"Validate number"},{"depth":5,"slug":"cancellable-fetch","text":"Cancellable fetch"},{"depth":5,"slug":"try-x-number-of-times-then-bail-if-unsuccessful","text":"Try X number of times then bail if unsuccessful"},{"depth":5,"slug":"return-a-random-boolean","text":"Return a random boolean"},{"depth":5,"slug":"check-if-the-provided-day-is-a-weekday","text":"Check if the provided day is a weekday"},{"depth":5,"slug":"check-if-the-current-tab-is-in-view--focus","text":"Check if the current tab is in view / focus"},{"depth":5,"slug":"check-if-a-number-is-even-or-odd","text":"Check if a number is even or odd"},{"depth":5,"slug":"get-the-time-from-a-date","text":"Get the time from a date"},{"depth":5,"slug":"truncate-a-number-to-a-fixed-decimal-point","text":"Truncate a number to a fixed decimal point"},{"depth":5,"slug":"check-if-an-element-is-currently-in-focus","text":"Check if an element is currently in focus"},{"depth":5,"slug":"check-if-the-current-user-has-touch-events-supported","text":"Check if the current user has touch events supported"},{"depth":5,"slug":"check-if-the-current-user-is-on-an-apple-device","text":"Check if the current user is on an Apple device"},{"depth":5,"slug":"scroll-to-top-of-the-page","text":"Scroll to top of the page"},{"depth":5,"slug":"get-average-value-of-arguments","text":"Get average value of arguments"},{"depth":5,"slug":"convert-fahrenheit--celsius","text":"Convert Fahrenheit / Celsius"},{"depth":5,"slug":"get-selected-text-on-webpage","text":"Get selected text on webpage"},{"depth":5,"slug":"serialize-a-function-together-with-environment-variables","text":"Serialize a function together with environment variables"},{"depth":5,"slug":"create-a-hash-of-any-string","text":"Create a hash of any string"},{"depth":5,"slug":"get-text-selection","text":"Get text selection"},{"depth":5,"slug":"copy-to-clipboard","text":"Copy to clipboard"},{"depth":5,"slug":"clear-all-cookies","text":"Clear all cookies"},{"depth":5,"slug":"turn-url-query-params-into-an-object","text":"Turn url query params into an object"},{"depth":5,"slug":"detect-dark-mode","text":"Detect dark mode"},{"depth":5,"slug":"scroll-to-top--bottom","text":"Scroll to top / bottom"},{"depth":5,"slug":"tries-to-execute-a-function-until-it-does-not-return-falsey-attempts-number-of-times","text":"Tries to execute a function until it does not return falsey, ‘attempts’ number of times"},{"depth":5,"slug":"create-uuid","text":"Create UUID"},{"depth":5,"slug":"capitalize-first-letter-of-string","text":"Capitalize first letter of string"},{"depth":5,"slug":"optimize-svg","text":"Optimize svg"}];
				}
				async function Content$C() {
					const { layout, ...content } = frontmatter$C;
					content.file = file$C;
					content.url = url$C;
					const contentFragment = createVNode(Fragment, { 'set:html': html$A });
					return createVNode($$SnippetPost, {
									file: file$C,
									url: url$C,
									content,
									frontmatter: content,
									headings: getHeadings$C(),
									rawContent: rawContent$A,
									compiledContent: compiledContent$A,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$C[Symbol.for('astro.needsHeadRendering')] = false;

const _page2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$C,
  compiledContent: compiledContent$A,
  default: Content$C,
  file: file$C,
  frontmatter: frontmatter$C,
  getHeadings: getHeadings$C,
  rawContent: rawContent$A,
  url: url$C
}, Symbol.toStringTag, { value: 'Module' }));

const html$z = "<p><a href=\"https://medium.com/better-programming/2020-007-the-facets-of-w3c-web-components-e76798ab7b29\">Much from this article</a></p>\n<h3 id=\"how-to-keep-separation-of-concerns-in-web-components\">How to keep separation of concerns in web components.</h3>\n<p>By calling this on connectedCallback we can load the HTML and CSS from separate files and thus keep our separation of concerns.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">async </span><span style=\"color: #D2A8FF\">connectedCallback</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> htmlFragment </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">fetchTemplate</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> styleElement </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">fetchCSS</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">attachShadow</span><span style=\"color: #C9D1D9\">({mode: </span><span style=\"color: #A5D6FF\">'open'</span><span style=\"color: #C9D1D9\">});</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.shadowRoot.</span><span style=\"color: #D2A8FF\">appendChild</span><span style=\"color: #C9D1D9\">(htmlFragment);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.shadowRoot.</span><span style=\"color: #D2A8FF\">appendChild</span><span style=\"color: #C9D1D9\">(styleElement);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/**</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">   * To make a web component customizable and distributable</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">   * add CSS var to the host: part of the CSS that is shared</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">   * between the component and the parent code.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">   */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/*</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">  :host {</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> --color: white;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> --background-color: black;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> --width: 70vw;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> --height: 50vh;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">  }</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">  #component {</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> color: var(--color);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> background-color: var(--background-color);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> width: var(--width);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> height: var(--height);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">  }</span></span></code></pre>\n<p>Then in parent code, refer the variables as this:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">  my</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\">component {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #FF7B72\">--</span><span style=\"color: #FFA657\">color</span><span style=\"color: #C9D1D9\">: midnightblue;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #FF7B72\">--</span><span style=\"color: #C9D1D9\">background</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #FFA657\">color</span><span style=\"color: #C9D1D9\">: mintcreme;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #FF7B72\">--</span><span style=\"color: #FFA657\">width</span><span style=\"color: #C9D1D9\">: 700px;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #FF7B72\">--</span><span style=\"color: #FFA657\">height</span><span style=\"color: #C9D1D9\">: 500px;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span></code></pre>\n<h3 id=\"distribution-packagejson\">Distribution Package.json</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"name\"</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">\"my-component\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"version\"</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">\"1.0.0\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"description\"</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">\"a W3C standard web component\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"repository\"</span><span style=\"color: #C9D1D9\">: {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #A5D6FF\">\"type\"</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">\"git\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #A5D6FF\">\"url\"</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">\"https://github.com/my-github-user-name/my-component.git\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"files\"</span><span style=\"color: #C9D1D9\">: [</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #A5D6FF\">\"my-component.html\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #A5D6FF\">\"my-component.css\"</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   </span><span style=\"color: #A5D6FF\">\"my-component.js\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> ]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h3 id=\"documentation\">Documentation</h3>\n<p>The published readme file should have these sections:</p>\n<ul>\n<li>Motivation. A statement of what problem the component solves.</li>\n<li>Features. A description of how the component solves that problem.</li>\n<li>Installation. A link to where to get the component, and where to put it.</li>\n<li>Configuration. A description of how to use each attribute exposed to the consumer.</li>\n<li>Example. A Hello World walk-through showing how to get the component working on an HTML page.</li>\n<li>Customization. A list of all the CSS variables that can be overridden.</li>\n<li>Events. A list of the events emitted or consumed by the component and their place in the lifecycle.</li>\n</ul>\n<hr>\n<h2 id=\"7-web-component-tricks\">7 Web Component Tricks</h2>\n<p><a href=\"https://daverupert.com/2022/04/7-web-component-tricks/\">Original article</a></p>\n<h3 id=\"1-you-can-manipulate-props-right-on-a-lit-element\">1. You can manipulate props right on a Lit element</h3>\n<p>This may be something only I would do, but if you make an element with Lit that exposes its properties, you can edit those props externally using querySelector.</p>\n<p><code>&#x3C;my-counter counter=\"3\">&#x3C;/my-counter></code></p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">myCounter</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'my-counter'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">myCounter.counter </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">10</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;/</span><span style=\"color: #C9D1D9\">scrip</span><span style=\"color: #FF7B72\">></span></span></code></pre>\n<h3 id=\"2-host-context-lets-you-style-an-element-based-on-its-parent\">2. :host-context let’s you style an element based on its parent</h3>\n<p>You can use <code>:host-context()</code> to style an element based on its parent. Your HTML may look like this:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">my-element</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">my-element</span><span style=\"color: #C9D1D9\">> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"card\"</span><span style=\"color: #C9D1D9\">>&#x3C;</span><span style=\"color: #7EE787\">my-element</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">my-element</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<p>In your CSS inside the Web Component, you have something like this:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">:host-context(</span><span style=\"color: #79C0FF\">.card</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">pink</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">:host-context(</span><span style=\"color: #79C0FF\">.card</span><span style=\"color: #C9D1D9\">)</span><span style=\"color: #79C0FF\">::after</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">content</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">'I’m in a card'</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p><a href=\"https://codepen.io/davatron5000/pen/jOYKKPN\">See Example</a></p>\n<h3 id=\"3-declarative-shadowdom\">3. Declarative ShadowDOM</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">my-element</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">template</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">shadowroot</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"open\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">>I'm a spooky skeleton screen 💀&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;/</span><span style=\"color: #7EE787\">template</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">my-element</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<p>Declarative Shadow DOM enables server-side rendering of Web Components, but one thing that’s not clear is your inlined template and the components actual template can be totally different.</p>\n<p><a href=\"https://codepen.io/davatron5000/pen/PoEBezm\">See Example</a></p>\n<h3 id=\"4-open-wc-has-a-project-starter\">4. Open WC has a project starter</h3>\n<p>If you’re looking for a <code>create-react-app</code> for Web Components, the folks at Open WC have you covered.</p>\n<p><code>npm init @open-wc</code></p>\n<p>You get so much from this (local server, testing configs, a storybook, production rollup config, etc) but my favorite bit is from the sample component’s test file: it runs an <a href=\"https://open-wc.org/docs/testing/chai-a11y-axe/\">accessibility audit</a> on your Shadow DOM!</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D2A8FF\">it</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'passes the a11y audit'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">el</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fixture</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">html</span><span style=\"color: #A5D6FF\">`&#x3C;custom-element>&#x3C;/custom-element>`</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(el).shadowDom.to.be.</span><span style=\"color: #D2A8FF\">accessible</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span></code></pre>\n<p>Accessibility out of the box! Nice.</p>\n<h3 id=\"5-you-can-rebrand-other-peoples-components\">5. You can “rebrand” other people’s components</h3>\n<p>Want to mix and match components from different design systems but keep a consistent naming structure in your company? You can import a component and “rebrand” it or even add functionality.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { CoolButton } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'cool-design-system'`</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A5D6FF\">class OurButton extends CoolButton {</span></span>\n<span class=\"line\"><span style=\"color: #A5D6FF\"> constructor { super() }</span></span>\n<span class=\"line\"><span style=\"color: #A5D6FF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #A5D6FF\">customElements.define('our-button', OurButton)</span></span></code></pre>\n<h3 id=\"6-the-open-wc-publishing-guides-are-cool\">6. The Open WC Publishing Guides are cool</h3>\n<p>The OpenWC group also has some nice <a href=\"https://open-wc.org/guides/developing-components/publishing/\">community guidelines for publishing Web Components</a>.</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Do publish latest standard EcmaScript</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Do publish standard es modules</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Do include “main”: “index.js” and “module”: “index.js” in your package.json</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Do export element classes</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Do export side effects separately</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Do import 3rd party node modules with “bare” import specifiers</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" checked disabled> Do include file extensions in import specifiers</p>\n</li>\n<li>\n<p><del>Do not optimize</del></p>\n</li>\n<li>\n<p><del>Do not bundle</del></p>\n</li>\n<li>\n<p><del>Do not minify</del></p>\n</li>\n<li>\n<p><del>Do not use .mjs file extensions</del></p>\n</li>\n<li>\n<p><del>Do not import polyfills</del></p>\n</li>\n</ul>\n<p>That’s helpful and hopefully provides a consistent experience, allowing for a consistent bundling story, and preventing weird footguns that might occur when trying to use other people’s Web Components in your project.</p>\n<h3 id=\"7-you-dont-need-build-tools-until-the-very-very-end\">7. You don’t need build tools until the very, very end</h3>\n<p>If you want to write Web Components, you can write vanilla web components and use ES Modules to join them together. You can use a web component library like Lit with an import statement pointed at skypack.dev or unpkg.com. It’s super handy to get started with zero tooling.</p>\n<p>If you want to install packages off of npm … you could try <a href=\"https://github.com/WICG/import-maps\">Import Maps</a> … but otherwise you’ll need a local dev server (vite or @web/dev-server) that supports “bare import specifiers”.</p>\n<p>It’s only when going to production that you need tooling specific to your site’s needs. TypeScript is optional, bundling is optional, minifying code is optional. From a Web Component perspective, these are all considered “application-level concerns” that happen at deployment time.</p>\n<p><a href=\"https://open-wc.org/docs/building/rollup/\">Rollup build script examples</a> are out there, but Web Components don’t prescribe how to build your application, they don’t hitch you to an architecture. It could be a whole tree-shaken SPA (single page app), but Web Components also work well in a MPA (multi-page app) architecture. It’s up to you and your application to figure out what fits best.</p>\n<hr>";

				const frontmatter$B = {"layout":"../../layouts/SnippetPost.astro","title":"Web components","description":"Usefull npm packages","pubDate":"Jan 6 2023"};
				const file$B = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-web-components.md";
				const url$B = "/snippets/snippets-web-components";
				function rawContent$z() {
					return "\n[Much from this article](https://medium.com/better-programming/2020-007-the-facets-of-w3c-web-components-e76798ab7b29)\n\n### How to keep separation of concerns in web components.\n\nBy calling this on connectedCallback we can load the HTML and CSS from separate files and thus keep our separation of concerns.\n\n```javascript\nasync connectedCallback() {\n var htmlFragment = await this.fetchTemplate();\n var styleElement = await this.fetchCSS();\n this.attachShadow({mode: 'open'});\n this.shadowRoot.appendChild(htmlFragment);\n this.shadowRoot.appendChild(styleElement);\n  }\n\n  /**\n   * To make a web component customizable and distributable\n   * add CSS var to the host: part of the CSS that is shared\n   * between the component and the parent code.\n   */\n  /*\n  :host {\n --color: white;\n --background-color: black;\n --width: 70vw;\n --height: 50vh;\n  }\n  #component {\n color: var(--color);\n background-color: var(--background-color);\n width: var(--width);\n height: var(--height);\n  }\n```\n\nThen in parent code, refer the variables as this:\n\n```javascript\n  my-component {\n   --color: midnightblue;\n   --background-color: mintcreme;\n   --width: 700px;\n   --height: 500px;\n  }\n```\n\n### Distribution Package.json\n\n```javascript\n{\n \"name\": \"my-component\",\n \"version\": \"1.0.0\",\n \"description\": \"a W3C standard web component\",\n \"repository\": {\n   \"type\": \"git\",\n   \"url\": \"https://github.com/my-github-user-name/my-component.git\"\n },\n \"files\": [\n   \"my-component.html\",\n   \"my-component.css\",\n   \"my-component.js\"\n ]\n}\n```\n\n### Documentation\n\nThe published readme file should have these sections:\n\n- Motivation. A statement of what problem the component solves.\n- Features. A description of how the component solves that problem.\n- Installation. A link to where to get the component, and where to put it.\n- Configuration. A description of how to use each attribute exposed to the consumer.\n- Example. A Hello World walk-through showing how to get the component working on an HTML page.\n- Customization. A list of all the CSS variables that can be overridden.\n- Events. A list of the events emitted or consumed by the component and their place in the lifecycle.\n\n---\n\n## 7 Web Component Tricks\n\n[Original article](https://daverupert.com/2022/04/7-web-component-tricks/)\n\n### 1. You can manipulate props right on a Lit element\n\nThis may be something only I would do, but if you make an element with Lit that exposes its properties, you can edit those props externally using querySelector.\n\n`<my-counter counter=\"3\"></my-counter>`\n\n```html\n<script>\nconst myCounter = document.querySelector('my-counter')\nmyCounter.counter = 10\n</scrip>\n```\n\n### 2. :host-context let’s you style an element based on its parent\n\nYou can use `:host-context()` to style an element based on its parent. Your HTML may look like this:\n\n```html\n<my-element></my-element> <div class=\"card\"><my-element></my-element></div>\n```\n\nIn your CSS inside the Web Component, you have something like this:\n\n```css\n:host-context(.card) {\n  background: pink;\n}\n:host-context(.card)::after {\n  content: 'I’m in a card';\n}\n```\n\n[See Example](https://codepen.io/davatron5000/pen/jOYKKPN)\n\n### 3. Declarative ShadowDOM\n\n```html\n<my-element>\n  <template shadowroot=\"open\">\n    <p>I'm a spooky skeleton screen 💀</p>\n  </template>\n</my-element>\n```\n\nDeclarative Shadow DOM enables server-side rendering of Web Components, but one thing that’s not clear is your inlined template and the components actual template can be totally different.\n\n[See Example](https://codepen.io/davatron5000/pen/PoEBezm)\n\n### 4. Open WC has a project starter\n\nIf you’re looking for a `create-react-app` for Web Components, the folks at Open WC have you covered.\n\n`npm init @open-wc`\n\nYou get so much from this (local server, testing configs, a storybook, production rollup config, etc) but my favorite bit is from the sample component’s test file: it runs an [accessibility audit](https://open-wc.org/docs/testing/chai-a11y-axe/) on your Shadow DOM!\n\n```javascript\nit('passes the a11y audit', async () => {\n  const el = await fixture(html`<custom-element></custom-element>`)\n\n  await expect(el).shadowDom.to.be.accessible()\n})\n```\n\nAccessibility out of the box! Nice.\n\n### 5. You can “rebrand” other people’s components\n\nWant to mix and match components from different design systems but keep a consistent naming structure in your company? You can import a component and “rebrand” it or even add functionality.\n\n```javascript\nimport { CoolButton } from 'cool-design-system'`\n\nclass OurButton extends CoolButton {\n constructor { super() }\n}\n\ncustomElements.define('our-button', OurButton)\n```\n\n### 6. The Open WC Publishing Guides are cool\n\nThe OpenWC group also has some nice [community guidelines for publishing Web Components](https://open-wc.org/guides/developing-components/publishing/).\n\n- [x] Do publish latest standard EcmaScript\n- [x] Do publish standard es modules\n- [x] Do include \"main\": \"index.js\" and \"module\": \"index.js\" in your package.json\n- [x] Do export element classes\n- [x] Do export side effects separately\n- [x] Do import 3rd party node modules with “bare” import specifiers\n- [x] Do include file extensions in import specifiers\n\n- ~~Do not optimize~~\n- ~~Do not bundle~~\n- ~~Do not minify~~\n- ~~Do not use .mjs file extensions~~\n- ~~Do not import polyfills~~\n\nThat’s helpful and hopefully provides a consistent experience, allowing for a consistent bundling story, and preventing weird footguns that might occur when trying to use other people’s Web Components in your project.\n\n### 7. You don’t need build tools until the very, very end\n\nIf you want to write Web Components, you can write vanilla web components and use ES Modules to join them together. You can use a web component library like Lit with an import statement pointed at skypack.dev or unpkg.com. It’s super handy to get started with zero tooling.\n\nIf you want to install packages off of npm … you could try [Import Maps](https://github.com/WICG/import-maps) … but otherwise you’ll need a local dev server (vite or @web/dev-server) that supports “bare import specifiers”.\n\nIt’s only when going to production that you need tooling specific to your site’s needs. TypeScript is optional, bundling is optional, minifying code is optional. From a Web Component perspective, these are all considered “application-level concerns” that happen at deployment time.\n\n[Rollup build script examples](https://open-wc.org/docs/building/rollup/) are out there, but Web Components don’t prescribe how to build your application, they don’t hitch you to an architecture. It could be a whole tree-shaken SPA (single page app), but Web Components also work well in a MPA (multi-page app) architecture. It’s up to you and your application to figure out what fits best.\n\n---\n";
				}
				function compiledContent$z() {
					return html$z;
				}
				function getHeadings$B() {
					return [{"depth":3,"slug":"how-to-keep-separation-of-concerns-in-web-components","text":"How to keep separation of concerns in web components."},{"depth":3,"slug":"distribution-packagejson","text":"Distribution Package.json"},{"depth":3,"slug":"documentation","text":"Documentation"},{"depth":2,"slug":"7-web-component-tricks","text":"7 Web Component Tricks"},{"depth":3,"slug":"1-you-can-manipulate-props-right-on-a-lit-element","text":"1. You can manipulate props right on a Lit element"},{"depth":3,"slug":"2-host-context-lets-you-style-an-element-based-on-its-parent","text":"2. :host-context let’s you style an element based on its parent"},{"depth":3,"slug":"3-declarative-shadowdom","text":"3. Declarative ShadowDOM"},{"depth":3,"slug":"4-open-wc-has-a-project-starter","text":"4. Open WC has a project starter"},{"depth":3,"slug":"5-you-can-rebrand-other-peoples-components","text":"5. You can “rebrand” other people’s components"},{"depth":3,"slug":"6-the-open-wc-publishing-guides-are-cool","text":"6. The Open WC Publishing Guides are cool"},{"depth":3,"slug":"7-you-dont-need-build-tools-until-the-very-very-end","text":"7. You don’t need build tools until the very, very end"}];
				}
				async function Content$B() {
					const { layout, ...content } = frontmatter$B;
					content.file = file$B;
					content.url = url$B;
					const contentFragment = createVNode(Fragment, { 'set:html': html$z });
					return createVNode($$SnippetPost, {
									file: file$B,
									url: url$B,
									content,
									frontmatter: content,
									headings: getHeadings$B(),
									rawContent: rawContent$z,
									compiledContent: compiledContent$z,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$B[Symbol.for('astro.needsHeadRendering')] = false;

const _page3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$B,
  compiledContent: compiledContent$z,
  default: Content$B,
  file: file$B,
  frontmatter: frontmatter$B,
  getHeadings: getHeadings$B,
  rawContent: rawContent$z,
  url: url$B
}, Symbol.toStringTag, { value: 'Module' }));

const html$y = "<h5 id=\"command-line\">Command line</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align=\"left\">command</th><th align=\"left\">Explanation</th></tr></thead><tbody><tr><td align=\"left\"><code>cd -</code></td><td align=\"left\">go back</td></tr><tr><td align=\"left\"><code>mkdir -p './oneleve/{a,b,c}/{c,d}'</code></td><td align=\"left\">Create folder hierarchy</td></tr><tr><td align=\"left\"><code>rm -rf dirname</code></td><td align=\"left\">Remove dir with contents</td></tr><tr><td align=\"left\"><code>find . -name testfile.txt</code></td><td align=\"left\">Find a file called testfile.txt in current and sub-directories.</td></tr><tr><td align=\"left\"><code>find /home -name *.jpg</code></td><td align=\"left\">Find all .jpg files in the /home and sub-directories.</td></tr><tr><td align=\"left\"><code>find . -type f -empty</code></td><td align=\"left\">Find an empty file within the current directory.</td></tr><tr><td align=\"left\"><code>find /home -user exampleuser -mtime -7 -iname \".db\"</code></td><td align=\"left\">Find all .db files (ignoring text case) modified in the last 7 days by a user named exampleuser.</td></tr><tr><td align=\"left\"><code>find . -name \"*.bak\" -delete</code></td><td align=\"left\">Careful!! To delete the files that end up matching your search, you can add -delete at the end of the expression. Do this only when you are positive the results will only match the files you wish to delete.</td></tr><tr><td align=\"left\"><code>find . -type f -exec grep \"example\" '{}' \\; -print</code></td><td align=\"left\">This searches every object in the current directory hierarchy (.) that is a file (-type f) and then runs the command grep “example” for every file that satisfies the conditions. The files that match are printed on the screen (-print). The curly braces ({}) are a placeholder for the find match results. The {} are enclosed in single quotes (’) to avoid handing grep a malformed file name. The -exec command is terminated with a semicolon (;), which should be escaped (;) to avoid interpretation by the shell.</td></tr></tbody></table>\n<h5 id=\"package-mnagement\">Package mnagement</h5>\n<p>You probably have unused packages.</p>\n<p><code>NPX depcheck</code> scans your entire codebase for unuswed packages\n<code>NPX depcheck --online</code> is convenient to remove them with\n<code>npm unistall [packages]</code></p>\n<h2 id=\"ssh\">SSH</h2>\n<h2 id=\"list-rsa-file-connected-to-repo-localy\">List rsa file connected to repo localy</h2>\n<p>ssh-add -L (&#x3C;— or -l)</p>\n<h3 id=\"add-rsa-to-local-repository\">Add rsa to local repository</h3>\n<p>ssh-add -K ~/.ssh/id_skf</p>\n<h3 id=\"generating-a-new-ssh-key-macos\">Generating a new ssh key (macos)</h3>\n<p><a href=\"https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agentx\">https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agentx</a>§</p>\n<h2 id=\"have-multiple-git-accounts\">Have multiple Git accounts</h2>\n<h3 id=\"in-ssh-config\">In ssh config</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\"># Personal account, - the default config</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Host github.com-personal github account</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   HostName github.com</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   User git</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   IdentityFile </span><span style=\"color: #FF7B72\">~</span><span style=\"color: #C9D1D9\">/.ssh/id_ed25519</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\"># Work account</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Host workSKF github account</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   HostName github.com</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   User git</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">   IdentityFile </span><span style=\"color: #FF7B72\">~</span><span style=\"color: #C9D1D9\">/.ssh/id_skf</span></span></code></pre>\n<h3 id=\"in-global-git-config\">In global git config</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">[alias]</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&#x3C;%an>%Creset' --abbrev-commit</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">[user]</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> email = nicolas@hervy.se</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> name = Nicolas Hervy</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">[includeIf \"gitdir:~/Documents/SKF/\"]</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">    path = ~/Documents/SKF/.gitconfig</span></span></code></pre>\n<h3 id=\"in-git-config-in-local-folder\">In git config in local folder</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">[alias]</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&#x3C;%an>%Creset' --abbrev-commit</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">[user]</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> email = nicolas.hervy@skf.com</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> name = Nicolas Hervy</span></span></code></pre>\n<p>Then clone with <code>git clone workSKF:skfccoe/rep-document-bundles.git</code></p>\n<p><a href=\"https://gist.github.com/jexchan/2351996/\">https://gist.github.com/jexchan/2351996/</a>\n<a href=\"https://www.section.io/engineering-education/using-multiple-ssh-keys-for-multiple-github-accounts/\">https://www.section.io/engineering-education/using-multiple-ssh-keys-for-multiple-github-accounts/</a>\n<a href=\"https://gist.github.com/bgauduch/06a8c4ec2fec8fef6354afe94358c89e\">https://gist.github.com/bgauduch/06a8c4ec2fec8fef6354afe94358c89e</a></p>\n<h2 id=\"curl\">CURL</h2>\n<p>Get request with curl</p>\n<p><code>curl &#x3C;url></code></p>\n<p>Get headers</p>\n<p><code>curl -v &#x3C;url></code></p>\n<p>Have curl follow redirect</p>\n<p><code>curl -L &#x3C;url></code></p>";

				const frontmatter$A = {"layout":"../../layouts/SnippetPost.astro","title":"Command line stuff","description":"Usefull Command line, bash, SSH stuff","pubDate":"Jan 6 2023"};
				const file$A = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-command-line.md";
				const url$A = "/snippets/snippets-command-line";
				function rawContent$y() {
					return "\n##### Command line\n\n| command                                               | Explanation                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| :---------------------------------------------------- ||\n| `cd -`                                                | go back|\n| `mkdir -p './oneleve/{a,b,c}/{c,d}'`                  | Create folder hierarchy                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `rm -rf dirname`                                      | Remove dir with contents                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| `find . -name testfile.txt`                           | Find a file called testfile.txt in current and sub-directories.                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `find /home -name *.jpg`                              | Find all .jpg files in the /home and sub-directories.                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| `find . -type f -empty`                               | Find an empty file within the current directory.                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `find /home -user exampleuser -mtime -7 -iname \".db\"` | Find all .db files (ignoring text case) modified in the last 7 days by a user named exampleuser.                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| `find . -name \"*.bak\" -delete`                        | Careful!! To delete the files that end up matching your search, you can add -delete at the end of the expression. Do this only when you are positive the results will only match the files you wish to delete.                                                                                                                                                                                                                                                                                                                |\n| `find . -type f -exec grep \"example\" '{}' \\; -print`  | This searches every object in the current directory hierarchy (.) that is a file (-type f) and then runs the command grep \"example\" for every file that satisfies the conditions. The files that match are printed on the screen (-print). The curly braces ({}) are a placeholder for the find match results. The {} are enclosed in single quotes (') to avoid handing grep a malformed file name. The -exec command is terminated with a semicolon (;), which should be escaped (\\;) to avoid interpretation by the shell. |\n\n##### Package mnagement\n\nYou probably have unused packages.\n\n`NPX depcheck` scans your entire codebase for unuswed packages\n`NPX depcheck --online` is convenient to remove them with\n`npm unistall [packages]`\n\n## SSH\n\n## List rsa file connected to repo localy\n\nssh-add -L (<-- or -l)\n\n### Add rsa to local repository\n\nssh-add -K ~/.ssh/id_skf\n\n### Generating a new ssh key (macos)\n\n<https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agentx>§\n\n## Have multiple Git accounts\n\n### In ssh config\n\n```bash\n# Personal account, - the default config\nHost github.com-personal github account\n   HostName github.com\n   User git\n   IdentityFile ~/.ssh/id_ed25519\n\n# Work account\nHost workSKF github account\n   HostName github.com\n   User git\n   IdentityFile ~/.ssh/id_skf\n```\n\n### In global git config\n\n```text\n[alias]\n lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n[user]\n email = nicolas@hervy.se\n name = Nicolas Hervy\n[includeIf \"gitdir:~/Documents/SKF/\"]\n    path = ~/Documents/SKF/.gitconfig\n```\n\n### In git config in local folder\n\n```text\n[alias]\n lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n[user]\n email = nicolas.hervy@skf.com\n name = Nicolas Hervy\n```\n\nThen clone with `git clone workSKF:skfccoe/rep-document-bundles.git`\n\n<https://gist.github.com/jexchan/2351996/>\n<https://www.section.io/engineering-education/using-multiple-ssh-keys-for-multiple-github-accounts/>\n<https://gist.github.com/bgauduch/06a8c4ec2fec8fef6354afe94358c89e>\n\n## CURL\n\nGet request with curl\n\n`curl <url>`\n\nGet headers\n\n`curl -v <url>`\n\nHave curl follow redirect\n\n`curl -L <url>`\n";
				}
				function compiledContent$y() {
					return html$y;
				}
				function getHeadings$A() {
					return [{"depth":5,"slug":"command-line","text":"Command line"},{"depth":5,"slug":"package-mnagement","text":"Package mnagement"},{"depth":2,"slug":"ssh","text":"SSH"},{"depth":2,"slug":"list-rsa-file-connected-to-repo-localy","text":"List rsa file connected to repo localy"},{"depth":3,"slug":"add-rsa-to-local-repository","text":"Add rsa to local repository"},{"depth":3,"slug":"generating-a-new-ssh-key-macos","text":"Generating a new ssh key (macos)"},{"depth":2,"slug":"have-multiple-git-accounts","text":"Have multiple Git accounts"},{"depth":3,"slug":"in-ssh-config","text":"In ssh config"},{"depth":3,"slug":"in-global-git-config","text":"In global git config"},{"depth":3,"slug":"in-git-config-in-local-folder","text":"In git config in local folder"},{"depth":2,"slug":"curl","text":"CURL"}];
				}
				async function Content$A() {
					const { layout, ...content } = frontmatter$A;
					content.file = file$A;
					content.url = url$A;
					const contentFragment = createVNode(Fragment, { 'set:html': html$y });
					return createVNode($$SnippetPost, {
									file: file$A,
									url: url$A,
									content,
									frontmatter: content,
									headings: getHeadings$A(),
									rawContent: rawContent$y,
									compiledContent: compiledContent$y,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$A[Symbol.for('astro.needsHeadRendering')] = false;

const _page4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$A,
  compiledContent: compiledContent$y,
  default: Content$A,
  file: file$A,
  frontmatter: frontmatter$A,
  getHeadings: getHeadings$A,
  rawContent: rawContent$y,
  url: url$A
}, Symbol.toStringTag, { value: 'Module' }));

const html$x = "<h4 id=\"expose-localhost-to-internet\">Expose localhost to internet</h4>\n<p><a href=\"https://localtunnel.github.io/www/\">Localtunnel</a> is an open-source project. It is necessary for your system to already have Node.js installed in order for you to be able to install it using npm using the following command:</p>\n<p><code>npm install -g localtunnel</code></p>\n<p>After that, you will obtain access to the lt command, and you will be able to start your HTTP tunnel using the following command:</p>\n<p><code>lt --port 400</code></p>\n<p>Make sure to change the command to correspond with the port on which your web application is operating.</p>\n<p>You will get a publicly accessible URL and for the most part, that would be enough for you to set up an integration with a service that supports webhooks.</p>\n<p>You will be provided with a URL that is open to the public.</p>\n<p>What’s interesting about Localtunnel is that there is also a repository you can clone to <a href=\"https://github.com/localtunnel/server\">set up your own localtunnel server</a>, and hence use your own custom domain. This approach requires you have control of a server where you can set up DNS entries, as well as handle incoming TCP connections for any non-root TCP port.</p>\n<hr>\n<h4 id=\"auto-animate\">Auto Animate</h4>\n<p><a href=\"https://auto-animate.formkit.com/#usage-react\">Auto Animate</a> is a nifty minimal micro animation library for React, Vue , Svelte or Angular. Basically a one line implementation. It’s not perfect but for the amount of effort you need to put in it is awsome.</p>\n<p>Install for React: <code>@formkit/auto-animate/react</code></p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">import { useState } from 'react'</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">import { useAutoAnimate } from '@formkit/auto-animate/react'</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">const App = function () {</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  const [items, setItems] = useState([0, 1, 2])</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  const [parent, enableAnimations] = useAutoAnimate(/* optional config */)</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  const add = () => setItems([...items, items.length])</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  return &#x3C;></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  &#x3C;ul ref={parent}></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">    {items.map(</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">      item => &#x3C;li key={item}>{ item }&#x3C;/li></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">    )}</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  &#x3C;/ul></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  &#x3C;button onClick={add}>Add number&#x3C;/button></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">  &#x3C;button onClick={() => enableAnimations(false)}>Disable&#x3C;/button></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">&#x3C;/></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">}</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">export default App</span></span></code></pre>\n<hr>";

				const frontmatter$z = {"layout":"../../layouts/SnippetPost.astro","title":"Useful npm packages","description":"Usefull npm packages","pubDate":"Jan 6 2023"};
				const file$z = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-external-npm.md";
				const url$z = "/snippets/snippets-external-npm";
				function rawContent$x() {
					return "\n#### Expose localhost to internet\n\n[Localtunnel](https://localtunnel.github.io/www/) is an open-source project. It is necessary for your system to already have Node.js installed in order for you to be able to install it using npm using the following command:\n\n`npm install -g localtunnel`\n\nAfter that, you will obtain access to the lt command, and you will be able to start your HTTP tunnel using the following command:\n\n`lt --port 400`\n\nMake sure to change the command to correspond with the port on which your web application is operating.\n\nYou will get a publicly accessible URL and for the most part, that would be enough for you to set up an integration with a service that supports webhooks.\n\nYou will be provided with a URL that is open to the public.\n\nWhat’s interesting about Localtunnel is that there is also a repository you can clone to [set up your own localtunnel server](https://github.com/localtunnel/server), and hence use your own custom domain. This approach requires you have control of a server where you can set up DNS entries, as well as handle incoming TCP connections for any non-root TCP port.\n\n---\n\n#### Auto Animate\n\n[Auto Animate](https://auto-animate.formkit.com/#usage-react) is a nifty minimal micro animation library for React, Vue , Svelte or Angular. Basically a one line implementation. It's not perfect but for the amount of effort you need to put in it is awsome.\n\nInstall for React: `@formkit/auto-animate/react`\n\n```Javascript\nimport { useState } from 'react'\nimport { useAutoAnimate } from '@formkit/auto-animate/react'\n\nconst App = function () {\n  const [items, setItems] = useState([0, 1, 2])\n  const [parent, enableAnimations] = useAutoAnimate(/* optional config */)\n  const add = () => setItems([...items, items.length])\n  return <>\n  <ul ref={parent}>\n    {items.map(\n      item => <li key={item}>{ item }</li>\n    )}\n  </ul>\n  <button onClick={add}>Add number</button>\n  <button onClick={() => enableAnimations(false)}>Disable</button>\n</>\n}\n\nexport default App\n```\n\n---\n";
				}
				function compiledContent$x() {
					return html$x;
				}
				function getHeadings$z() {
					return [{"depth":4,"slug":"expose-localhost-to-internet","text":"Expose localhost to internet"},{"depth":4,"slug":"auto-animate","text":"Auto Animate"}];
				}
				async function Content$z() {
					const { layout, ...content } = frontmatter$z;
					content.file = file$z;
					content.url = url$z;
					const contentFragment = createVNode(Fragment, { 'set:html': html$x });
					return createVNode($$SnippetPost, {
									file: file$z,
									url: url$z,
									content,
									frontmatter: content,
									headings: getHeadings$z(),
									rawContent: rawContent$x,
									compiledContent: compiledContent$x,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$z[Symbol.for('astro.needsHeadRendering')] = false;

const _page5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$z,
  compiledContent: compiledContent$x,
  default: Content$z,
  file: file$z,
  frontmatter: frontmatter$z,
  getHeadings: getHeadings$z,
  rawContent: rawContent$x,
  url: url$z
}, Symbol.toStringTag, { value: 'Module' }));

const html$w = "<h4 id=\"functional-programming\">Functional programming</h4>\n<p>from <a href=\"https://medium.com/better-programming/functional-programming-in-javascript-introduction-and-practical-examples-d268e44395b2\">this Medium article</a></p>\n<h5 id=\"instead-of-for-loops\">Instead of for loops</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">list1to100</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Array</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">100</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">fill</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">i</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> i </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// or in short...</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">Array</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">fill</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">i</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(i))</span></span></code></pre>\n<h5 id=\"basic-compose-function\">Basic compose function</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">compose</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">fns</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    fns.</span><span style=\"color: #D2A8FF\">reduceRight</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(res), x)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Usage</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">centsToDollars</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">compose</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  addSeparators,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  addDollarSign,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  roundTo2dp,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  divideBy100</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"basic-pipe-function-in-typescript\">Basic Pipe function in typescript</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">pipe</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">>(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">fns</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Array</span><span style=\"color: #C9D1D9\">&#x3C;(</span><span style=\"color: #FFA657\">arg</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">>) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FFA657\">value</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    fns.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">acc</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(acc), value)</span></span></code></pre>\n<h5 id=\"use-tap-and-trace-for-debugging-inside-compose\">Use tap and Trace for debugging inside compose</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">tap</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">f</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">f</span><span style=\"color: #C9D1D9\">(x)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> x</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">trace</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">label</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">tap</span><span style=\"color: #C9D1D9\">(console.log.</span><span style=\"color: #D2A8FF\">bind</span><span style=\"color: #C9D1D9\">(console, label </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">':'</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Debugging implemented to use case.</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">centsToDollars</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">compose</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">trace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'addSeparators'</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  addSeparators,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">trace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'addDollarSign'</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  addDollarSign,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">trace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'roundTo2dp'</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  roundTo2dp,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">trace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'divideBy100'</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  divideBy100,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">trace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'argument'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/* Output</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">argument: 100000000</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">divideBy100: 1000000</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">roundTo2dp: 1000000.00</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">addDollarSign: $1000000.00</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">addSeparators: $1,000,000.00</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">*/</span></span></code></pre>\n<h5 id=\"container\">Container</h5>\n<p>Use a container to encapsulate “side-effecty” operations.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">class</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Container</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">constructor</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.value </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> fn</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">isFunction</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.value) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">isAsync</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.value)) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">TypeError</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #A5D6FF\">`Container expects a function, not a ${</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #C9D1D9\">value</span><span style=\"color: #A5D6FF\">}.`</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">run</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">value</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">isFunction</span><span style=\"color: #C9D1D9\">(fn) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">isAsync</span><span style=\"color: #C9D1D9\">(fn)) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">TypeError</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #A5D6FF\">`The map method expects a function, not a ${</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #C9D1D9\">fn</span><span style=\"color: #A5D6FF\">}.`</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Container</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">isPromise</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">value</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">value</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(fn) </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">value</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Usage</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sayHello</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'Hello'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">addName</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">name</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> str </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">' '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> name</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">container</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Container</span><span style=\"color: #C9D1D9\">(sayHello)</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">greet</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> container</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(addName.</span><span style=\"color: #D2A8FF\">bind</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'Joe Bloggs'</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  .</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">tap</span><span style=\"color: #C9D1D9\">(console.log))</span></span></code></pre>";

				const frontmatter$y = {"layout":"../../layouts/SnippetPost.astro","title":"Functional programing","description":"","pubDate":"Jan 7 2023"};
				const file$y = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-functional-p.md";
				const url$y = "/snippets/snippets-functional-p";
				function rawContent$w() {
					return "\n#### Functional programming\n\nfrom [this Medium article](https://medium.com/better-programming/functional-programming-in-javascript-introduction-and-practical-examples-d268e44395b2)\n\n##### Instead of for loops\n\n```javascript\nconst list1to100 = () => {\n  return new Array(100).fill(null).map((x, i) => i + 1)\n}\n// or in short...\nArray(10)\n  .fill(null)\n  .map((x, i) => console.log(i))\n```\n\n##### Basic compose function\n\n```javascript\nconst compose =\n  (...fns) =>\n  (x) =>\n    fns.reduceRight((res, fn) => fn(res), x)\n\n// Usage\nconst centsToDollars = compose(\n  addSeparators,\n  addDollarSign,\n  roundTo2dp,\n  divideBy100\n)\n```\n\n##### Basic Pipe function in typescript\n\n```typescript\nconst pipe =\n  <T>(...fns: Array<(arg: T) => T>) =>\n  (value: T) =>\n    fns.reduce((acc, fn) => fn(acc), value)\n```\n\n##### Use tap and Trace for debugging inside compose\n\n```javascript\nconst tap = (f) => (x) => {\n  f(x)\n  return x\n}\nconst trace = (label) => tap(console.log.bind(console, label + ':'))\n\n// Debugging implemented to use case.\nconst centsToDollars = compose(\n  trace('addSeparators'),\n  addSeparators,\n  trace('addDollarSign'),\n  addDollarSign,\n  trace('roundTo2dp'),\n  roundTo2dp,\n  trace('divideBy100'),\n  divideBy100,\n  trace('argument')\n)\n\n/* Output\nargument: 100000000\ndivideBy100: 1000000\nroundTo2dp: 1000000.00\naddDollarSign: $1000000.00\naddSeparators: $1,000,000.00\n*/\n```\n\n##### Container\n\nUse a container to encapsulate \"side-effecty\" operations.\n\n```javascript\nclass Container {\n  constructor(fn) {\n    this.value = fn\n    if (!isFunction(this.value) && !isAsync(this.value)) {\n      throw new TypeError(\n        `Container expects a function, not a ${typeof this.value}.`\n      )\n    }\n  }\n  run() {\n    return this.value()\n  }\n  map(fn) {\n    if (!isFunction(fn) && !isAsync(fn)) {\n      throw new TypeError(\n        `The map method expects a function, not a ${typeof fn}.`\n      )\n    }\n    return new Container(() =>\n      isPromise(this.value()) ? this.value().then(fn) : fn(this.value())\n    )\n  }\n}\n\n// Usage\nconst sayHello = () => 'Hello'\nconst addName = (name, str) => str + ' ' + name\nconst container = new Container(sayHello)\nconst greet = container\n  .map(addName.bind(this, 'Joe Bloggs'))\n  .map(tap(console.log))\n```\n";
				}
				function compiledContent$w() {
					return html$w;
				}
				function getHeadings$y() {
					return [{"depth":4,"slug":"functional-programming","text":"Functional programming"},{"depth":5,"slug":"instead-of-for-loops","text":"Instead of for loops"},{"depth":5,"slug":"basic-compose-function","text":"Basic compose function"},{"depth":5,"slug":"basic-pipe-function-in-typescript","text":"Basic Pipe function in typescript"},{"depth":5,"slug":"use-tap-and-trace-for-debugging-inside-compose","text":"Use tap and Trace for debugging inside compose"},{"depth":5,"slug":"container","text":"Container"}];
				}
				async function Content$y() {
					const { layout, ...content } = frontmatter$y;
					content.file = file$y;
					content.url = url$y;
					const contentFragment = createVNode(Fragment, { 'set:html': html$w });
					return createVNode($$SnippetPost, {
									file: file$y,
									url: url$y,
									content,
									frontmatter: content,
									headings: getHeadings$y(),
									rawContent: rawContent$w,
									compiledContent: compiledContent$w,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$y[Symbol.for('astro.needsHeadRendering')] = false;

const _page6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$y,
  compiledContent: compiledContent$w,
  default: Content$y,
  file: file$y,
  frontmatter: frontmatter$y,
  getHeadings: getHeadings$y,
  rawContent: rawContent$w,
  url: url$y
}, Symbol.toStringTag, { value: 'Module' }));

const html$v = "<h5 id=\"function-overload\">Function overload</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">arg1</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">arg2</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span><span style=\"color: #C9D1D9\">)</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">arg1</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">arg2</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">)</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">arg1</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">arg2</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span><span style=\"color: #C9D1D9\">)</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> arg1 </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> arg2</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ❎ x is of type string</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">x</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'sample1'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'sample2'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ❎ y is of type number</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">y</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">24</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`x`</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> x, x)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`y`</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> y, y)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #FFA657\"> </span><span style=\"color: #FF7B72\">default</span><span style=\"color: #FFA657\"> </span><span style=\"color: #C9D1D9\">foo</span></span></code></pre>\n<h5 id=\"picktype-keys\">Pick&#x3C;Type, Keys></h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Todo</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">title</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">description</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">completed</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">boolean</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">TodoPreview</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Pick</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">Todo</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'title'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'completed'</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">todo</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">TodoPreview</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  title: </span><span style=\"color: #A5D6FF\">'Clean room'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  completed: </span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"non-nullable-type\">Non nullable type</h5>\n<p>Removes null or undefined from a type.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">NonNullable</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">undefined</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">never</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//usage</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">MyType</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">a</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">NonNullable</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">MyType</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'myString'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// Type is only string</span></span></code></pre>\n<h5 id=\"readonly-and-optional-mapped-types\">Readonly and optional mapped types</h5>\n<p>Redefine a type.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">MyReadOnlyType</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">readonly</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">MyOptionalType</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"common-mapped-types\">Common mapped types</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\"> { [ </span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\"> ] : </span><span style=\"color: #79C0FF\">T</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> { [ </span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\"> ] </span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">T</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> { [ </span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\"> ] </span><span style=\"color: #FF7B72\">-?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">T</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> { readonly [ </span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\"> ] : </span><span style=\"color: #79C0FF\">T</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> { readonly [ </span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\"> ] </span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">T</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> { </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\">readonly [ </span><span style=\"color: #79C0FF\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">K</span><span style=\"color: #C9D1D9\"> ] </span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">T</span><span style=\"color: #C9D1D9\"> }</span></span></code></pre>\n<h5 id=\"partial-type\">Partial type</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">MyPartial</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { [</span><span style=\"color: #FFA657\">P</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">keyof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #FFA657\">P</span><span style=\"color: #C9D1D9\">] }</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// usage</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">name</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">password</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">address</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">phone</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">partialUserType</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">MyPartial</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  name: </span><span style=\"color: #A5D6FF\">'Sten'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  password: </span><span style=\"color: #A5D6FF\">'1234'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"getter-type-using-the-as-keyword-available-since-ts-41\">Getter type. (using the ‘as’ keyword available since ts 4.1)</h5>\n<p>Creates a new key out of the current key string.\nSymbol and number keys are filtered out with the &#x26; opperator.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Getters</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">keyof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">as</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">`get${</span><span style=\"color: #FFA657\">Capitalize</span><span style=\"color: #A5D6FF\">&#x3C;</span><span style=\"color: #79C0FF\">string</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #FF7B72\">&#x26;</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #FFA657\">K</span><span style=\"color: #A5D6FF\">></span><span style=\"color: #A5D6FF\">}`</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Person</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">name</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">age</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">location</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">LazyPerson</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Getters</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">Person</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// {</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//   getName: () => string;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//   getAge: () => number;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//   getLocation: () => string;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// }</span></span></code></pre>\n<h5 id=\"remove-type-of-field\">Remove type of field</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">RemoveKindFiled</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">keyof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">as</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Exclude</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'kind'</span><span style=\"color: #C9D1D9\">>]</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Exclude</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">U</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">U</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">never</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// usage</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">KindlessCircle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">RemoveKindField</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">circle</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Circle</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">kind</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'circle'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">radius</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ==> RemoveKindField&#x3C;Circle></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">radius</span><span style=\"color: #C9D1D9\">: number</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"conditional-types\">Conditional types</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #79C0FF\">T</span><span style=\"color: #C9D1D9\"> extends </span><span style=\"color: #79C0FF\">U</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">X</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Y</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Read as When T can be assigned to type U then return X, else Y</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// usage</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">IsString</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">​</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">I0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">IsString</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #79C0FF\">number</span><span style=\"color: #C9D1D9\">>;  </span><span style=\"color: #8B949E\">// false</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">I1</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">IsString</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #A5D6FF\">\"abc\"</span><span style=\"color: #C9D1D9\">>;  </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">I2</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">IsString</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #79C0FF\">any</span><span style=\"color: #C9D1D9\">>;  </span><span style=\"color: #8B949E\">// boolean</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">I3</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">IsString</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #79C0FF\">never</span><span style=\"color: #C9D1D9\">>;  </span><span style=\"color: #8B949E\">// never</span></span></code></pre>\n<h5 id=\"mixing-up-mapped-types-with-conditionals-examples\">Mixing up mapped types with conditionals, examples</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">FunctionPropertyNames</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">keyof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">never</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}[</span><span style=\"color: #FF7B72\">keyof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">FunctionProperties</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Pick</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">FunctionPropertyNames</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">>></span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">NonFunctionPropertyNames</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">keyof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #FFA657\">K</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">never</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">K</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}[</span><span style=\"color: #FF7B72\">keyof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">NonFunctionProperties</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Pick</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">NonFunctionPropertyNames</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\">>></span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">id</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">name</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">age</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">updateName</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">newName</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">)</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">void</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T5</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">FunctionPropertyNames</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #8B949E\">// \"updateName\"</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T6</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">FunctionProperties</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #8B949E\">// { updateName: (newName: string) => void; }</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T7</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">NonFunctionPropertyNames</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #8B949E\">// \"id\" | \"name\" | \"age\"</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T8</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">NonFunctionProperties</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #8B949E\">// { id: number; name: string; age: number; }</span></span></code></pre>";

				const frontmatter$x = {"layout":"../../layouts/SnippetPost.astro","title":"Typescript","description":"","pubDate":"Jan 7 2023"};
				const file$x = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-typescript.md";
				const url$x = "/snippets/snippets-typescript";
				function rawContent$v() {
					return "\n##### Function overload\n\n```typescript\nfunction foo(arg1: number, arg2: number): number\nfunction foo(arg1: string, arg2: string): string\nfunction foo(arg1: string | number, arg2: string | number): string | number {\n  return arg1 || arg2\n}\n\n// ❎ x is of type string\nconst x = foo('sample1', 'sample2')\n// ❎ y is of type number\nconst y = foo(10, 24)\n\nconsole.log(`x`, typeof x, x)\nconsole.log(`y`, typeof y, y)\n\nexport default foo\n```\n\n##### Pick<Type, Keys>\n\n```typescript\ninterface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = Pick<Todo, 'title', 'completed'>\n\nconst todo: TodoPreview = {\n  title: 'Clean room',\n  completed: false,\n}\n```\n\n##### Non nullable type\n\nRemoves null or undefined from a type.\n\n```typescript\ntype NonNullable<T> = T extends null | undefined ? never : T\n//usage\ntype MyType = string | null\nconst a: NonNullable<MyType> = 'myString' // Type is only string\n```\n\n##### Readonly and optional mapped types\n\nRedefine a type.\n\n```typescript\ninterface MyReadOnlyType {\n  readonly [P in K]: T\n}\ninterface MyOptionalType {\n  [P in K]?: T\n}\n```\n\n##### Common mapped types\n\n```typescript\n { [ P in K ] : T }\n { [ P in K ] ?: T }\n { [ P in K ] -?: T }\n { readonly [ P in K ] : T }\n { readonly [ P in K ] ?: T }\n { -readonly [ P in K ] ?: T }\n```\n\n##### Partial type\n\n```typescript\ntype MyPartial<User> = { [P in keyof User]?: User[P] }\n// usage\ntype User = {\n  name: string\n  password: string\n  address: string\n  phone: string\n}\n\nconst partialUserType: MyPartial<User> = {\n  name: 'Sten',\n  password: '1234',\n}\n```\n\n##### Getter type. (using the 'as' keyword available since ts 4.1)\n\nCreates a new key out of the current key string.\nSymbol and number keys are filtered out with the & opperator.\n\n```typescript\ntype Getters<T> = {\n  [K in keyof T as `get${Capitalize<string & K>}`]: () => T[K]\n}\ninterface Person {\n  name: string\n  age: number\n  location: string\n}\ntype LazyPerson = Getters<Person>\n// {\n//   getName: () => string;\n//   getAge: () => number;\n//   getLocation: () => string;\n// }\n```\n\n##### Remove type of field\n\n```typescript\ntype RemoveKindFiled<T> = {\n  [K in keyof T as Exclude<K, 'kind'>]: T[K]\n}\ntype Exclude<T, U> = T extends U ? never : T\n// usage\ntype KindlessCircle = RemoveKindField<circle>\n\ninterface Circle {\n  kind: 'circle'\n  radius: number\n}\n// ==> RemoveKindField<Circle>\n{\n  radius: number\n}\n```\n\n##### Conditional types\n\n```typescript\nT extends U ? X : Y\n// Read as When T can be assigned to type U then return X, else Y\n\n// usage\ntype IsString<T> = T extends string ? true : false;\n​\ntype I0 = IsString<number>;  // false\ntype I1 = IsString<\"abc\">;  // true\ntype I2 = IsString<any>;  // boolean\ntype I3 = IsString<never>;  // never\n```\n\n##### Mixing up mapped types with conditionals, examples\n\n```typescript\ntype FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never\n}[keyof T]\ntype FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>\ntype NonFunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? never : K\n}[keyof T]\ntype NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>\ninterface User {\n  id: number\n  name: string\n  age: number\n  updateName(newName: string): void\n}\ntype T5 = FunctionPropertyNames<User> // \"updateName\"\ntype T6 = FunctionProperties<User> // { updateName: (newName: string) => void; }\ntype T7 = NonFunctionPropertyNames<User> // \"id\" | \"name\" | \"age\"\ntype T8 = NonFunctionProperties<User> // { id: number; name: string; age: number; }\n```\n";
				}
				function compiledContent$v() {
					return html$v;
				}
				function getHeadings$x() {
					return [{"depth":5,"slug":"function-overload","text":"Function overload"},{"depth":5,"slug":"picktype-keys","text":"Pick<Type, Keys>"},{"depth":5,"slug":"non-nullable-type","text":"Non nullable type"},{"depth":5,"slug":"readonly-and-optional-mapped-types","text":"Readonly and optional mapped types"},{"depth":5,"slug":"common-mapped-types","text":"Common mapped types"},{"depth":5,"slug":"partial-type","text":"Partial type"},{"depth":5,"slug":"getter-type-using-the-as-keyword-available-since-ts-41","text":"Getter type. (using the ‘as’ keyword available since ts 4.1)"},{"depth":5,"slug":"remove-type-of-field","text":"Remove type of field"},{"depth":5,"slug":"conditional-types","text":"Conditional types"},{"depth":5,"slug":"mixing-up-mapped-types-with-conditionals-examples","text":"Mixing up mapped types with conditionals, examples"}];
				}
				async function Content$x() {
					const { layout, ...content } = frontmatter$x;
					content.file = file$x;
					content.url = url$x;
					const contentFragment = createVNode(Fragment, { 'set:html': html$v });
					return createVNode($$SnippetPost, {
									file: file$x,
									url: url$x,
									content,
									frontmatter: content,
									headings: getHeadings$x(),
									rawContent: rawContent$v,
									compiledContent: compiledContent$v,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$x[Symbol.for('astro.needsHeadRendering')] = false;

const _page7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$x,
  compiledContent: compiledContent$v,
  default: Content$x,
  file: file$x,
  frontmatter: frontmatter$x,
  getHeadings: getHeadings$x,
  rawContent: rawContent$v,
  url: url$x
}, Symbol.toStringTag, { value: 'Module' }));

const html$u = "<p>Examples from <a href=\"https://medium.com/javascript-in-plain-english/the-proxy-api-is-so-powerful-that-every-web-developer-should-master-it-9bdc71a4032c\">this Medium article</a></p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">p</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(target, handler)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// target: the target object to wrap with Proxy (can be any type of object, including native arrays, functions, or even another proxy).</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// handler: an object that defines which operations will be intercepted and how to redefine intercepted operations.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/**</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Basic usage.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> */</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">man</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  name: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">proxy</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(man, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">property</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">receiver</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`Accessing the ${</span><span style=\"color: #C9D1D9\">property</span><span style=\"color: #A5D6FF\">} property`</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> target[property]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(proxy.name) </span><span style=\"color: #8B949E\">// log: Accessing the name property \\n Joe</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(proxy.age) </span><span style=\"color: #8B949E\">// log: Accessing the age property \\n undefined</span></span></code></pre>\n<p>When creating a Proxy object, in addition to defining the get trap,\nwe can also define other traps, such as has, set, delete, apply or ownKeys, etc.</p>\n<p><code>handler.get</code> is a trap for getting a property value.\n<code>handler.set</code> is a trap for setting a property value.\n<code>handler.has</code> is a trap for the in operator.\n<code>handler.deleteProperty</code> is a trap for the delete operator.\n<code>handler.ownKeys</code> is a trap for <code>Reflect.ownKeys()</code>.</p>\n<p>Note that all traps are optional. If no trap is defined, the default behavior\nof the source object is preserved. After reading the introduction of the traps\nabove, do you think the Proxy API is very powerful?</p>\n<h6 id=\"example-1\">Example 1</h6>\n<h5 id=\"enhanced-array\">Enhanced Array</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">enhancedArray</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(arr, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">property</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">receiver</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">range</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getRange</span><span style=\"color: #C9D1D9\">(property)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">indices</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> range </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> range </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getIndices</span><span style=\"color: #C9D1D9\">(property)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">values</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> indices.</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">index</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">key</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> index </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> target.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> index </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> index</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> Reflect.</span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(target, key, receiver)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> values.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> values[</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> values</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getRange</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> [start, end] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">':'</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(Number)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> end </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'undefined'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">false</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> range </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> []</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">for</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> i </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> start; i </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> end; i</span><span style=\"color: #FF7B72\">++</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      range </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> range.</span><span style=\"color: #D2A8FF\">concat</span><span style=\"color: #C9D1D9\">(i)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> range</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getIndices</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">','</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(Number)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">arr</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">enhancedArray</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">8</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(arr[</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// 2</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(arr[[</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">]]) </span><span style=\"color: #8B949E\">// [ 8, 2 ]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(arr[[</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">]]) </span><span style=\"color: #8B949E\">// [ 8, 5, 6 ]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(arr[</span><span style=\"color: #A5D6FF\">'2:4'</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [ 8, 5 ]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(arr[</span><span style=\"color: #A5D6FF\">'-2:3'</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [ 5, 2, 10, 6, 8 ]</span></span></code></pre>\n<h6 id=\"example-2\">Example 2</h6>\n<h5 id=\"enhanced-object\">Enhanced Object</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">enhancedObject</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(target, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">property</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (property </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> target) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> target[property]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getPropertyValue</span><span style=\"color: #C9D1D9\">(property, target)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> value</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getPropertyValue</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">property</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  value </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">for</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">key</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">of</span><span style=\"color: #C9D1D9\"> Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(target)) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> target[key] </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'object'</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">getPropertyValue</span><span style=\"color: #C9D1D9\">(property, target[key])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> target[property] </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'undefined'</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      value </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> target[property]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">break</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> value</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Once we have the enhancedObject function, we can use it like this:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">data</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">enhancedObject</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  user: {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    name: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    settings: {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      theme: </span><span style=\"color: #A5D6FF\">'light'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(data.user.settings.theme) </span><span style=\"color: #8B949E\">// light</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(data.theme) </span><span style=\"color: #8B949E\">// light</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(data.address) </span><span style=\"color: #8B949E\">// null</span></span></code></pre>\n<h6 id=\"example-3\">Example 3</h6>\n<h5 id=\"freeze-object\">Freeze Object</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">man</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { name: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">freezeObject</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(obj, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">set</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">true</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">deleteProperty</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">false</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">defineProperty</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">true</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">setPrototypeOf</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">true</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">freezedMan</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">freezeObject</span><span style=\"color: #C9D1D9\">(man)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//After defining the freeze function, let’s test its functionality:</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(freezedMan.name) </span><span style=\"color: #8B949E\">// Joe</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">freezedMan.name </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'Lolo'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">delete</span><span style=\"color: #C9D1D9\"> freezedMan.man</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">freezedMan.age </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">30</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(freezedMan) </span><span style=\"color: #8B949E\">// { name: 'Joe' }</span></span></code></pre>\n<h6 id=\"example-4\">Example 4</h6>\n<h5 id=\"trace-method-call\">Trace Method Call</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">traceMethodCall</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">handler</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">propKey</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">receiver</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">propValue</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> target[propKey] </span><span style=\"color: #8B949E\">// Get the original method</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> propValue </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'function'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> propValue</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">args</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">result</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> propValue.</span><span style=\"color: #D2A8FF\">apply</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">, args)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`Call ${</span><span style=\"color: #C9D1D9\">propKey</span><span style=\"color: #A5D6FF\">} method -> ${</span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #C9D1D9\">result</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">}`</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> result</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(obj, handler)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// With the traceMethodCall function, we can use it to trace the method call of the specified object:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">man</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  name: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">say</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">msg</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">`${</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #C9D1D9\">name</span><span style=\"color: #A5D6FF\">} says: ${</span><span style=\"color: #C9D1D9\">msg</span><span style=\"color: #A5D6FF\">}`</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">tracedObj</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">traceMethodCall</span><span style=\"color: #C9D1D9\">(man)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">tracedObj.</span><span style=\"color: #D2A8FF\">say</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Hello Proxy API'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Call say method -> \"Joe says: Hello Proxy API\"</span></span></code></pre>\n<p>In fact, in addition to being able to track method calls, we can also track access to properties in object.</p>\n<h6 id=\"example-5\">Example 5</h6>\n<h5 id=\"trace-property-access\">Trace Property Access</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">tracePropertyAccess</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">propKeys</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">propKeySet</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Set</span><span style=\"color: #C9D1D9\">(propKeys)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(obj, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">propKey</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">receiver</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (propKeySet.</span><span style=\"color: #D2A8FF\">has</span><span style=\"color: #C9D1D9\">(propKey)) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'GET '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> propKey)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> Reflect.</span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(target, propKey, receiver)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">set</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">propKey</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">value</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">receiver</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (propKeySet.</span><span style=\"color: #D2A8FF\">has</span><span style=\"color: #C9D1D9\">(propKey)) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'SET '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> propKey </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'='</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> value)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> Reflect.</span><span style=\"color: #D2A8FF\">set</span><span style=\"color: #C9D1D9\">(target, propKey, value, receiver)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// With the tracePropertyAccess function, we can use it to trace the property access of the specified object:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">man</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  name: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">tracedMan</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">tracePropertyAccess</span><span style=\"color: #C9D1D9\">(man, [</span><span style=\"color: #A5D6FF\">'name'</span><span style=\"color: #C9D1D9\">])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(tracedMan.name) </span><span style=\"color: #8B949E\">// GET name; Joe</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(tracedMan.age) </span><span style=\"color: #8B949E\">// undefined</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">tracedMan.name </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'Lolo'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// SET name=Lolo</span></span></code></pre>\n<h6 id=\"example-6\">Example 6</h6>\n<h5 id=\"hide-property\">Hide Property</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">hideProperty</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">prefix</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'_'</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(target, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">has</span><span style=\"color: #C9D1D9\">: (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">prop</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">prop.</span><span style=\"color: #D2A8FF\">startsWith</span><span style=\"color: #C9D1D9\">(prefix) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> prop </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> obj,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">ownKeys</span><span style=\"color: #C9D1D9\">: (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      Reflect.</span><span style=\"color: #D2A8FF\">ownKeys</span><span style=\"color: #C9D1D9\">(obj).</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        (</span><span style=\"color: #FFA657\">prop</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> prop </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'string'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">prop.</span><span style=\"color: #D2A8FF\">startsWith</span><span style=\"color: #C9D1D9\">(prefix)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      ),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">: (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">prop</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">rec</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (prop </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> rec </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> obj[prop] </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">undefined</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// With the hideProperty function, we can use it to hide properties starting with _(underscore):</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">man</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  name: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  _pwd: </span><span style=\"color: #A5D6FF\">'ProxyAPI'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">safeMan</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">hideProperty</span><span style=\"color: #C9D1D9\">(man)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(safeMan._pwd) </span><span style=\"color: #8B949E\">// undefined</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'_pwd'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">in</span><span style=\"color: #C9D1D9\"> safeMan) </span><span style=\"color: #8B949E\">// false</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(safeMan)) </span><span style=\"color: #8B949E\">// [ 'name' ]</span></span></code></pre>\n<h6 id=\"example-7\">Example 7</h6>\n<h5 id=\"sandbox\">Sandbox</h5>\n<p>For JavaScript, the sandbox is not a sandbox in the traditional sense,\nit is just a security mechanism to run some untrusted code in the sandbox,\nso that it cannot access code outside the sandbox.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sandbox</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">code</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  code </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'with (sandbox) {'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> code </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'}'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">fn</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Function</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'sandbox'</span><span style=\"color: #C9D1D9\">, code)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">sandbox</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">sandboxProxy</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(sandbox, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">has</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">key</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">true</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">key</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (key </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> Symbol.unscopables) </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">undefined</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> target[key]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(sandboxProxy)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// With the sandbox function, let’s verify its capabilities:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">man</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  name: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Hello Proxy API'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> code </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'log();console.log(name)'</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">sandbox</span><span style=\"color: #C9D1D9\">(code)(man)</span></span></code></pre>\n<h6 id=\"example-8\">Example 8</h6>\n<h5 id=\"builder-pattern\">Builder pattern</h5>\n<p>The builder pattern decomposes a complex object into relatively simple parts,\nthen creates them separately according to different needs,\nand finally builds the complex object.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Builder</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">typeOrTemplate</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">template</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> type</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (typeOrTemplate </span><span style=\"color: #FF7B72\">instanceof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Function</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    type </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> typeOrTemplate</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    template </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> typeOrTemplate</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">built</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> template </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">({}, template) </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">builder</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Proxy</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    {},</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">target</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">prop</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #A5D6FF\">'build'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> prop) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (type) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #8B949E\">// A class name (identified by the constructor) was passed. Instantiate it with props.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">obj</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">type</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">(obj, Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">({}, built))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #8B949E\">// No type information - just return the object.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> built</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">args</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #8B949E\">// If no arguments passed return current value.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> args.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> built[prop.</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">()]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          built[prop.</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">()] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> args[</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> builder</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> builder</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// With the Builder function, let’s look at two ways it can be used. The first way is to handle ordinary object:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">defaultUserInfo</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  id: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  userName: </span><span style=\"color: #A5D6FF\">'Joe'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  email: </span><span style=\"color: #A5D6FF\">'Joe@gmail.com'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Joe</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Builder</span><span style=\"color: #C9D1D9\">(defaultUserInfo).</span><span style=\"color: #D2A8FF\">id</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">build</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(Joe)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// The second way is to handle the class:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">class</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">User</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">constructor</span><span style=\"color: #C9D1D9\">() {}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">lolo</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Builder</span><span style=\"color: #C9D1D9\">(User, defaultUserInfo)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(lolo.</span><span style=\"color: #D2A8FF\">id</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">userName</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Lolo'</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">build</span><span style=\"color: #C9D1D9\">())</span></span></code></pre>";

				const frontmatter$w = {"layout":"../../layouts/SnippetPost.astro","title":"The powerful Javascript Proxy API","description":"Usefull proxy API code","pubDate":"Jan 7 2023"};
				const file$w = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippet-proxy-api.md";
				const url$w = "/snippets/snippet-proxy-api";
				function rawContent$u() {
					return "\nExamples from [this Medium article](https://medium.com/javascript-in-plain-english/the-proxy-api-is-so-powerful-that-every-web-developer-should-master-it-9bdc71a4032c)\n\n```javascript\nconst p = new Proxy(target, handler)\n// target: the target object to wrap with Proxy (can be any type of object, including native arrays, functions, or even another proxy).\n// handler: an object that defines which operations will be intercepted and how to redefine intercepted operations.\n\n/**\n * Basic usage.\n */\nconst man = {\n  name: 'Joe',\n}\nconst proxy = new Proxy(man, {\n  get(target, property, receiver) {\n    console.log(`Accessing the ${property} property`)\n    return target[property]\n  },\n})\nconsole.log(proxy.name) // log: Accessing the name property \\n Joe\nconsole.log(proxy.age) // log: Accessing the age property \\n undefined\n```\n\nWhen creating a Proxy object, in addition to defining the get trap,\nwe can also define other traps, such as has, set, delete, apply or ownKeys, etc.\n\n`handler.get` is a trap for getting a property value.\n`handler.set` is a trap for setting a property value.\n`handler.has` is a trap for the in operator.\n`handler.deleteProperty` is a trap for the delete operator.\n`handler.ownKeys` is a trap for `Reflect.ownKeys()`.\n\nNote that all traps are optional. If no trap is defined, the default behavior\nof the source object is preserved. After reading the introduction of the traps\nabove, do you think the Proxy API is very powerful?\n\n###### Example 1\n\n##### Enhanced Array\n\n```javascript\nfunction enhancedArray(arr) {\n  return new Proxy(arr, {\n    get(target, property, receiver) {\n      const range = getRange(property)\n      const indices = range ? range : getIndices(property)\n      const values = indices.map((index) => {\n        const key = index < 0 ? target.length + index : index\n        return Reflect.get(target, key, receiver)\n      })\n      return values.length === 1 ? values[0] : values\n    },\n  })\n\n  function getRange(str) {\n    var [start, end] = str.split(':').map(Number)\n    if (typeof end === 'undefined') return false\n\n    let range = []\n    for (let i = start; i < end; i++) {\n      range = range.concat(i)\n    }\n    return range\n  }\n\n  function getIndices(str) {\n    return str.split(',').map(Number)\n  }\n}\n\nconst arr = enhancedArray([10, 6, 8, 5, 2])\nconsole.log(arr[-1]) // 2\nconsole.log(arr[[2, 4]]) // [ 8, 2 ]\nconsole.log(arr[[2, -2, 1]]) // [ 8, 5, 6 ]\nconsole.log(arr['2:4']) // [ 8, 5 ]\nconsole.log(arr['-2:3']) // [ 5, 2, 10, 6, 8 ]\n```\n\n###### Example 2\n\n##### Enhanced Object\n\n```javascript\nconst enhancedObject = (target) =>\n  new Proxy(target, {\n    get(target, property) {\n      if (property in target) {\n        return target[property]\n      } else {\n        return getPropertyValue(property, target)\n      }\n    },\n  })\n\nlet value\nfunction getPropertyValue(property, target) {\n  value = null\n  for (const key of Object.keys(target)) {\n    if (typeof target[key] === 'object') {\n      getPropertyValue(property, target[key])\n    } else if (typeof target[property] !== 'undefined') {\n      value = target[property]\n      break\n    }\n  }\n  return value\n}\n// Once we have the enhancedObject function, we can use it like this:\nconst data = enhancedObject({\n  user: {\n    name: 'Joe',\n    settings: {\n      theme: 'light',\n    },\n  },\n})\nconsole.log(data.user.settings.theme) // light\nconsole.log(data.theme) // light\nconsole.log(data.address) // null\n```\n\n###### Example 3\n\n##### Freeze Object\n\n```javascript\nconst man = { name: 'Joe' }\n\nfunction freezeObject(obj) {\n  return new Proxy(obj, {\n    set() {\n      return true\n    },\n    deleteProperty() {\n      return false\n    },\n    defineProperty() {\n      return true\n    },\n    setPrototypeOf() {\n      return true\n    },\n  })\n}\n\nconst freezedMan = freezeObject(man)\n\n//After defining the freeze function, let’s test its functionality:\nconsole.log(freezedMan.name) // Joe\nfreezedMan.name = 'Lolo'\ndelete freezedMan.man\nfreezedMan.age = 30\nconsole.log(freezedMan) // { name: 'Joe' }\n```\n\n###### Example 4\n\n##### Trace Method Call\n\n```javascript\nfunction traceMethodCall(obj) {\n  const handler = {\n    get(target, propKey, receiver) {\n      const propValue = target[propKey] // Get the original method\n      return typeof propValue !== 'function'\n        ? propValue\n        : function (...args) {\n            const result = propValue.apply(this, args)\n            console.log(`Call ${propKey} method -> ${JSON.stringify(result)}`)\n            return result\n          }\n    },\n  }\n  return new Proxy(obj, handler)\n}\n\n// With the traceMethodCall function, we can use it to trace the method call of the specified object:\nconst man = {\n  name: 'Joe',\n  say(msg) {\n    return `${this.name} says: ${msg}`\n  },\n}\nconst tracedObj = traceMethodCall(man)\ntracedObj.say('Hello Proxy API')\n// Call say method -> \"Joe says: Hello Proxy API\"\n```\n\nIn fact, in addition to being able to track method calls, we can also track access to properties in object.\n\n###### Example 5\n\n##### Trace Property Access\n\n```javascript\nfunction tracePropertyAccess(obj, propKeys) {\n  const propKeySet = new Set(propKeys)\n  return new Proxy(obj, {\n    get(target, propKey, receiver) {\n      if (propKeySet.has(propKey)) {\n        console.log('GET ' + propKey)\n      }\n      return Reflect.get(target, propKey, receiver)\n    },\n    set(target, propKey, value, receiver) {\n      if (propKeySet.has(propKey)) {\n        console.log('SET ' + propKey + '=' + value)\n      }\n      return Reflect.set(target, propKey, value, receiver)\n    },\n  })\n}\n// With the tracePropertyAccess function, we can use it to trace the property access of the specified object:\nconst man = {\n  name: 'Joe',\n}\nconst tracedMan = tracePropertyAccess(man, ['name'])\nconsole.log(tracedMan.name) // GET name; Joe\nconsole.log(tracedMan.age) // undefined\ntracedMan.name = 'Lolo' // SET name=Lolo\n```\n\n###### Example 6\n\n##### Hide Property\n\n```javascript\nfunction hideProperty(target, prefix = '_') {\n  return new Proxy(target, {\n    has: (obj, prop) => !prop.startsWith(prefix) && prop in obj,\n    ownKeys: (obj) =>\n      Reflect.ownKeys(obj).filter(\n        (prop) => typeof prop !== 'string' || !prop.startsWith(prefix)\n      ),\n    get: (obj, prop, rec) => (prop in rec ? obj[prop] : undefined),\n  })\n}\n\n// With the hideProperty function, we can use it to hide properties starting with _(underscore):\nconst man = {\n  name: 'Joe',\n  _pwd: 'ProxyAPI',\n}\nconst safeMan = hideProperty(man)\nconsole.log(safeMan._pwd) // undefined\nconsole.log('_pwd' in safeMan) // false\nconsole.log(Object.keys(safeMan)) // [ 'name' ]\n```\n\n###### Example 7\n\n##### Sandbox\n\nFor JavaScript, the sandbox is not a sandbox in the traditional sense,\nit is just a security mechanism to run some untrusted code in the sandbox,\nso that it cannot access code outside the sandbox.\n\n```javascript\nfunction sandbox(code) {\n  code = 'with (sandbox) {' + code + '}'\n  const fn = new Function('sandbox', code)\n\n  return function (sandbox) {\n    const sandboxProxy = new Proxy(sandbox, {\n      has(target, key) {\n        return true\n      },\n      get(target, key) {\n        if (key === Symbol.unscopables) return undefined\n        return target[key]\n      },\n    })\n    return fn(sandboxProxy)\n  }\n}\n\n// With the sandbox function, let’s verify its capabilities:\nconst man = {\n  name: 'Joe',\n  log() {\n    console.log('Hello Proxy API')\n  },\n}\nlet code = 'log();console.log(name)'\nsandbox(code)(man)\n```\n\n###### Example 8\n\n##### Builder pattern\n\nThe builder pattern decomposes a complex object into relatively simple parts,\nthen creates them separately according to different needs,\nand finally builds the complex object.\n\n```javascript\nfunction Builder(typeOrTemplate, template) {\n  let type\n  if (typeOrTemplate instanceof Function) {\n    type = typeOrTemplate\n  } else {\n    template = typeOrTemplate\n  }\n  const built = template ? Object.assign({}, template) : {}\n  const builder = new Proxy(\n    {},\n    {\n      get(target, prop) {\n        if ('build' === prop) {\n          if (type) {\n            // A class name (identified by the constructor) was passed. Instantiate it with props.\n            const obj = new type()\n            return () => Object.assign(obj, Object.assign({}, built))\n          } else {\n            // No type information - just return the object.\n            return () => built\n          }\n        }\n        return (...args) => {\n          // If no arguments passed return current value.\n          if (0 === args.length) {\n            return built[prop.toString()]\n          }\n          built[prop.toString()] = args[0]\n          return builder\n        }\n      },\n    }\n  )\n  return builder\n}\n\n// With the Builder function, let’s look at two ways it can be used. The first way is to handle ordinary object:\nconst defaultUserInfo = {\n  id: 1,\n  userName: 'Joe',\n  email: 'Joe@gmail.com',\n}\nconst Joe = Builder(defaultUserInfo).id(2).build()\nconsole.log(Joe)\n\n// The second way is to handle the class:\n\nclass User {\n  constructor() {}\n}\nconst lolo = Builder(User, defaultUserInfo)\nconsole.log(lolo.id(3).userName('Lolo').build())\n```\n";
				}
				function compiledContent$u() {
					return html$u;
				}
				function getHeadings$w() {
					return [{"depth":6,"slug":"example-1","text":"Example 1"},{"depth":5,"slug":"enhanced-array","text":"Enhanced Array"},{"depth":6,"slug":"example-2","text":"Example 2"},{"depth":5,"slug":"enhanced-object","text":"Enhanced Object"},{"depth":6,"slug":"example-3","text":"Example 3"},{"depth":5,"slug":"freeze-object","text":"Freeze Object"},{"depth":6,"slug":"example-4","text":"Example 4"},{"depth":5,"slug":"trace-method-call","text":"Trace Method Call"},{"depth":6,"slug":"example-5","text":"Example 5"},{"depth":5,"slug":"trace-property-access","text":"Trace Property Access"},{"depth":6,"slug":"example-6","text":"Example 6"},{"depth":5,"slug":"hide-property","text":"Hide Property"},{"depth":6,"slug":"example-7","text":"Example 7"},{"depth":5,"slug":"sandbox","text":"Sandbox"},{"depth":6,"slug":"example-8","text":"Example 8"},{"depth":5,"slug":"builder-pattern","text":"Builder pattern"}];
				}
				async function Content$w() {
					const { layout, ...content } = frontmatter$w;
					content.file = file$w;
					content.url = url$w;
					const contentFragment = createVNode(Fragment, { 'set:html': html$u });
					return createVNode($$SnippetPost, {
									file: file$w,
									url: url$w,
									content,
									frontmatter: content,
									headings: getHeadings$w(),
									rawContent: rawContent$u,
									compiledContent: compiledContent$u,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$w[Symbol.for('astro.needsHeadRendering')] = false;

const _page8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$w,
  compiledContent: compiledContent$u,
  default: Content$w,
  file: file$w,
  frontmatter: frontmatter$w,
  getHeadings: getHeadings$w,
  rawContent: rawContent$u,
  url: url$w
}, Symbol.toStringTag, { value: 'Module' }));

const html$t = "<h5 id=\"delay\">Delay</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">timeout</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">resolve</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">timeoutHandle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">clearTimeout</span><span style=\"color: #C9D1D9\">(timeoutHandle)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">resolve</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }, timeout)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Example</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">example</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'The first log'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'The second log with 1000 ms delay'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"break-up-a-long-running-task\">Break Up a Long-Running Task</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">nextFrame</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">nextTick</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> requestAnimationFrame </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> setImmediate.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">nextTick</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">res</span><span style=\"color: #C9D1D9\">()))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Example usage</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">longRunningTask</span><span style=\"color: #C9D1D9\">(){</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> step </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">while</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">){</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">         </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">++</span><span style=\"color: #C9D1D9\">step </span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">){</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">              </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">nextFrame</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">         }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">longRunningTask</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'The first log'</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"add-a-timeout-limit-to-promise\">Add a Timeout Limit To Promise</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">addTimeoutToPromise</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">targetPromise</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">timeout</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> timeoutHandle</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">timeoutLimitPromise</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">rej</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    timeoutHandle </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">rej</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Error</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Timeout exceeded'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      timeout</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">race</span><span style=\"color: #C9D1D9\">([targetPromise, timeoutLimitPromise]).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">clearTimeout</span><span style=\"color: #C9D1D9\">(timeoutHandle)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> res</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//Example: no timeout</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">addTimeoutToPromise</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Completed'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">2000</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// --> Completed</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Example: timeout</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">addTimeoutToPromise</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2000</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">catch</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">e</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">error</span><span style=\"color: #C9D1D9\">(e.message))</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// --> Timeout exceeded</span></span></code></pre>\n<h5 id=\"complete-promises-in-sequence\">Complete promises in sequence</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">completeInSequence</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">promiseFactories</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Promise</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #79C0FF\">any</span><span style=\"color: #C9D1D9\">>) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> promiseFactories.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    (</span><span style=\"color: #FFA657\">chain</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">promiseFactory</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> chain.</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">promiseFactory</span><span style=\"color: #C9D1D9\">()),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">resolve</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Example usage</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">completeInSequence</span><span style=\"color: #C9D1D9\">([</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'1'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'2'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'3'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">])</span></span></code></pre>\n<h5 id=\"complete-only-n-promises-simultaneously\">Complete Only N Promises Simultaneously</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">completePromisesInPool</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">promiseFactories</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">Promise</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #79C0FF\">any</span><span style=\"color: #C9D1D9\">>,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">maxPoolSize</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">number</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> nextPromise </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">runPromise</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      nextPromise</span><span style=\"color: #FF7B72\">++</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (nextPromise </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> promiseFactories.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #D2A8FF\">res</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> promiseFactories[nextPromise </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">]().</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">runPromise</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    Array.</span><span style=\"color: #D2A8FF\">from</span><span style=\"color: #C9D1D9\">({ length: maxPoolSize }).</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">runPromise</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Example usage</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">completePromisesInPool</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'1'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'2'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'3'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'4'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'5'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">delay</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'6'</span><span style=\"color: #C9D1D9\">)),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  ],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">2</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">)</span></span></code></pre>";

				const frontmatter$v = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript promise snippets","description":"Promises promises","pubDate":"Jan 7 2023"};
				const file$v = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-promises.md";
				const url$v = "/snippets/snippets-promises";
				function rawContent$t() {
					return "\n##### Delay\n\n```javascript\nfunction delay(timeout) {\n  return new Promise((resolve) => {\n    const timeoutHandle = setTimeout(() => {\n      clearTimeout(timeoutHandle)\n      resolve()\n    }, timeout)\n  })\n}\n// Example\nasync function example() {\n  console.log('The first log')\n  await delay(1000)\n  console.log('The second log with 1000 ms delay')\n}\n```\n\n##### Break Up a Long-Running Task\n\n```javascript\nfunction nextFrame() {\n    const nextTick = requestAnimationFrame || setImmediate.\n    return new Promise((res) => nextTick(() => res()))\n}\n// Example usage\nasync function longRunningTask(){\n    let step = 0;\n    while(true){\n         if (++step % 5 === 0){\n              await nextFrame();\n         }\n    }\n }\n longRunningTask();\n console.log('The first log')\n```\n\n##### Add a Timeout Limit To Promise\n\n```javascript\nfunction addTimeoutToPromise(targetPromise, timeout) {\n  let timeoutHandle\n  const timeoutLimitPromise = new Promise((res, rej) => {\n    timeoutHandle = setTimeout(\n      () => rej(new Error('Timeout exceeded')),\n      timeout\n    )\n  })\n  return Promise.race([targetPromise, timeoutLimitPromise]).then((res) => {\n    clearTimeout(timeoutHandle)\n    return res\n  })\n}\n//Example: no timeout\naddTimeoutToPromise(\n  delay(1000).then(() => console.log('Completed')),\n  2000\n)\n// --> Completed\n// Example: timeout\naddTimeoutToPromise(delay(2000), 1000).catch((e) => console.error(e.message))\n// --> Timeout exceeded\n```\n\n##### Complete promises in sequence\n\n```javascript\nfunction completeInSequence(promiseFactories: () => Promise<any>) {\n  return promiseFactories.reduce(\n    (chain, promiseFactory) => chain.then(() => promiseFactory()),\n    Promise.resolve()\n  )\n}\n// Example usage\ncompleteInSequence([\n  () => delay(1000).then(() => console.log('1')),\n  () => delay(1000).then(() => console.log('2')),\n  () => delay(1000).then(() => console.log('3')),\n])\n```\n\n##### Complete Only N Promises Simultaneously\n\n```javascript\nfunction completePromisesInPool(\n  promiseFactories: () => Promise<any>,\n  maxPoolSize: number\n) {\n  return new Promise((res) => {\n    let nextPromise = 0\n    const runPromise = () => {\n      nextPromise++\n      if (nextPromise > promiseFactories.length) {\n        res()\n        return\n      }\n      return promiseFactories[nextPromise - 1]().then(() => runPromise())\n    }\n\n    Array.from({ length: maxPoolSize }).map(() => runPromise())\n  })\n}\n// Example usage\ncompletePromisesInPool(\n  [\n    () => delay(1000).then(() => console.log('1')),\n    () => delay(1000).then(() => console.log('2')),\n    () => delay(1000).then(() => console.log('3')),\n    () => delay(1000).then(() => console.log('4')),\n    () => delay(1000).then(() => console.log('5')),\n    () => delay(1000).then(() => console.log('6')),\n  ],\n  2\n)\n```\n";
				}
				function compiledContent$t() {
					return html$t;
				}
				function getHeadings$v() {
					return [{"depth":5,"slug":"delay","text":"Delay"},{"depth":5,"slug":"break-up-a-long-running-task","text":"Break Up a Long-Running Task"},{"depth":5,"slug":"add-a-timeout-limit-to-promise","text":"Add a Timeout Limit To Promise"},{"depth":5,"slug":"complete-promises-in-sequence","text":"Complete promises in sequence"},{"depth":5,"slug":"complete-only-n-promises-simultaneously","text":"Complete Only N Promises Simultaneously"}];
				}
				async function Content$v() {
					const { layout, ...content } = frontmatter$v;
					content.file = file$v;
					content.url = url$v;
					const contentFragment = createVNode(Fragment, { 'set:html': html$t });
					return createVNode($$SnippetPost, {
									file: file$v,
									url: url$v,
									content,
									frontmatter: content,
									headings: getHeadings$v(),
									rawContent: rawContent$t,
									compiledContent: compiledContent$t,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$v[Symbol.for('astro.needsHeadRendering')] = false;

const _page9 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$v,
  compiledContent: compiledContent$t,
  default: Content$v,
  file: file$v,
  frontmatter: frontmatter$v,
  getHeadings: getHeadings$v,
  rawContent: rawContent$t,
  url: url$v
}, Symbol.toStringTag, { value: 'Module' }));

const html$s = "<h5 id=\"default\">default</h5>\n<p>This snippet assigns default values for all properties in an object that are undefined.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">defaults</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">defs</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">({}, obj, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">defs.</span><span style=\"color: #D2A8FF\">reverse</span><span style=\"color: #C9D1D9\">(), obj)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">defaults</span><span style=\"color: #C9D1D9\">({ a: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> }, { b: </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\"> }, { b: </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #C9D1D9\"> }, { a: </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\"> }) </span><span style=\"color: #8B949E\">// { a: 1, b: 2 }</span></span></code></pre>\n<h5 id=\"findkey\">findKey</h5>\n<p>This snippet returns the first key that satisfies a given function.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">findKey</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(obj).</span><span style=\"color: #D2A8FF\">find</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">key</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(obj[key], key, obj))</span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D2A8FF\">findKey</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    barney: { age: </span><span style=\"color: #79C0FF\">36</span><span style=\"color: #C9D1D9\">, active: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    fred: { age: </span><span style=\"color: #79C0FF\">40</span><span style=\"color: #C9D1D9\">, active: </span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\"> },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    pebbles: { age: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, active: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FFA657\">o</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> o[</span><span style=\"color: #A5D6FF\">'active'</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'barney'</span></span></code></pre>\n<h5 id=\"forown\">forOwn</h5>\n<p>This snippet iterates on each property of an object and iterates a callback for each one respectively.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">forOwn</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(obj).</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">key</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(obj[key], key, obj))</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">forOwn</span><span style=\"color: #C9D1D9\">({ foo: </span><span style=\"color: #A5D6FF\">'bar'</span><span style=\"color: #C9D1D9\">, a: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> }, (</span><span style=\"color: #FFA657\">v</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(v)) </span><span style=\"color: #8B949E\">// 'bar', 1</span></span></code></pre>\n<h5 id=\"isobject\">isObject</h5>\n<p>This snippet can be used to check whether a provided value is an object. It uses the Object constructor to create an object wrapper for the given value.\nIf it is already an object, then an object type that corresponds to the given value will be returned. Otherwise, a new object will be returned.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isObject</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> obj </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Object</span><span style=\"color: #C9D1D9\">(obj)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObject</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObject</span><span style=\"color: #C9D1D9\">([]) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObject</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #A5D6FF\">'Hello!'</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObject</span><span style=\"color: #C9D1D9\">({ a: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> }) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObject</span><span style=\"color: #C9D1D9\">({}) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObject</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// false</span></span></code></pre>\n<h5 id=\"isobjectlike\">isObjectLike</h5>\n<p>This snippet can be used to check if a value is not null and that its typeof is “object”.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isObjectLike</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> val </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> val </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'object'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObjectLike</span><span style=\"color: #C9D1D9\">({}) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObjectLike</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObjectLike</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> x) </span><span style=\"color: #8B949E\">// false</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isObjectLike</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// false</span></span></code></pre>\n<h5 id=\"isplainobject\">isPlainObject</h5>\n<p>This snippet checks whether a value is an object created by the Object constructor.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isPlainObject</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">!!</span><span style=\"color: #C9D1D9\">val </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> val </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'object'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> val.</span><span style=\"color: #79C0FF\">constructor</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> Object</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isPlainObject</span><span style=\"color: #C9D1D9\">({ a: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> }) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isPlainObject</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Map</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// false</span></span></code></pre>\n<h5 id=\"matches\">matches</h5>\n<p>This snippet compares two objects to determine if the first one contains the same property values as the second one.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">matches</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">source</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Object.</span><span style=\"color: #D2A8FF\">keys</span><span style=\"color: #C9D1D9\">(source).</span><span style=\"color: #D2A8FF\">every</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    (</span><span style=\"color: #FFA657\">key</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> obj.</span><span style=\"color: #D2A8FF\">hasOwnProperty</span><span style=\"color: #C9D1D9\">(key) </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> obj[key] </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> source[key]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">matches</span><span style=\"color: #C9D1D9\">({ age: </span><span style=\"color: #79C0FF\">25</span><span style=\"color: #C9D1D9\">, hair: </span><span style=\"color: #A5D6FF\">'long'</span><span style=\"color: #C9D1D9\">, beard: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> }, { hair: </span><span style=\"color: #A5D6FF\">'long'</span><span style=\"color: #C9D1D9\">, beard: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> }) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">matches</span><span style=\"color: #C9D1D9\">({ hair: </span><span style=\"color: #A5D6FF\">'long'</span><span style=\"color: #C9D1D9\">, beard: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> }, { age: </span><span style=\"color: #79C0FF\">25</span><span style=\"color: #C9D1D9\">, hair: </span><span style=\"color: #A5D6FF\">'long'</span><span style=\"color: #C9D1D9\">, beard: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> }) </span><span style=\"color: #8B949E\">// false</span></span></code></pre>\n<h5 id=\"shallowclone\">shallowClone</h5>\n<p>This snippet can be used to create a shallow clone of an object.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">shallowClone</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">({}, obj)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { x: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">, y: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">b</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">shallowClone</span><span style=\"color: #C9D1D9\">(a) </span><span style=\"color: #8B949E\">// a !== b</span></span></code></pre>\n<h6 id=\"create-an-empty-object-without-any-inheritance\">Create an empty object without any inheritance</h6>\n<p><code>const a = Object.create(null)</code></p>\n<h5 id=\"check-if-an-object-is-empty\">Check if an object is empty</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isEmpty</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Reflect.</span><span style=\"color: #D2A8FF\">ownKeys</span><span style=\"color: #C9D1D9\">(obj).</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> obj.</span><span style=\"color: #79C0FF\">constructor</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> Object</span></span></code></pre>";

				const frontmatter$u = {"layout":"../../layouts/SnippetPost.astro","title":"Working with Javascript objects","description":"Usefull js snippets about objects","pubDate":"Jan 6 2023"};
				const file$u = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-objects.md";
				const url$u = "/snippets/snippets-objects";
				function rawContent$s() {
					return "\n##### default\n\nThis snippet assigns default values for all properties in an object that are undefined.\n\n```javascript\nconst defaults = (obj, ...defs) =>\n  Object.assign({}, obj, ...defs.reverse(), obj)\n\ndefaults({ a: 1 }, { b: 2 }, { b: 6 }, { a: 3 }) // { a: 1, b: 2 }\n```\n\n##### findKey\n\nThis snippet returns the first key that satisfies a given function.\n\n```javascript\nconst findKey = (obj, fn) =>\n  Object.keys(obj).find((key) => fn(obj[key], key, obj))\n```\n\n```javascript\nfindKey(\n  {\n    barney: { age: 36, active: true },\n    fred: { age: 40, active: false },\n    pebbles: { age: 1, active: true },\n  },\n  (o) => o['active']\n) // 'barney'\n```\n\n##### forOwn\n\nThis snippet iterates on each property of an object and iterates a callback for each one respectively.\n\n```javascript\nconst forOwn = (obj, fn) =>\n  Object.keys(obj).forEach((key) => fn(obj[key], key, obj))\nforOwn({ foo: 'bar', a: 1 }, (v) => console.log(v)) // 'bar', 1\n```\n\n##### isObject\n\nThis snippet can be used to check whether a provided value is an object. It uses the Object constructor to create an object wrapper for the given value.\nIf it is already an object, then an object type that corresponds to the given value will be returned. Otherwise, a new object will be returned.\n\n```javascript\nconst isObject = (obj) => obj === Object(obj)\n\nisObject([1, 2, 3, 4]) // true\nisObject([]) // true\nisObject(['Hello!']) // true\nisObject({ a: 1 }) // true\nisObject({}) // true\nisObject(true) // false\n```\n\n##### isObjectLike\n\nThis snippet can be used to check if a value is not null and that its typeof is “object”.\n\n```javascript\nconst isObjectLike = (val) => val !== null && typeof val === 'object'\n\nisObjectLike({}) // true\nisObjectLike([1, 2, 3]) // true\nisObjectLike((x) => x) // false\nisObjectLike(null) // false\n```\n\n##### isPlainObject\n\nThis snippet checks whether a value is an object created by the Object constructor.\n\n```javascript\nconst isPlainObject = (val) =>\n  !!val && typeof val === 'object' && val.constructor === Object\n\nisPlainObject({ a: 1 }) // true\nisPlainObject(new Map()) // false\n```\n\n##### matches\n\nThis snippet compares two objects to determine if the first one contains the same property values as the second one.\n\n```javascript\nconst matches = (obj, source) =>\n  Object.keys(source).every(\n    (key) => obj.hasOwnProperty(key) && obj[key] === source[key]\n  )\n\nmatches({ age: 25, hair: 'long', beard: true }, { hair: 'long', beard: true }) // true\nmatches({ hair: 'long', beard: true }, { age: 25, hair: 'long', beard: true }) // false\n```\n\n##### shallowClone\n\nThis snippet can be used to create a shallow clone of an object.\n\n```javascript\nconst shallowClone = (obj) => Object.assign({}, obj)\n\nconst a = { x: true, y: 1 }\nconst b = shallowClone(a) // a !== b\n```\n\n###### Create an empty object without any inheritance\n\n`const a = Object.create(null)`\n\n##### Check if an object is empty\n\n```javascript\nconst isEmpty = (obj) =>\n  Reflect.ownKeys(obj).length === 0 && obj.constructor === Object\n```\n";
				}
				function compiledContent$s() {
					return html$s;
				}
				function getHeadings$u() {
					return [{"depth":5,"slug":"default","text":"default"},{"depth":5,"slug":"findkey","text":"findKey"},{"depth":5,"slug":"forown","text":"forOwn"},{"depth":5,"slug":"isobject","text":"isObject"},{"depth":5,"slug":"isobjectlike","text":"isObjectLike"},{"depth":5,"slug":"isplainobject","text":"isPlainObject"},{"depth":5,"slug":"matches","text":"matches"},{"depth":5,"slug":"shallowclone","text":"shallowClone"},{"depth":6,"slug":"create-an-empty-object-without-any-inheritance","text":"Create an empty object without any inheritance"},{"depth":5,"slug":"check-if-an-object-is-empty","text":"Check if an object is empty"}];
				}
				async function Content$u() {
					const { layout, ...content } = frontmatter$u;
					content.file = file$u;
					content.url = url$u;
					const contentFragment = createVNode(Fragment, { 'set:html': html$s });
					return createVNode($$SnippetPost, {
									file: file$u,
									url: url$u,
									content,
									frontmatter: content,
									headings: getHeadings$u(),
									rawContent: rawContent$s,
									compiledContent: compiledContent$s,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$u[Symbol.for('astro.needsHeadRendering')] = false;

const _page10 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$u,
  compiledContent: compiledContent$s,
  default: Content$u,
  file: file$u,
  frontmatter: frontmatter$u,
  getHeadings: getHeadings$u,
  rawContent: rawContent$s,
  url: url$u
}, Symbol.toStringTag, { value: 'Module' }));

const html$r = "<p>Event handling helper, always bind and unbind correctly. The type/listener/options need to be exact the same to be\nable to unbind. The listener needs to be the same by reference. An anonymous function will therefor never unbind. This wrapper fixes that.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #FFA657\"> </span><span style=\"color: #FF7B72\">default</span><span style=\"color: #FFA657\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #FFA657\"> </span><span style=\"color: #D2A8FF\">bind</span><span style=\"color: #FFA657\">(target, { type, listener, options }) </span><span style=\"color: #C9D1D9\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  target.</span><span style=\"color: #D2A8FF\">addEventlistener</span><span style=\"color: #C9D1D9\">(type, listener, options)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">unbind</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    target.</span><span style=\"color: #D2A8FF\">removeEventlistener</span><span style=\"color: #C9D1D9\">(type, listener, option)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>";

				const frontmatter$t = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript date helpers","description":"Javascript date","pubDate":"Jan 7 2023"};
				const file$t = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-events.md";
				const url$t = "/snippets/snippets-events";
				function rawContent$r() {
					return "\nEvent handling helper, always bind and unbind correctly. The type/listener/options need to be exact the same to be\nable to unbind. The listener needs to be the same by reference. An anonymous function will therefor never unbind. This wrapper fixes that.\n\n```javascript\nexport default function bind(target, { type, listener, options }) {\n  target.addEventlistener(type, listener, options)\n  return function unbind() {\n    target.removeEventlistener(type, listener, option)\n  }\n}\n```\n";
				}
				function compiledContent$r() {
					return html$r;
				}
				function getHeadings$t() {
					return [];
				}
				async function Content$t() {
					const { layout, ...content } = frontmatter$t;
					content.file = file$t;
					content.url = url$t;
					const contentFragment = createVNode(Fragment, { 'set:html': html$r });
					return createVNode($$SnippetPost, {
									file: file$t,
									url: url$t,
									content,
									frontmatter: content,
									headings: getHeadings$t(),
									rawContent: rawContent$r,
									compiledContent: compiledContent$r,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$t[Symbol.for('astro.needsHeadRendering')] = false;

const _page11 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$t,
  compiledContent: compiledContent$r,
  default: Content$t,
  file: file$t,
  frontmatter: frontmatter$t,
  getHeadings: getHeadings$t,
  rawContent: rawContent$r,
  url: url$t
}, Symbol.toStringTag, { value: 'Module' }));

const html$q = "<p>If you’re not feeling like figure things out yourself use my framework agnostic <a href=\"http://broadcaster.hervy.se\">broadcaster package</a>.</p>\n<p><code>npm install broadcaster/foundit</code></p>\n<p>…or use one of these…</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">/*</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Broadcaster © 2008 Tore Darell</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Version 2, December 2004</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Copyright (C) 2004 Sam Hocevar</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * 14 rue de Plaisance, 75014 Paris, France</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Everyone is permitted to copy and distribute verbatim or modified</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * copies of this license document, and changing it is allowed as long</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * as the name is changed.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * 0. You just DO WHAT THE FUCK YOU WANT TO.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Implements a centralised broadcast/listen pattern. A broadcaster</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * is simple and dumb and only knows how to broadcast a message to</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * listeners for that particular message.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * var b = new Broadcaster();</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.broadcast('a message'); //Nothing happens</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.listen('a message', function(){ alert('a message was received'); });</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.broadcast('a message'); //alerts</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.listen('some state has changed', function(s){ alert('new state is now: '+s); });</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.broadcast('some state has changed', 'new state'); // alerts \"new state is now: new state'\"</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * var collector = [];</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.listen('new item', function(i){ this.push(i); }, collector);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.broadcast('new item', 'cat'); // ['cat']</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.broadcast('new item', 'dog'); // ['cat', 'dog']</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * The special message '*' is used as a global listener which will receive all messages:</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.listen('*', function(message){ alert(message + ' was received'); })</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * b.fire('foo'); //Alerts \"foo was received\"</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * A broadcaster can easily be used to make an object observable:</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * function ElementObserver(element, interval){</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *   this.element = element;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *   this.broadcaster = new Broadcaster(); //The magic line</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *   var that = this, oldValue = element.innerHTML;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *   this._interval = setInterval(function(){</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *     var newValue = element.innerHTML;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *     if (newValue !== oldValue) {</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *       that.broadcaster.broadcast('value changed', newValue, oldValue);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *     }</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *     oldValue = newValue;</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *   }, interval || 500);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * };</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * var observers = ['some_id', 'some_other_id'].map(function(id){ return new ElementObserver($(id)); });</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * observers.each(function(o){</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *   o.broadcaster.listen('value changed', function(ov, nv){</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *     alert('Value in '+o.element+' changed from '+ov+' to '+nv);</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *   });</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * });</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> *</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">Broadcaster</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.listeners </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">;(</span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">p</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.defaultScope </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// window/global</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//Attach a listener for a particular message with a callback function and</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//an optional scope in which it will run. Returns the callback function.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.</span><span style=\"color: #D2A8FF\">listen</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">message</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">callback</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">scope</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.listeners[message]) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.listeners[message] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> []</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.listeners[message].</span><span style=\"color: #D2A8FF\">push</span><span style=\"color: #C9D1D9\">({ callback: callback, scope: scope })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> callback</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.subscribe </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> p.listen</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//Remove a listener which matches a particular message and callback function</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.</span><span style=\"color: #D2A8FF\">stopListening</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">message</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">callback</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> l </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.listeners,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      m </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> message,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      c </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> callback,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      i</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (l[m]) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">for</span><span style=\"color: #C9D1D9\"> (i </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">; i </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> l[m].</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">; i</span><span style=\"color: #FF7B72\">++</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (l[m][i].callback </span><span style=\"color: #FF7B72\">==</span><span style=\"color: #C9D1D9\"> c) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          l[m].</span><span style=\"color: #D2A8FF\">splice</span><span style=\"color: #C9D1D9\">(i, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.unsubscribe </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> p.stopListening</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//Broadcast a message. Any additional arguments are proxied to</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//the listener's callback function. Listeners for the special</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//message '*' will receive all messages that are fired</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.</span><span style=\"color: #D2A8FF\">broadcast</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">message</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">var</span><span style=\"color: #C9D1D9\"> l </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.listeners[message],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      g </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.listeners[</span><span style=\"color: #A5D6FF\">'*'</span><span style=\"color: #C9D1D9\">],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      args,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      i</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (l </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> g) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      args </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Array</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #79C0FF\">prototype</span><span style=\"color: #C9D1D9\">.slice.</span><span style=\"color: #D2A8FF\">call</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">arguments</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (l) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">//Specific listeners</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">for</span><span style=\"color: #C9D1D9\"> (i </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">; i </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> l.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">; i</span><span style=\"color: #FF7B72\">++</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          l[i].callback.</span><span style=\"color: #D2A8FF\">apply</span><span style=\"color: #C9D1D9\">(l[i].scope </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.defaultScope, args)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (g) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">//Global listeners</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">for</span><span style=\"color: #C9D1D9\"> (i </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">; i </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> g.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">; i</span><span style=\"color: #FF7B72\">++</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #8B949E\">//Globals also receive message name</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          g[i].callback.</span><span style=\"color: #D2A8FF\">apply</span><span style=\"color: #C9D1D9\">(g[i].scope </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.defaultScope, </span><span style=\"color: #79C0FF\">arguments</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.fire </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> p.broadcast</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  p.send </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> p.broadcast</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})(</span><span style=\"color: #79C0FF\">Broadcaster</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #79C0FF\">prototype</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<hr>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">/**</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * The Publisher/Subscriber Pattern in JavaScript</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * From https://medium.com/better-programming/the-publisher-subscriber-pattern-in-javascript-2b31b7ea075a</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * The publisher/subscriber pattern is a design pattern that allows us</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * to create powerful dynamic applications with modules that can communicate</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * with each other without being directly dependent on each other.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Advatage: Nifty</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Disadvantage: Does not scale well. Can't assert if you already subscribed to the same callback before.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> * Best for: Usecases with a limited scope.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\"> */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">pubSub</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">subscribers</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">publish</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">eventName</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">data</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">Array.</span><span style=\"color: #D2A8FF\">isArray</span><span style=\"color: #C9D1D9\">(subscribers[eventName])) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">return</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    subscribers[eventName].</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">callback</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">callback</span><span style=\"color: #C9D1D9\">(data)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">subscribe</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">eventName</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">callback</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">Array.</span><span style=\"color: #D2A8FF\">isArray</span><span style=\"color: #C9D1D9\">(subscribers[eventName])) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      subscribers[eventName] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> []</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    subscribers[eventName].</span><span style=\"color: #D2A8FF\">push</span><span style=\"color: #C9D1D9\">(callback)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">index</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> subscribers[eventName].</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">unsubscribe</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        subscribers[eventName].</span><span style=\"color: #D2A8FF\">splice</span><span style=\"color: #C9D1D9\">(index, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">/* Alt. without using index */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">// subscribers[eventName] = subscribers[eventName].filter((cb) => {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">//   /* Does not include the callback in the new array */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">//   return (cb === callback)? false: true;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">// })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    publish,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    subscribe,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ===========</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">showMeTheMoney</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">money</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(money)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">pubSub</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">subscribe</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'show-money'</span><span style=\"color: #C9D1D9\">, showMeTheMoney)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Later...</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">pubSub</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">publish</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'show-money'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1000000</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//============</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">unsubscribeFood</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">subscribe</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'food'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">data</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`Received some food: ${</span><span style=\"color: #C9D1D9\">data</span><span style=\"color: #A5D6FF\">}`</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Removes the subscribed callback</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">unsubscribeFood</span><span style=\"color: #C9D1D9\">()</span></span></code></pre>";

				const frontmatter$s = {"layout":"../../layouts/SnippetPost.astro","title":"Pub/sub pattern","description":"Javascript patterns - pub/sub","pubDate":"Jan 7 2023"};
				const file$s = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-pubsub.md";
				const url$s = "/snippets/snippets-pubsub";
				function rawContent$q() {
					return "\nIf you're not feeling like figure things out yourself use my framework agnostic [broadcaster package](http://broadcaster.hervy.se).\n\n`npm install broadcaster/foundit`\n\n...or use one of these...\n\n```javascript\n/*\n * Broadcaster © 2008 Tore Darell\n *\n *\n *\n * DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n * Version 2, December 2004\n *\n * Copyright (C) 2004 Sam Hocevar\n * 14 rue de Plaisance, 75014 Paris, France\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n * DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n * TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n * 0. You just DO WHAT THE FUCK YOU WANT TO.\n *\n *\n *\n * Implements a centralised broadcast/listen pattern. A broadcaster\n * is simple and dumb and only knows how to broadcast a message to\n * listeners for that particular message.\n *\n * var b = new Broadcaster();\n *\n * b.broadcast('a message'); //Nothing happens\n * b.listen('a message', function(){ alert('a message was received'); });\n * b.broadcast('a message'); //alerts\n *\n * b.listen('some state has changed', function(s){ alert('new state is now: '+s); });\n * b.broadcast('some state has changed', 'new state'); // alerts \"new state is now: new state'\"\n *\n * var collector = [];\n * b.listen('new item', function(i){ this.push(i); }, collector);\n * b.broadcast('new item', 'cat'); // ['cat']\n * b.broadcast('new item', 'dog'); // ['cat', 'dog']\n *\n * The special message '*' is used as a global listener which will receive all messages:\n *\n * b.listen('*', function(message){ alert(message + ' was received'); })\n * b.fire('foo'); //Alerts \"foo was received\"\n *\n * A broadcaster can easily be used to make an object observable:\n *\n * function ElementObserver(element, interval){\n *   this.element = element;\n *   this.broadcaster = new Broadcaster(); //The magic line\n *   var that = this, oldValue = element.innerHTML;\n *   this._interval = setInterval(function(){\n *     var newValue = element.innerHTML;\n *     if (newValue !== oldValue) {\n *       that.broadcaster.broadcast('value changed', newValue, oldValue);\n *     }\n *     oldValue = newValue;\n *   }, interval || 500);\n * };\n *\n * var observers = ['some_id', 'some_other_id'].map(function(id){ return new ElementObserver($(id)); });\n * observers.each(function(o){\n *   o.broadcaster.listen('value changed', function(ov, nv){\n *     alert('Value in '+o.element+' changed from '+ov+' to '+nv);\n *   });\n * });\n *\n */\n\nBroadcaster = function () {\n  this.listeners = {}\n}\n;(function (p) {\n  p.defaultScope = this // window/global\n\n  //Attach a listener for a particular message with a callback function and\n  //an optional scope in which it will run. Returns the callback function.\n  p.listen = function (message, callback, scope) {\n    if (!this.listeners[message]) {\n      this.listeners[message] = []\n    }\n    this.listeners[message].push({ callback: callback, scope: scope })\n    return callback\n  }\n  p.subscribe = p.listen\n\n  //Remove a listener which matches a particular message and callback function\n  p.stopListening = function (message, callback) {\n    var l = this.listeners,\n      m = message,\n      c = callback,\n      i\n    if (l[m]) {\n      for (i = 0; i < l[m].length; i++) {\n        if (l[m][i].callback == c) {\n          l[m].splice(i, 1)\n        }\n      }\n    }\n  }\n  p.unsubscribe = p.stopListening\n\n  //Broadcast a message. Any additional arguments are proxied to\n  //the listener's callback function. Listeners for the special\n  //message '*' will receive all messages that are fired\n  p.broadcast = function (message) {\n    var l = this.listeners[message],\n      g = this.listeners['*'],\n      args,\n      i\n\n    if (l || g) {\n      args = Array.prototype.slice.call(arguments, 1)\n\n      if (l) {\n        //Specific listeners\n        for (i = 0; i < l.length; i++) {\n          l[i].callback.apply(l[i].scope || this.defaultScope, args)\n        }\n      }\n\n      if (g) {\n        //Global listeners\n        for (i = 0; i < g.length; i++) {\n          //Globals also receive message name\n          g[i].callback.apply(g[i].scope || this.defaultScope, arguments)\n        }\n      }\n    }\n  }\n  p.fire = p.broadcast\n  p.send = p.broadcast\n})(Broadcaster.prototype)\n```\n\n---\n\n```javascript\n/**\n * The Publisher/Subscriber Pattern in JavaScript\n * From https://medium.com/better-programming/the-publisher-subscriber-pattern-in-javascript-2b31b7ea075a\n * The publisher/subscriber pattern is a design pattern that allows us\n * to create powerful dynamic applications with modules that can communicate\n * with each other without being directly dependent on each other.\n * Advatage: Nifty\n * Disadvantage: Does not scale well. Can't assert if you already subscribed to the same callback before.\n * Best for: Usecases with a limited scope.\n */\n\nfunction pubSub() {\n  const subscribers = {}\n\n  function publish(eventName, data) {\n    if (!Array.isArray(subscribers[eventName])) {\n      return\n    }\n    subscribers[eventName].forEach((callback) => {\n      callback(data)\n    })\n  }\n\n  function subscribe(eventName, callback) {\n    if (!Array.isArray(subscribers[eventName])) {\n      subscribers[eventName] = []\n    }\n\n    subscribers[eventName].push(callback)\n\n    const index = subscribers[eventName].length - 1\n\n    return {\n      unsubscribe() {\n        subscribers[eventName].splice(index, 1)\n        /* Alt. without using index */\n        // subscribers[eventName] = subscribers[eventName].filter((cb) => {\n        //   /* Does not include the callback in the new array */\n        //   return (cb === callback)? false: true;\n        // })\n      },\n    }\n  }\n\n  return {\n    publish,\n    subscribe,\n  }\n}\n// ===========\nfunction showMeTheMoney(money) {\n  console.log(money)\n}\npubSub().subscribe('show-money', showMeTheMoney)\n// Later...\npubSub().publish('show-money', 1000000)\n//============\nconst unsubscribeFood = subscribe('food', function (data) {\n  console.log(`Received some food: ${data}`)\n})\n// Removes the subscribed callback\nunsubscribeFood()\n```\n";
				}
				function compiledContent$q() {
					return html$q;
				}
				function getHeadings$s() {
					return [];
				}
				async function Content$s() {
					const { layout, ...content } = frontmatter$s;
					content.file = file$s;
					content.url = url$s;
					const contentFragment = createVNode(Fragment, { 'set:html': html$q });
					return createVNode($$SnippetPost, {
									file: file$s,
									url: url$s,
									content,
									frontmatter: content,
									headings: getHeadings$s(),
									rawContent: rawContent$q,
									compiledContent: compiledContent$q,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$s[Symbol.for('astro.needsHeadRendering')] = false;

const _page12 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$s,
  compiledContent: compiledContent$q,
  default: Content$s,
  file: file$s,
  frontmatter: frontmatter$s,
  getHeadings: getHeadings$s,
  rawContent: rawContent$q,
  url: url$s
}, Symbol.toStringTag, { value: 'Module' }));

const html$p = "<h5 id=\"bytesize\">ByteSize</h5>\n<p>This snippet returns the length of a string in bytes.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">byteSize</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Blob</span><span style=\"color: #C9D1D9\">([str]).size</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">byteSize</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'😀'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 4</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">byteSize</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Hello World'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 11</span></span></code></pre>\n<h5 id=\"13-capitalize\">13. capitalize</h5>\n<p>This snippet capitalizes the first letter of a string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">capitalize</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> ([</span><span style=\"color: #FFA657\">first</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">rest</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> first.</span><span style=\"color: #D2A8FF\">toUpperCase</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> rest.</span><span style=\"color: #D2A8FF\">join</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">capitalize</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'fooBar'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'FooBar'</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">capitalize</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'fooBar'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'Foobar'</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// or...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">capitalize</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">charAt</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">toUpperCase</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"capitalizeeveryword\">CapitalizeEveryWord</h5>\n<p>This snippet capitalizes the first letter of every word in a given string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">capitalizeEveryWord</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  str.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">\\b</span><span style=\"color: #79C0FF\">[a-z]</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, (</span><span style=\"color: #FFA657\">char</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> char.</span><span style=\"color: #D2A8FF\">toUpperCase</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">capitalizeEveryWord</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'hello world!'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'Hello World!'</span></span></code></pre>\n<h5 id=\"decapitalize\">Decapitalize</h5>\n<p>This snippet turns the first letter of a string into lowercase.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">decapitalize</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> ([</span><span style=\"color: #FFA657\">first</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">rest</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> first.</span><span style=\"color: #D2A8FF\">toLowerCase</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> rest.</span><span style=\"color: #D2A8FF\">join</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">decapitalize</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'FooBar'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'fooBar'</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">decapitalize</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'FooBar'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'fooBar'</span></span></code></pre>\n<h5 id=\"pad\">Pad</h5>\n<p>This snippet can be used to pad a string on both sides with a specified character if it is shorter than the specified length.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">pad</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">length</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">char</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">' '</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  str.</span><span style=\"color: #D2A8FF\">padStart</span><span style=\"color: #C9D1D9\">((str.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> length) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, char).</span><span style=\"color: #D2A8FF\">padEnd</span><span style=\"color: #C9D1D9\">(length, char)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">pad</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'cat'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">8</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// '  cat   '</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">pad</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">String</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">42</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'0'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// '004200'</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">pad</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'foobar'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'foobar'</span></span></code></pre>\n<h5 id=\"sortcharactersinstring\">SortCharactersInString</h5>\n<p>This snippet can be used to alphabetically sort the characters in a string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sortCharactersInString</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">str].</span><span style=\"color: #D2A8FF\">sort</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> a.</span><span style=\"color: #D2A8FF\">localeCompare</span><span style=\"color: #C9D1D9\">(b)).</span><span style=\"color: #D2A8FF\">join</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">sortCharactersInString</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'cabbage'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'aabbceg'</span></span></code></pre>\n<h5 id=\"splitlines\">SplitLines</h5>\n<p>This snippet can be used to split a multi-line string into an array of lines.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">splitLines</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #79C0FF\">\\r</span><span style=\"color: #FF7B72\">?</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">splitLines</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'This</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">is a</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">multiline</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">string.</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// ['This', 'is a', 'multiline', 'string.' , '']</span></span></code></pre>\n<h5 id=\"striphtmltags\">StripHTMLTags</h5>\n<p>This snippet can be used to remove HTML/XML tags from a string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">stripHTMLTags</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> str.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/&#x3C;</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #79C0FF\">>]</span><span style=\"color: #FF7B72\">*</span><span style=\"color: #A5D6FF\">>/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">stripHTMLTags</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'&#x3C;p>&#x3C;em>lorem&#x3C;/em> &#x3C;strong>ipsum&#x3C;/strong>&#x3C;/p>'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'lorem ipsum'</span></span></code></pre>\n<h5 id=\"words\">Words</h5>\n<p>This snippet converts a string into an array of words.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">words</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">pattern</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\"> /</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #79C0FF\">a-zA-Z-]</span><span style=\"color: #FF7B72\">+</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  str.</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(pattern).</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">(Boolean)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">words</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'I love javaScript!!'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [\"I\", \"love\", \"javaScript\"]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">words</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'python, javaScript &#x26; coffee'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [\"python\", \"javaScript\", \"coffee\"]</span></span></code></pre>\n<h5 id=\"truncate-in-middle\">Truncate in middle</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">truncateInMiddle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">string</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">length</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">start</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">end</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">`${</span><span style=\"color: #C9D1D9\">string</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #A5D6FF\">, </span><span style=\"color: #C9D1D9\">start</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">}...${</span><span style=\"color: #C9D1D9\">string</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #C9D1D9\">string</span><span style=\"color: #A5D6FF\">.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #C9D1D9\">end</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">}`</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"convert-string-to-url-slug\">Convert string to URL slug</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">slugify</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">string</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    .</span><span style=\"color: #D2A8FF\">toLowerCase</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #79C0FF\">\\s</span><span style=\"color: #FF7B72\">+</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'-'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #79C0FF\">\\w-]</span><span style=\"color: #FF7B72\">+</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"genrate-a-random-string\">Genrate a random string</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">randomString</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">36</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// for eg: y3lpt2gs5q</span></span></code></pre>";

				const frontmatter$r = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript arrays helpers","description":"","pubDate":"Jan 7 2023"};
				const file$r = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-string.md";
				const url$r = "/snippets/snippets-string";
				function rawContent$p() {
					return "\n##### ByteSize\n\nThis snippet returns the length of a string in bytes.\n\n```javascript\nconst byteSize = (str) => new Blob([str]).size\n\nbyteSize('😀') // 4\nbyteSize('Hello World') // 11\n```\n\n##### 13. capitalize\n\nThis snippet capitalizes the first letter of a string.\n\n```javascript\nconst capitalize = ([first, ...rest]) => first.toUpperCase() + rest.join('')\n\ncapitalize('fooBar') // 'FooBar'\ncapitalize('fooBar', true) // 'Foobar'\n// or...\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1)\n```\n\n##### CapitalizeEveryWord\n\nThis snippet capitalizes the first letter of every word in a given string.\n\n```javascript\nconst capitalizeEveryWord = (str) =>\n  str.replace(/\\b[a-z]/g, (char) => char.toUpperCase())\n\ncapitalizeEveryWord('hello world!') // 'Hello World!'\n```\n\n##### Decapitalize\n\nThis snippet turns the first letter of a string into lowercase.\n\n```javascript\nconst decapitalize = ([first, ...rest]) => first.toLowerCase() + rest.join('')\n\ndecapitalize('FooBar') // 'fooBar'\ndecapitalize('FooBar') // 'fooBar'\n```\n\n##### Pad\n\nThis snippet can be used to pad a string on both sides with a specified character if it is shorter than the specified length.\n\n```javascript\nconst pad = (str, length, char = ' ') =>\n  str.padStart((str.length + length) / 2, char).padEnd(length, char)\n\npad('cat', 8) // '  cat   '\npad(String(42), 6, '0') // '004200'\npad('foobar', 3) // 'foobar'\n```\n\n##### SortCharactersInString\n\nThis snippet can be used to alphabetically sort the characters in a string.\n\n```javascript\nconst sortCharactersInString = (str) =>\n  [...str].sort((a, b) => a.localeCompare(b)).join('')\n\nsortCharactersInString('cabbage') // 'aabbceg'\n```\n\n##### SplitLines\n\nThis snippet can be used to split a multi-line string into an array of lines.\n\n```javascript\nconst splitLines = (str) => str.split(/\\r?\\n/)\n\nsplitLines('This\\nis a\\nmultiline\\nstring.\\n') // ['This', 'is a', 'multiline', 'string.' , '']\n```\n\n##### StripHTMLTags\n\nThis snippet can be used to remove HTML/XML tags from a string.\n\n```javascript\nconst stripHTMLTags = (str) => str.replace(/<[^>]*>/g, '')\n\nstripHTMLTags('<p><em>lorem</em> <strong>ipsum</strong></p>') // 'lorem ipsum'\n```\n\n##### Words\n\nThis snippet converts a string into an array of words.\n\n```javascript\nconst words = (str, pattern = /[^a-zA-Z-]+/) =>\n  str.split(pattern).filter(Boolean)\n\nwords('I love javaScript!!') // [\"I\", \"love\", \"javaScript\"]\nwords('python, javaScript & coffee') // [\"python\", \"javaScript\", \"coffee\"]\n```\n\n##### Truncate in middle\n\n```javascript\nconst truncateInMiddle = (string, length, start, end) => {\n  return `${string.slice(0, start)}...${string.slice(string.length - end)}`\n}\n```\n\n##### Convert string to URL slug\n\n```javascript\nconst slugify = (string) =>\n  string\n    .toLowerCase()\n    .replace(/\\s+/g, '-')\n    .replace(/[^\\w-]+/g, '')\n```\n\n##### Genrate a random string\n\n```javascript\nconst randomString = () => Math.random().toString(36).slice(2)\n// for eg: y3lpt2gs5q\n```\n";
				}
				function compiledContent$p() {
					return html$p;
				}
				function getHeadings$r() {
					return [{"depth":5,"slug":"bytesize","text":"ByteSize"},{"depth":5,"slug":"13-capitalize","text":"13. capitalize"},{"depth":5,"slug":"capitalizeeveryword","text":"CapitalizeEveryWord"},{"depth":5,"slug":"decapitalize","text":"Decapitalize"},{"depth":5,"slug":"pad","text":"Pad"},{"depth":5,"slug":"sortcharactersinstring","text":"SortCharactersInString"},{"depth":5,"slug":"splitlines","text":"SplitLines"},{"depth":5,"slug":"striphtmltags","text":"StripHTMLTags"},{"depth":5,"slug":"words","text":"Words"},{"depth":5,"slug":"truncate-in-middle","text":"Truncate in middle"},{"depth":5,"slug":"convert-string-to-url-slug","text":"Convert string to URL slug"},{"depth":5,"slug":"genrate-a-random-string","text":"Genrate a random string"}];
				}
				async function Content$r() {
					const { layout, ...content } = frontmatter$r;
					content.file = file$r;
					content.url = url$r;
					const contentFragment = createVNode(Fragment, { 'set:html': html$p });
					return createVNode($$SnippetPost, {
									file: file$r,
									url: url$r,
									content,
									frontmatter: content,
									headings: getHeadings$r(),
									rawContent: rawContent$p,
									compiledContent: compiledContent$p,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$r[Symbol.for('astro.needsHeadRendering')] = false;

const _page13 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$r,
  compiledContent: compiledContent$p,
  default: Content$r,
  file: file$r,
  frontmatter: frontmatter$r,
  getHeadings: getHeadings$r,
  rawContent: rawContent$p,
  url: url$r
}, Symbol.toStringTag, { value: 'Module' }));

const html$o = "<h5 id=\"loop-around-a-collection\">Loop around a collection</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">;[</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">document.</span><span style=\"color: #D2A8FF\">querySelectorAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'div'</span><span style=\"color: #C9D1D9\">)].</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">arrItem</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(item)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ...or...</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">;[].forEach.</span><span style=\"color: #D2A8FF\">call</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelectorAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'div'</span><span style=\"color: #C9D1D9\">), (</span><span style=\"color: #FFA657\">item</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(item)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span></code></pre>\n<h5 id=\"all\">All</h5>\n<p>This snippet returns true if the predicate function returns true for all elements in a collection and false otherwise. You can omit the second argument fn if you want to use Boolean as a default value.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">all</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> Boolean) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">every</span><span style=\"color: #C9D1D9\">(fn)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">all</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], (</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> x </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">all</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"approximately-equal\">Approximately equal</h5>\n<p>This snippet checks whether two numbers are approximately equal to each other, with a small difference.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">approximatelyEqual</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">v1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">v2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">epsilon</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0.001</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Math.</span><span style=\"color: #D2A8FF\">abs</span><span style=\"color: #C9D1D9\">(v1 </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> v2) </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> epsilon</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">approximatelyEqual</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #79C0FF\">PI</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2.0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1.5708</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"cast-array\">Cast array</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">castArray</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (Array.</span><span style=\"color: #D2A8FF\">isArray</span><span style=\"color: #C9D1D9\">(val) </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> val </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> [val])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">castArray</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'foo'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// ['foo']</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">castArray</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">castArray</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (Array.</span><span style=\"color: #D2A8FF\">isArray</span><span style=\"color: #C9D1D9\">(val) </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> val </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> [val])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">castArray</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'foo'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// ['foo']</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">castArray</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1]</span></span></code></pre>\n<h5 id=\"compact\">Compact</h5>\n<p>This snippet removes false values from an array.} arr</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">compact</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">(Boolean)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">compact</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'a'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'e'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">23</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">NaN</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'s'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">34</span><span style=\"color: #C9D1D9\">])</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// [ 1, 2, 3, 'a', 's', 34 ]</span></span></code></pre>\n<h5 id=\"count-occurrences\">Count occurrences</h5>\n<p>This snippet counts the occurrences of a value in an array.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">countOccurrences</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  arr.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">v</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (v </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> val </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> a </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> a), </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">countOccurrences</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 3</span></span></code></pre>\n<h5 id=\"deep-flatten\">Deep flatten</h5>\n<p>This snippet flattens an array recursively.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">deepFlatten</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [].</span><span style=\"color: #D2A8FF\">concat</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">arr.</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">v</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (Array.</span><span style=\"color: #D2A8FF\">isArray</span><span style=\"color: #C9D1D9\">(v) </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">deepFlatten</span><span style=\"color: #C9D1D9\">(v) </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> v)))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">deepFlatten</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, [</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">], [[</span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1,2,3,4,5]</span></span></code></pre>\n<h5 id=\"difference\">Difference</h5>\n<p>This snippet finds the difference between two arrays.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">difference</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">s</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Set</span><span style=\"color: #C9D1D9\">(b)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> a.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">s.</span><span style=\"color: #D2A8FF\">has</span><span style=\"color: #C9D1D9\">(x))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">difference</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [3]</span></span></code></pre>\n<h5 id=\"difference-with\">Difference with</h5>\n<p>This snippet removes the values for which the comparator function returns false.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">differenceWith</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">comp</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  arr.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> val.</span><span style=\"color: #D2A8FF\">findIndex</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">comp</span><span style=\"color: #C9D1D9\">(a, b)) </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">differenceWith</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1.2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1.5</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #79C0FF\">1.9</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">round</span><span style=\"color: #C9D1D9\">(a) </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">round</span><span style=\"color: #C9D1D9\">(b)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// [1, 1.2]</span></span></code></pre>\n<h5 id=\"drop-elements\">Drop elements</h5>\n<p>This snippet returns a new array with n elements removed from the left.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">drop</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(n)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">drop</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [2,3]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">drop</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [3]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">drop</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">42</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// []</span></span></code></pre>\n<h5 id=\"drop-right\">Drop right</h5>\n<p>This snippet returns a new array with n elements removed from the right.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">dropRight</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\">n)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">dropRight</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1,2]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">dropRight</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [1]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">dropRight</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">42</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// []</span></span></code></pre>\n<h5 id=\"drop-right-while\">Drop right while</h5>\n<p>This snippet removes elements from the right side of an array until the passed function returns true.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">dropRightWhile</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">func</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">while</span><span style=\"color: #C9D1D9\"> (arr.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">func</span><span style=\"color: #C9D1D9\">(arr[arr.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">])) arr </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> arr</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">dropRightWhile</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">], (</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> n </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [1, 2]</span></span></code></pre>\n<h5 id=\"drop-while\">Drop while</h5>\n<p>This snippet removes elements from an array until the passed function returns true.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">dropWhile</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">func</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">while</span><span style=\"color: #C9D1D9\"> (arr.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">func</span><span style=\"color: #C9D1D9\">(arr[</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">])) arr </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> arr</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">dropWhile</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">], (</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> n </span><span style=\"color: #FF7B72\">>=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [3,4]</span></span></code></pre>\n<h5 id=\"find-last\">Find last</h5>\n<p>This snippet returns the last element for which a given function returns a truthy value.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">findLast</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">(fn).</span><span style=\"color: #D2A8FF\">pop</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">findLast</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">], (</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> n </span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 3</span></span></code></pre>\n<h5 id=\"flatten\">Flatten</h5>\n<p>This snippet flattens an array up to a specified depth using recursion.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">flatten</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">depth</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  arr.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">v</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      a.</span><span style=\"color: #D2A8FF\">concat</span><span style=\"color: #C9D1D9\">(depth </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> Array.</span><span style=\"color: #D2A8FF\">isArray</span><span style=\"color: #C9D1D9\">(v) </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">flatten</span><span style=\"color: #C9D1D9\">(v, depth </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> v),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    []</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">flatten</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, [</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1, 2, 3, 4]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">flatten</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, [</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, [</span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, [</span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">7</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">8</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [1, 2, 3, [4, 5], 6, 7, 8]</span></span></code></pre>\n<h5 id=\"for-each-right\">For each right</h5>\n<p>This snippet executes a function for each element of an array starting from the array’s last element.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">forEachRight</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">callback</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">reverse</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">(callback)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">forEachRight</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">], (</span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(val)) </span><span style=\"color: #8B949E\">// '4', '3', '2', '1'</span></span></code></pre>\n<h5 id=\"indexof-all\">IndexOf all</h5>\n<p>This snippet can be used to get all indexes of a value in an array, which returns an empty array, in case this value is not included in it.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">indexOfAll</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  arr.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">acc</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">i</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (el </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> val </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">acc, i] </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> acc), [])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">indexOfAll</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [0,3]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">indexOfAll</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// []</span></span></code></pre>\n<h5 id=\"initial\">Initial</h5>\n<p>This snippet returns all elements of an array except the last one.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">initial</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">initial</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1,2]const initial = arr => arr.slice(0, -1);</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">initial</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1,2]'</span></span></code></pre>\n<h5 id=\"intersection\">Intersection</h5>\n<p>This snippet can be used to get an array with elements that are included in two other arrays.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">intersection</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">s</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Set</span><span style=\"color: #C9D1D9\">(b)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> a.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> s.</span><span style=\"color: #D2A8FF\">has</span><span style=\"color: #C9D1D9\">(x))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">intersection</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], [</span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [2, 3]</span></span></code></pre>\n<h5 id=\"intersection-by\">Intersection by</h5>\n<p>This snippet can be used to return a list of elements that exist in both arrays, after a particular function has been executed to each element of both arrays.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">intersectionBy</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">fn</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">s</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Set</span><span style=\"color: #C9D1D9\">(b.</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(fn))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> a.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> s.</span><span style=\"color: #D2A8FF\">has</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">(x)))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">intersectionBy</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">2.1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1.2</span><span style=\"color: #C9D1D9\">], [</span><span style=\"color: #79C0FF\">2.3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3.4</span><span style=\"color: #C9D1D9\">], Math.floor) </span><span style=\"color: #8B949E\">// [2.1]</span></span></code></pre>\n<h5 id=\"intersection-with\">Intersection with</h5>\n<p>This snippet can be used to return a list of elements that exist in both arrays by using a comparator function.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">intersectionWith</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">comp</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  a.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> b.</span><span style=\"color: #D2A8FF\">findIndex</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">y</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">comp</span><span style=\"color: #C9D1D9\">(x, y)) </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">intersectionWith</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1.2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1.5</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [</span><span style=\"color: #79C0FF\">1.9</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3.9</span><span style=\"color: #C9D1D9\">],</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">round</span><span style=\"color: #C9D1D9\">(a) </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">round</span><span style=\"color: #C9D1D9\">(b)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [1.5, 3, 0]</span></span></code></pre>\n<h5 id=\"is-anagram\">Is anagram</h5>\n<p>This snippet can be used to check whether a particular string is an anagram with another string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isAnagram</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">str2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">normalize</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">str</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    str</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      .</span><span style=\"color: #D2A8FF\">toLowerCase</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      .</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #79C0FF\">a-z0-9]</span><span style=\"color: #A5D6FF\">/</span><span style=\"color: #FF7B72\">gi</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      .</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      .</span><span style=\"color: #D2A8FF\">sort</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      .</span><span style=\"color: #D2A8FF\">join</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">normalize</span><span style=\"color: #C9D1D9\">(str1) </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">normalize</span><span style=\"color: #C9D1D9\">(str2)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isAnagram</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'iceman'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'cinema'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"is-array-like\">Is array like</h5>\n<p>This snippet can be used to check if a provided argument is iterable like an array.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isArrayLike</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">obj</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  obj </span><span style=\"color: #FF7B72\">!=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> obj[Symbol.iterator] </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'function'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isArrayLike</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelectorAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'.className'</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isArrayLike</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'abc'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isArrayLike</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// false</span></span></code></pre>\n<h5 id=\"maxn\">MaxN</h5>\n<p>This snippet returns the n largest elements from a list. If n is greater than or equal to the list’s length, then it will return the original list (sorted in descending order).</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">maxN</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">arr].</span><span style=\"color: #D2A8FF\">sort</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> b </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> a).</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, n)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">maxN</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [3]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">maxN</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [3,2]</span></span></code></pre>\n<h5 id=\"negate\">Negate</h5>\n<p>This snippet can be used to apply the not operator (!) to a predicate function with its arguments.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">negate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FFA657\">func</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">args</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #D2A8FF\">func</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">args)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">;[</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #C9D1D9\">].</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">negate</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> n </span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// [ 1, 3, 5 ]</span></span></code></pre>\n<h5 id=\"random-integer-array-in-range\">Random integer array in range</h5>\n<p>This snippet can be used to generate an array with n random integers in a specified range.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">randomIntArrayInRange</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">min</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">max</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Array.</span><span style=\"color: #D2A8FF\">from</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    { length: n },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">floor</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> (max </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> min </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> min</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">randomIntArrayInRange</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">12</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">35</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]</span></span></code></pre>\n<h5 id=\"sample\">Sample</h5>\n<p>This snippet can be used to get a random number from an array.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sample</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr[Math.</span><span style=\"color: #D2A8FF\">floor</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">)]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">sample</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">7</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">9</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">11</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// 9</span></span></code></pre>\n<h5 id=\"sample-size\">Sample size</h5>\n<p>This snippet can be used to get n random elements from unique positions from an array up to the size of the array. Elements in the array are shuffled using the Fisher-Yates algorithm.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sampleSize</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> ([</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> m </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #79C0FF\">length</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">while</span><span style=\"color: #C9D1D9\"> (m) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">i</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">floor</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> m</span><span style=\"color: #FF7B72\">--</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    ;[arr[m], arr[i]] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [arr[i], arr[m]]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, n)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">sampleSize</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [3,1]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">sampleSize</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [2,3,1]</span></span></code></pre>\n<h5 id=\"shuffle\">Shuffle</h5>\n<p>This snippet can be used to order the elements of an array randomly using the Fisher-Yates algorithm.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">shuffle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> ([</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> m </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #79C0FF\">length</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">while</span><span style=\"color: #C9D1D9\"> (m) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">i</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">floor</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> m</span><span style=\"color: #FF7B72\">--</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    ;[arr[m], arr[i]] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [arr[i], arr[m]]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> arr</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// or</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">shuffle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">sort</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0.5</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">foo</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">shuffle</span><span style=\"color: #C9D1D9\">(foo) </span><span style=\"color: #8B949E\">// [2, 3, 1], foo = [1, 2, 3]</span></span></code></pre>\n<h5 id=\"similarity\">Similarity</h5>\n<p>This snippet can be used to return an array of elements that appear in two arrays.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">similarity</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">values</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">filter</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">v</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> values.</span><span style=\"color: #D2A8FF\">includes</span><span style=\"color: #C9D1D9\">(v))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">similarity</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1, 2]</span></span></code></pre>\n<h5 id=\"sum\">Sum</h5>\n<p>This snippet can be used to find the sum of two or more numbers or arrays.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">sum</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">arr].</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">acc</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> acc </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> val, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">sum</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 10</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">sum</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// 10</span></span></code></pre>\n<h5 id=\"tail\">Tail</h5>\n<p>This snippet can be used to get an array with all the elements of an array except for the first one. If the array has only one element, then that an array with that element will be returned instead.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">tail</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (arr.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> arr)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">tail</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [2,3]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">tail</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1]</span></span></code></pre>\n<h5 id=\"take\">Take</h5>\n<p>This snippet can be used to get an array with n elements removed from the beginning.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">take</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, n)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">take</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [1, 2, 3]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">take</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// []</span></span></code></pre>\n<h5 id=\"takeright\">TakeRight</h5>\n<p>This snippet can be used to get an array with n elements removed from the end.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">takeRight</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">n</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(arr.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> n, arr.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">takeRight</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// [ 2, 3 ]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">takeRight</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [3]</span></span></code></pre>\n<h5 id=\"union\">Union</h5>\n<p>This snippet can be used to find the union of two arrays, resulting in an array that has elements that come from both arrays but that do not repeat.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">union</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Array.</span><span style=\"color: #D2A8FF\">from</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Set</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">a, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">b]))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">union</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">], [</span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1,2,3,4]</span></span></code></pre>\n<h5 id=\"unique-elements\">Unique elements</h5>\n<p>This snippet uses ES6 Set and the …rest operator to get every element only once.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">uniqueElements</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Set</span><span style=\"color: #C9D1D9\">(arr)]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">uniqueElements</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #8B949E\">// [1, 2, 3, 4, 5]</span></span></code></pre>\n<h5 id=\"get-last-element-in-an-array\">Get last element in an array</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">arr</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(arr.</span><span style=\"color: #D2A8FF\">splice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// 5</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// or</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">arr.</span><span style=\"color: #D2A8FF\">at</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// Chrome for now</span></span></code></pre>\n<h5 id=\"shuffling-an-array\">Shuffling an array</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">list</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(list.</span><span style=\"color: #D2A8FF\">sort</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0.5</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// [2,1,3]</span></span></code></pre>\n<h5 id=\"max--min-of-array\">Max / min of array</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">list</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">max</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">list), Math.</span><span style=\"color: #D2A8FF\">min</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">list)) </span><span style=\"color: #8B949E\">// 3, 1</span></span></code></pre>\n<h5 id=\"calculate-the-average-of-an-array\">Calculate the average of an array</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">average</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">arr</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #D2A8FF\">reduce</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">a</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">b</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> a </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> b) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> arr.</span><span style=\"color: #79C0FF\">length</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`average: `</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #D2A8FF\">average</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">])) </span><span style=\"color: #8B949E\">// 5</span></span></code></pre>";

				const frontmatter$q = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript arrays helpers","description":"","pubDate":"Jan 7 2023"};
				const file$q = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-array.md";
				const url$q = "/snippets/snippets-array";
				function rawContent$o() {
					return "\n##### Loop around a collection\n\n```javascript\n;[...document.querySelectorAll('div')].map((arrItem) => {\n  console.log(item)\n})\n// ...or...\n;[].forEach.call(document.querySelectorAll('div'), (item) => {\n  console.log(item)\n})\n```\n\n##### All\n\nThis snippet returns true if the predicate function returns true for all elements in a collection and false otherwise. You can omit the second argument fn if you want to use Boolean as a default value.\n\n```javascript\nconst all = (arr, fn = Boolean) => arr.every(fn)\n\nall([4, 2, 3], (x) => x > 1) // true\nall([1, 2, 3]) // true\n```\n\n##### Approximately equal\n\nThis snippet checks whether two numbers are approximately equal to each other, with a small difference.\n\n```javascript\nconst approximatelyEqual = (v1, v2, epsilon = 0.001) =>\n  Math.abs(v1 - v2) < epsilon\n\napproximatelyEqual(Math.PI / 2.0, 1.5708) // true\n```\n\n##### Cast array\n\n```javascript\nconst castArray = (val) => (Array.isArray(val) ? val : [val])\n\ncastArray('foo') // ['foo']\ncastArray([1]) // [1]\n\nconst castArray = (val) => (Array.isArray(val) ? val : [val])\n\ncastArray('foo') // ['foo']\ncastArray([1]) // [1]\n```\n\n##### Compact\n\nThis snippet removes false values from an array.} arr\n\n```javascript\nconst compact = (arr) => arr.filter(Boolean)\n\ncompact([0, 1, false, 2, '', 3, 'a', 'e' * 23, NaN, 's', 34])\n// [ 1, 2, 3, 'a', 's', 34 ]\n```\n\n##### Count occurrences\n\nThis snippet counts the occurrences of a value in an array.\n\n```javascript\nconst countOccurrences = (arr, val) =>\n  arr.reduce((a, v) => (v === val ? a + 1 : a), 0)\ncountOccurrences([1, 1, 2, 1, 2, 3], 1) // 3\n```\n\n##### Deep flatten\n\nThis snippet flattens an array recursively.\n\n```javascript\nconst deepFlatten = (arr) =>\n  [].concat(...arr.map((v) => (Array.isArray(v) ? deepFlatten(v) : v)))\n\ndeepFlatten([1, [2], [[3], 4], 5]) // [1,2,3,4,5]\n```\n\n##### Difference\n\nThis snippet finds the difference between two arrays.\n\n```javascript\nconst difference = (a, b) => {\n  const s = new Set(b)\n  return a.filter((x) => !s.has(x))\n}\n\ndifference([1, 2, 3], [1, 2, 4]) // [3]\n```\n\n##### Difference with\n\nThis snippet removes the values for which the comparator function returns false.\n\n```javascript\nconst differenceWith = (arr, val, comp) =>\n  arr.filter((a) => val.findIndex((b) => comp(a, b)) === -1)\n\ndifferenceWith(\n  [1, 1.2, 1.5, 3, 0],\n  [1.9, 3, 0],\n  (a, b) => Math.round(a) === Math.round(b)\n)\n// [1, 1.2]\n```\n\n##### Drop elements\n\nThis snippet returns a new array with n elements removed from the left.\n\n```javascript\nconst drop = (arr, n = 1) => arr.slice(n)\n\ndrop([1, 2, 3]) // [2,3]\ndrop([1, 2, 3], 2) // [3]\ndrop([1, 2, 3], 42) // []\n```\n\n##### Drop right\n\nThis snippet returns a new array with n elements removed from the right.\n\n```javascript\nconst dropRight = (arr, n = 1) => arr.slice(0, -n)\n\ndropRight([1, 2, 3]) // [1,2]\ndropRight([1, 2, 3], 2) // [1]\ndropRight([1, 2, 3], 42) // []\n```\n\n##### Drop right while\n\nThis snippet removes elements from the right side of an array until the passed function returns true.\n\n```javascript\nconst dropRightWhile = (arr, func) => {\n  while (arr.length > 0 && !func(arr[arr.length - 1])) arr = arr.slice(0, -1)\n  return arr\n}\n\ndropRightWhile([1, 2, 3, 4], (n) => n < 3) // [1, 2]\n```\n\n##### Drop while\n\nThis snippet removes elements from an array until the passed function returns true.\n\n```javascript\nconst dropWhile = (arr, func) => {\n  while (arr.length > 0 && !func(arr[0])) arr = arr.slice(1)\n  return arr\n}\n\ndropWhile([1, 2, 3, 4], (n) => n >= 3) // [3,4]\n```\n\n##### Find last\n\nThis snippet returns the last element for which a given function returns a truthy value.\n\n```javascript\nconst findLast = (arr, fn) => arr.filter(fn).pop()\n\nfindLast([1, 2, 3, 4], (n) => n % 2 === 1) // 3\n```\n\n##### Flatten\n\nThis snippet flattens an array up to a specified depth using recursion.\n\n```javascript\nconst flatten = (arr, depth = 1) =>\n  arr.reduce(\n    (a, v) =>\n      a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth - 1) : v),\n    []\n  )\n\nflatten([1, [2], 3, 4]) // [1, 2, 3, 4]\nflatten([1, [2, [3, [4, 5], 6], 7], 8], 2) // [1, 2, 3, [4, 5], 6, 7, 8]\n```\n\n##### For each right\n\nThis snippet executes a function for each element of an array starting from the array’s last element.\n\n```javascript\nconst forEachRight = (arr, callback) => arr.slice(0).reverse().forEach(callback)\n\nforEachRight([1, 2, 3, 4], (val) => console.log(val)) // '4', '3', '2', '1'\n```\n\n##### IndexOf all\n\nThis snippet can be used to get all indexes of a value in an array, which returns an empty array, in case this value is not included in it.\n\n```javascript\nconst indexOfAll = (arr, val) =>\n  arr.reduce((acc, el, i) => (el === val ? [...acc, i] : acc), [])\n\nindexOfAll([1, 2, 3, 1, 2, 3], 1) // [0,3]\nindexOfAll([1, 2, 3], 4) // []\n```\n\n##### Initial\n\nThis snippet returns all elements of an array except the last one.\n\n```javascript\nconst initial = (arr) => arr.slice(0, -1)\n\ninitial([1, 2, 3]) // [1,2]const initial = arr => arr.slice(0, -1);\ninitial([1, 2, 3]) // [1,2]'\n```\n\n##### Intersection\n\nThis snippet can be used to get an array with elements that are included in two other arrays.\n\n```javascript\nconst intersection = (a, b) => {\n  const s = new Set(b)\n  return a.filter((x) => s.has(x))\n}\n\nintersection([1, 2, 3], [4, 3, 2]) // [2, 3]\n```\n\n##### Intersection by\n\nThis snippet can be used to return a list of elements that exist in both arrays, after a particular function has been executed to each element of both arrays.\n\n```javascript\nconst intersectionBy = (a, b, fn) => {\n  const s = new Set(b.map(fn))\n  return a.filter((x) => s.has(fn(x)))\n}\n\nintersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor) // [2.1]\n```\n\n##### Intersection with\n\nThis snippet can be used to return a list of elements that exist in both arrays by using a comparator function.\n\n```javascript\nconst intersectionWith = (a, b, comp) =>\n  a.filter((x) => b.findIndex((y) => comp(x, y)) !== -1)\n\nintersectionWith(\n  [1, 1.2, 1.5, 3, 0],\n  [1.9, 3, 0, 3.9],\n  (a, b) => Math.round(a) === Math.round(b)\n) // [1.5, 3, 0]\n```\n\n##### Is anagram\n\nThis snippet can be used to check whether a particular string is an anagram with another string.\n\n```javascript\nconst isAnagram = (str1, str2) => {\n  const normalize = (str) =>\n    str\n      .toLowerCase()\n      .replace(/[^a-z0-9]/gi, '')\n      .split('')\n      .sort()\n      .join('')\n  return normalize(str1) === normalize(str2)\n}\n\nisAnagram('iceman', 'cinema') // true\n```\n\n##### Is array like\n\nThis snippet can be used to check if a provided argument is iterable like an array.\n\n```javascript\nconst isArrayLike = (obj) =>\n  obj != null && typeof obj[Symbol.iterator] === 'function'\n\nisArrayLike(document.querySelectorAll('.className')) // true\nisArrayLike('abc') // true\nisArrayLike(null) // false\n```\n\n##### MaxN\n\nThis snippet returns the n largest elements from a list. If n is greater than or equal to the list’s length, then it will return the original list (sorted in descending order).\n\n```javascript\nconst maxN = (arr, n = 1) => [...arr].sort((a, b) => b - a).slice(0, n)\n\nmaxN([1, 2, 3]) // [3]\nmaxN([1, 2, 3], 2) // [3,2]\n```\n\n##### Negate\n\nThis snippet can be used to apply the not operator (!) to a predicate function with its arguments.\n\n```javascript\nconst negate =\n  (func) =>\n  (...args) =>\n    !func(...args)\n\n;[1, 2, 3, 4, 5, 6].filter(negate((n) => n % 2 === 0)) // [ 1, 3, 5 ]\n```\n\n##### Random integer array in range\n\nThis snippet can be used to generate an array with n random integers in a specified range.\n\n```javascript\nconst randomIntArrayInRange = (min, max, n = 1) =>\n  Array.from(\n    { length: n },\n    () => Math.floor(Math.random() * (max - min + 1)) + min\n  )\n\nrandomIntArrayInRange(12, 35, 10) // [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]\n```\n\n##### Sample\n\nThis snippet can be used to get a random number from an array.\n\n```javascript\nconst sample = (arr) => arr[Math.floor(Math.random() * arr.length)]\n\nsample([3, 7, 9, 11]) // 9\n```\n\n##### Sample size\n\nThis snippet can be used to get n random elements from unique positions from an array up to the size of the array. Elements in the array are shuffled using the Fisher-Yates algorithm.\n\n```javascript\nconst sampleSize = ([...arr], n = 1) => {\n  let m = arr.length\n  while (m) {\n    const i = Math.floor(Math.random() * m--)\n    ;[arr[m], arr[i]] = [arr[i], arr[m]]\n  }\n  return arr.slice(0, n)\n}\n\nsampleSize([1, 2, 3], 2) // [3,1]\nsampleSize([1, 2, 3], 4) // [2,3,1]\n```\n\n##### Shuffle\n\nThis snippet can be used to order the elements of an array randomly using the Fisher-Yates algorithm.\n\n```javascript\nconst shuffle = ([...arr]) => {\n  let m = arr.length\n  while (m) {\n    const i = Math.floor(Math.random() * m--)\n    ;[arr[m], arr[i]] = [arr[i], arr[m]]\n  }\n  return arr\n}\n// or\nconst shuffle = (arr) => arr.sort(() => 0.5 - Math.random())\n\nconst foo = [1, 2, 3]\nshuffle(foo) // [2, 3, 1], foo = [1, 2, 3]\n```\n\n##### Similarity\n\nThis snippet can be used to return an array of elements that appear in two arrays.\n\n```javascript\nconst similarity = (arr, values) => arr.filter((v) => values.includes(v))\n\nsimilarity([1, 2, 3], [1, 2, 4]) // [1, 2]\n```\n\n##### Sum\n\nThis snippet can be used to find the sum of two or more numbers or arrays.\n\n```javascript\nconst sum = (...arr) => [...arr].reduce((acc, val) => acc + val, 0)\n\nsum(1, 2, 3, 4) // 10\nsum(...[1, 2, 3, 4]) // 10\n```\n\n##### Tail\n\nThis snippet can be used to get an array with all the elements of an array except for the first one. If the array has only one element, then that an array with that element will be returned instead.\n\n```javascript\nconst tail = (arr) => (arr.length > 1 ? arr.slice(1) : arr)\n\ntail([1, 2, 3]) // [2,3]\ntail([1]) // [1]\n```\n\n##### Take\n\nThis snippet can be used to get an array with n elements removed from the beginning.\n\n```javascript\nconst take = (arr, n = 1) => arr.slice(0, n)\n\ntake([1, 2, 3], 5) // [1, 2, 3]\ntake([1, 2, 3], 0) // []\n```\n\n##### TakeRight\n\nThis snippet can be used to get an array with n elements removed from the end.\n\n```javascript\nconst takeRight = (arr, n = 1) => arr.slice(arr.length - n, arr.length)\n\ntakeRight([1, 2, 3], 2) // [ 2, 3 ]\ntakeRight([1, 2, 3]) // [3]\n```\n\n##### Union\n\nThis snippet can be used to find the union of two arrays, resulting in an array that has elements that come from both arrays but that do not repeat.\n\n```javascript\nconst union = (a, b) => Array.from(new Set([...a, ...b]))\n\nunion([1, 2, 3], [4, 3, 2]) // [1,2,3,4]\n```\n\n##### Unique elements\n\nThis snippet uses ES6 Set and the …rest operator to get every element only once.\n\n```javascript\nconst uniqueElements = (arr) => [...new Set(arr)]\n\nuniqueElements([1, 2, 2, 3, 4, 4, 5]) // [1, 2, 3, 4, 5]\n```\n\n##### Get last element in an array\n\n```javascript\nconst arr = [1, 2, 2, 3, 4, 4, 5]\nconsole.log(arr.splice(-1)) // 5\n// or\narr.at(-1) // Chrome for now\n```\n\n##### Shuffling an array\n\n```javascript\nconst list = [1, 2, 3]\nconsole.log(list.sort(() => Math.random() - 0.5)) // [2,1,3]\n```\n\n##### Max / min of array\n\n```javascript\nconst list = [1, 2, 3]\nconsole.log(Math.max(...list), Math.min(...list)) // 3, 1\n```\n\n##### Calculate the average of an array\n\n```javascript\nconst average = (arr) => arr.reduce((a, b) => a + b) / arr.length\nconsole.log(`average: `, average([1, 5, 10])) // 5\n```\n";
				}
				function compiledContent$o() {
					return html$o;
				}
				function getHeadings$q() {
					return [{"depth":5,"slug":"loop-around-a-collection","text":"Loop around a collection"},{"depth":5,"slug":"all","text":"All"},{"depth":5,"slug":"approximately-equal","text":"Approximately equal"},{"depth":5,"slug":"cast-array","text":"Cast array"},{"depth":5,"slug":"compact","text":"Compact"},{"depth":5,"slug":"count-occurrences","text":"Count occurrences"},{"depth":5,"slug":"deep-flatten","text":"Deep flatten"},{"depth":5,"slug":"difference","text":"Difference"},{"depth":5,"slug":"difference-with","text":"Difference with"},{"depth":5,"slug":"drop-elements","text":"Drop elements"},{"depth":5,"slug":"drop-right","text":"Drop right"},{"depth":5,"slug":"drop-right-while","text":"Drop right while"},{"depth":5,"slug":"drop-while","text":"Drop while"},{"depth":5,"slug":"find-last","text":"Find last"},{"depth":5,"slug":"flatten","text":"Flatten"},{"depth":5,"slug":"for-each-right","text":"For each right"},{"depth":5,"slug":"indexof-all","text":"IndexOf all"},{"depth":5,"slug":"initial","text":"Initial"},{"depth":5,"slug":"intersection","text":"Intersection"},{"depth":5,"slug":"intersection-by","text":"Intersection by"},{"depth":5,"slug":"intersection-with","text":"Intersection with"},{"depth":5,"slug":"is-anagram","text":"Is anagram"},{"depth":5,"slug":"is-array-like","text":"Is array like"},{"depth":5,"slug":"maxn","text":"MaxN"},{"depth":5,"slug":"negate","text":"Negate"},{"depth":5,"slug":"random-integer-array-in-range","text":"Random integer array in range"},{"depth":5,"slug":"sample","text":"Sample"},{"depth":5,"slug":"sample-size","text":"Sample size"},{"depth":5,"slug":"shuffle","text":"Shuffle"},{"depth":5,"slug":"similarity","text":"Similarity"},{"depth":5,"slug":"sum","text":"Sum"},{"depth":5,"slug":"tail","text":"Tail"},{"depth":5,"slug":"take","text":"Take"},{"depth":5,"slug":"takeright","text":"TakeRight"},{"depth":5,"slug":"union","text":"Union"},{"depth":5,"slug":"unique-elements","text":"Unique elements"},{"depth":5,"slug":"get-last-element-in-an-array","text":"Get last element in an array"},{"depth":5,"slug":"shuffling-an-array","text":"Shuffling an array"},{"depth":5,"slug":"max--min-of-array","text":"Max / min of array"},{"depth":5,"slug":"calculate-the-average-of-an-array","text":"Calculate the average of an array"}];
				}
				async function Content$q() {
					const { layout, ...content } = frontmatter$q;
					content.file = file$q;
					content.url = url$q;
					const contentFragment = createVNode(Fragment, { 'set:html': html$o });
					return createVNode($$SnippetPost, {
									file: file$q,
									url: url$q,
									content,
									frontmatter: content,
									headings: getHeadings$q(),
									rawContent: rawContent$o,
									compiledContent: compiledContent$o,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$q[Symbol.for('astro.needsHeadRendering')] = false;

const _page14 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$q,
  compiledContent: compiledContent$o,
  default: Content$q,
  file: file$q,
  frontmatter: frontmatter$q,
  getHeadings: getHeadings$q,
  rawContent: rawContent$o,
  url: url$q
}, Symbol.toStringTag, { value: 'Module' }));

const html$n = "<h5 id=\"async-arrow-functions-look-like-this\">Async arrow functions look like this</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// do something</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"async-arrow-functions-look-like-this-for-a-single-argument-passed-to-it\">Async arrow functions look like this for a single argument passed to it</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">evt</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// do something with evt</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"the-anonymous-form-works-as-well\">The anonymous form works as well</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> () {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// do something</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"an-async-function-declaration-looks-like-this\">An async function declaration looks like this</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">foo</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// do something</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"using-async-function-in-a-callback\">Using async function in a callback</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">foo</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> event.</span><span style=\"color: #D2A8FF\">onCall</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// do something</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span></code></pre>\n<h5 id=\"native-fetch-in-a-one-liner\">Native fetch in a one-liner</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getPost</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">id</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> (</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fetch</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`https://jsonplaceholder.typicode.com/posts/${</span><span style=\"color: #C9D1D9\">id</span><span style=\"color: #A5D6FF\">}}`</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  ).</span><span style=\"color: #D2A8FF\">json</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>";

				const frontmatter$p = {"layout":"../../layouts/SnippetPost.astro","title":"The different shapes of async functions","description":"Since we mostly use one or two of these it is easy to forget the syntaax sometimes.","pubDate":"Jan 7 2023"};
				const file$p = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-asynk.md";
				const url$p = "/snippets/snippets-asynk";
				function rawContent$n() {
					return "\n##### Async arrow functions look like this\n\n```javascript\nconst foo = async () => {\n  // do something\n}\n```\n\n##### Async arrow functions look like this for a single argument passed to it\n\n```javascript\nconst foo = async (evt) => {\n  // do something with evt\n}\n```\n\n##### The anonymous form works as well\n\n```javascript\nconst foo = async function () {\n  // do something\n}\n```\n\n##### An async function declaration looks like this\n\n```javascript\nasync function foo() {\n  // do something\n}\n```\n\n##### Using async function in a callback\n\n```javascript\nconst foo = event.onCall(async () => {\n  // do something\n})\n```\n\n##### Native fetch in a one-liner\n\n```javascript\nconst getPost = async (id) => {\n  return await (\n    await fetch(`https://jsonplaceholder.typicode.com/posts/${id}}`)\n  ).json()\n}\n```\n";
				}
				function compiledContent$n() {
					return html$n;
				}
				function getHeadings$p() {
					return [{"depth":5,"slug":"async-arrow-functions-look-like-this","text":"Async arrow functions look like this"},{"depth":5,"slug":"async-arrow-functions-look-like-this-for-a-single-argument-passed-to-it","text":"Async arrow functions look like this for a single argument passed to it"},{"depth":5,"slug":"the-anonymous-form-works-as-well","text":"The anonymous form works as well"},{"depth":5,"slug":"an-async-function-declaration-looks-like-this","text":"An async function declaration looks like this"},{"depth":5,"slug":"using-async-function-in-a-callback","text":"Using async function in a callback"},{"depth":5,"slug":"native-fetch-in-a-one-liner","text":"Native fetch in a one-liner"}];
				}
				async function Content$p() {
					const { layout, ...content } = frontmatter$p;
					content.file = file$p;
					content.url = url$p;
					const contentFragment = createVNode(Fragment, { 'set:html': html$n });
					return createVNode($$SnippetPost, {
									file: file$p,
									url: url$p,
									content,
									frontmatter: content,
									headings: getHeadings$p(),
									rawContent: rawContent$n,
									compiledContent: compiledContent$n,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$p[Symbol.for('astro.needsHeadRendering')] = false;

const _page15 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$p,
  compiledContent: compiledContent$n,
  default: Content$p,
  file: file$p,
  frontmatter: frontmatter$p,
  getHeadings: getHeadings$p,
  rawContent: rawContent$n,
  url: url$p
}, Symbol.toStringTag, { value: 'Module' }));

const html$m = "<h5 id=\"load-svg-image-vs-inline-svg\">Load SVG image vs. inline SVG</h5>\n<p>Inline SVG has the advantage of beeing accessible\nfor CSS animation from React. Inline also loads faster.\nFirst the img way.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> myIcon </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'./relative/path/to/icon.svg'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// In render method.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #FF7B72\">={</span><span style=\"color: #C9D1D9\">myIcon</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"icon\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// ...now inline</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { ReactComponent </span><span style=\"color: #FF7B72\">as</span><span style=\"color: #C9D1D9\"> MyIcon } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"./icon.svg\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// In render method.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">MyIcon</span><span style=\"color: #C9D1D9\"> /> </span><span style=\"color: #8B949E\">// or...</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">MyIcon</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">className</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"someClassThatWillBeUsedInCSS\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"icon\"</span><span style=\"color: #C9D1D9\"> /></span></span></code></pre>\n<h5 id=\"implement-usestate-with-usereducer\">Implement useState with useReducer</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">name</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setName</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useReducer</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">_</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">value</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> value, </span><span style=\"color: #A5D6FF\">'James'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">;</span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\">input value</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\">{name} onChange</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\">{(e) => </span><span style=\"color: #D2A8FF\">setName</span><span style=\"color: #C9D1D9\">(e.target.value)} </span><span style=\"color: #FF7B72\">/></span></span></code></pre>\n<h5 id=\"manually-re-render-a-component\">Manually Re-render a Component</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [, </span><span style=\"color: #79C0FF\">rerender</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">rerender</span><span style=\"color: #C9D1D9\">({})</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">//...or...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [, </span><span style=\"color: #79C0FF\">rerender</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useReducer</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">x</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> x </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">rerender</span><span style=\"color: #C9D1D9\">()</span></span></code></pre>\n<h5 id=\"pass-a-function-to-use-usestate\">Pass a Function to use useState</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">count</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setCount</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">setCount</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">c</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> c </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Example</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">count</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setCount</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">useEffect</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">id</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setInterval</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">setCount</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">c</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> c </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }, </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">clearInterval</span><span style=\"color: #C9D1D9\">(id)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}, [])</span></span></code></pre>\n<h5 id=\"define-html-elements-upon-use\">Define HTML Elements upon use</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> ({ </span><span style=\"color: #FFA657\">Component</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">props</span><span style=\"color: #C9D1D9\"> }) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">Component</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">{...</span><span style=\"color: #C9D1D9\">props</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">Button</span><span style=\"color: #C9D1D9\">>A Button&#x3C;/</span><span style=\"color: #7EE787\">Button</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #8B949E\">// Renders a button element</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">Button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Component</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"a\"</span><span style=\"color: #C9D1D9\">>A Link&#x3C;/</span><span style=\"color: #7EE787\">Button</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #8B949E\">// Renders an anchor element</span></span></code></pre>\n<h5 id=\"react-keys-with-fragments\">React Keys with Fragments</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">pokemons.</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">pokemon</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">React.Fragment</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">key</span><span style=\"color: #FF7B72\">={</span><span style=\"color: #C9D1D9\">pokemon</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;</span><span style=\"color: #7EE787\">strong</span><span style=\"color: #C9D1D9\">>Name: &#x3C;/</span><span style=\"color: #7EE787\">strong</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\">></span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">pokemon</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;/</span><span style=\"color: #7EE787\">React.Fragment</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">))</span></span></code></pre>\n<h5 id=\"implicit-create-jsx-elements-and-nested-elements\">Implicit create JSX Elements and nested elements</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">element</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// JSX</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  React.</span><span style=\"color: #D2A8FF\">createElement</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #A5D6FF\">'div'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    React.</span><span style=\"color: #D2A8FF\">createElement</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #A5D6FF\">'h1'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        className: </span><span style=\"color: #A5D6FF\">'greeting'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #A5D6FF\">'Hello, world!'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    ),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    React.</span><span style=\"color: #D2A8FF\">createElement</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'p'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">' lalalalala '</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span></code></pre>\n<h5 id=\"cancellable-fetch-and-clean-up-in-react\">Cancellable fetch and clean up in react</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #FFA657\"> </span><span style=\"color: #FF7B72\">default</span><span style=\"color: #FFA657\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #FFA657\"> </span><span style=\"color: #D2A8FF\">User</span><span style=\"color: #FFA657\">({ id }) </span><span style=\"color: #C9D1D9\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">user</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setUser</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">useEffect</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> controller </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">AbortController</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    ;(</span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">try</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">response</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fetch</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #A5D6FF\">`https://jsonplaceholder.typicode.com/users/${</span><span style=\"color: #C9D1D9\">id</span><span style=\"color: #A5D6FF\">}`</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            signal: controller.signal,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #D2A8FF\">setUser</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> response.</span><span style=\"color: #D2A8FF\">json</span><span style=\"color: #C9D1D9\">())</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        controller </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      } </span><span style=\"color: #FF7B72\">catch</span><span style=\"color: #C9D1D9\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #8B949E\">// Handle the error</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    })()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">// clean up function</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> controller?.</span><span style=\"color: #D2A8FF\">abort</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">// add a dependency array</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }, [id])</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> (</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">user </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> (</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        &#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">>Loading user's data ...&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      ) </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> (</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        &#x3C;</span><span style=\"color: #7EE787\">pre</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">key</span><span style=\"color: #FF7B72\">={</span><span style=\"color: #C9D1D9\">user.id</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">></span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">user.name</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">pre</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      )</span><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  )</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>";

				const frontmatter$o = {"layout":"../../layouts/SnippetPost.astro","title":"React snippets","description":"","pubDate":"Jan 7 2023"};
				const file$o = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-react.md";
				const url$o = "/snippets/snippets-react";
				function rawContent$m() {
					return "\n##### Load SVG image vs. inline SVG\n\nInline SVG has the advantage of beeing accessible\nfor CSS animation from React. Inline also loads faster.\nFirst the img way.\n\n```jsx\n import myIcon from './relative/path/to/icon.svg'\n\n // In render method.\n <img src={myIcon} alt=\"icon\" />\n\n // ...now inline\n import { ReactComponent as MyIcon } from \"./icon.svg\"\n\n // In render method.\n <MyIcon /> // or...\n <MyIcon className=\"someClassThatWillBeUsedInCSS\" alt=\"icon\" />\n```\n\n##### Implement useState with useReducer\n\n```jsx\nconst [name, setName] = useReducer((_, value) => value, 'James')\n;<input value={name} onChange={(e) => setName(e.target.value)} />\n```\n\n##### Manually Re-render a Component\n\n```javascript\nconst [, rerender] = useState()\nrerender({})\n//...or...\nconst [, rerender] = useReducer((x) => x + 1, 0)\nrerender()\n```\n\n##### Pass a Function to use useState\n\n```javascript\nconst [count, setCount] = useState(0)\nsetCount((c) => c + 1)\n\n// Example\nconst [count, setCount] = useState(0)\nuseEffect(() => {\n  const id = setInterval(() => {\n    setCount((c) => c + 1)\n  }, 1000)\n  return () => clearInterval(id)\n}, [])\n```\n\n##### Define HTML Elements upon use\n\n```jsx\n const Button = ({ Component = 'button', ...props }) => <Component {...props} />\n\n <Button>A Button</Button> // Renders a button element\n <Button Component=\"a\">A Link</Button> // Renders an anchor element\n```\n\n##### React Keys with Fragments\n\n```jsx\npokemons.map((pokemon) => (\n  <React.Fragment key={pokemon}>\n    <strong>Name: </strong>\n    <span>{pokemon}</span>\n  </React.Fragment>\n))\n```\n\n##### Implicit create JSX Elements and nested elements\n\n```jsx\nconst element = // JSX\n  React.createElement(\n    'div',\n    null,\n    React.createElement(\n      'h1',\n      {\n        className: 'greeting',\n      },\n      'Hello, world!'\n    ),\n    React.createElement('p', null, ' lalalalala ')\n  )\n```\n\n##### Cancellable fetch and clean up in react\n\n```javascript\nexport default function User({ id }) {\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    let controller = new AbortController()\n    ;(async () => {\n      try {\n        const response = await fetch(\n          `https://jsonplaceholder.typicode.com/users/${id}`,\n          {\n            signal: controller.signal,\n          }\n        )\n        setUser(await response.json())\n        controller = null\n      } catch (e) {\n        // Handle the error\n      }\n    })()\n    // clean up function\n    return () => controller?.abort()\n    // add a dependency array\n  }, [id])\n\n  return (\n    <div>\n      {user === null ? (\n        <p>Loading user's data ...</p>\n      ) : (\n        <pre key={user.id}>{user.name}</pre>\n      )}\n    </div>\n  )\n}\n```\n";
				}
				function compiledContent$m() {
					return html$m;
				}
				function getHeadings$o() {
					return [{"depth":5,"slug":"load-svg-image-vs-inline-svg","text":"Load SVG image vs. inline SVG"},{"depth":5,"slug":"implement-usestate-with-usereducer","text":"Implement useState with useReducer"},{"depth":5,"slug":"manually-re-render-a-component","text":"Manually Re-render a Component"},{"depth":5,"slug":"pass-a-function-to-use-usestate","text":"Pass a Function to use useState"},{"depth":5,"slug":"define-html-elements-upon-use","text":"Define HTML Elements upon use"},{"depth":5,"slug":"react-keys-with-fragments","text":"React Keys with Fragments"},{"depth":5,"slug":"implicit-create-jsx-elements-and-nested-elements","text":"Implicit create JSX Elements and nested elements"},{"depth":5,"slug":"cancellable-fetch-and-clean-up-in-react","text":"Cancellable fetch and clean up in react"}];
				}
				async function Content$o() {
					const { layout, ...content } = frontmatter$o;
					content.file = file$o;
					content.url = url$o;
					const contentFragment = createVNode(Fragment, { 'set:html': html$m });
					return createVNode($$SnippetPost, {
									file: file$o,
									url: url$o,
									content,
									frontmatter: content,
									headings: getHeadings$o(),
									rawContent: rawContent$m,
									compiledContent: compiledContent$m,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$o[Symbol.for('astro.needsHeadRendering')] = false;

const _page16 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$o,
  compiledContent: compiledContent$m,
  default: Content$o,
  file: file$o,
  frontmatter: frontmatter$o,
  getHeadings: getHeadings$o,
  rawContent: rawContent$m,
  url: url$o
}, Symbol.toStringTag, { value: 'Module' }));

const html$l = "<p>Regex are extremly poweful but there is some truth to the old saying: You had one problem and found out you could solve it with regex and now you have two problems.</p>\n<h5 id=\"lookahead-assertion\">Lookahead assertion</h5>\n<p>User want to escape ’:’ and ’.’ in\n[ab:1.2:ef]=‘12.3’ => [ab:1.2:ef]=‘12.3’</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">result </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> subject.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/(</span><span style=\"color: #79C0FF\">[:.]</span><span style=\"color: #A5D6FF\">)(?=</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #7EE787; font-style: italic\">\\]</span><span style=\"color: #79C0FF\">]</span><span style=\"color: #FF7B72\">*</span><span style=\"color: #7EE787; font-style: italic\">\\]</span><span style=\"color: #A5D6FF\">)/</span><span style=\"color: #FF7B72\">g</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'</span><span style=\"color: #79C0FF\">\\\\</span><span style=\"color: #A5D6FF\">$1'</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\"></span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">([:.])      Match and remember a dot/colon,</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">(?=         only if it is followed by:</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">[^[\\]]\\*    any number of characters excluding brackets,</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">\\]          followed by a closing bracket.</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">)           End of lookahead assertion.</span></span></code></pre>\n<h5 id=\"replace-tags\">Replace tags</h5>\n<p>Very useful when you modify this depending on your needs.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">html.</span><span style=\"color: #D2A8FF\">replace</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">/&#x3C;</span><span style=\"color: #79C0FF\">[</span><span style=\"color: #FF7B72\">^</span><span style=\"color: #79C0FF\">>]</span><span style=\"color: #FF7B72\">+</span><span style=\"color: #A5D6FF\">>/</span><span style=\"color: #FF7B72\">gi</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"email-regex\">Email regex</h5>\n<p>Probably the most googled regex. No one knows what the ultimate regex for email is. But here are some.\nJust make sure users ae not stuck if you use a loose one.</p>\n<p>The long one (not the longest by far):</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">(?:[a-z0-9!#$%&#x26;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&#x26;'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])</span></span></code></pre>\n<p>The short one:</p>\n<p><code>/^\\S+@\\S+\\.\\S+$/</code></p>\n<p>Somewhere inbetween:</p>\n<p><code>^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code>\nor\n^[a-zA-Z0-9]+(?:.[a-zA-Z0-9]+)<em>@[a-zA-Z0-9]+(?:.[a-zA-Z0-9]+)</em>$\netc…</p>\n<h5 id=\"target-a-tag-with-a-attribute-as-backreference\">Target a tag with a attribute as backreference</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">(&#x3C;svg[^>]+(xmlns=\"[^\"]*\")[^>]*>)</span></span></code></pre>\n<p>…or if double or single qoutes are optional:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">(&#x3C;svg[^>]+(xmlns=[\"'][^(\"|')]*[\"'])[^>]*>)</span></span></code></pre>";

				const frontmatter$n = {"layout":"../../layouts/SnippetPost.astro","title":"Regex patterns","description":"","pubDate":"Jan 7 2023"};
				const file$n = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-regex.md";
				const url$n = "/snippets/snippets-regex";
				function rawContent$l() {
					return "\nRegex are extremly poweful but there is some truth to the old saying: You had one problem and found out you could solve it with regex and now you have two problems.\n\n##### Lookahead assertion\n\nUser want to escape ':' and '.' in\n[ab:1.2:ef]='12.3' => [ab\\:1\\.2\\:ef]='12.3'\n\n```javascript\nresult = subject.replace(/([:.])(?=[^[\\]]*\\])/g, '\\\\$1')\n```\n\n```text\n\n([:.])      Match and remember a dot/colon,\n(?=         only if it is followed by:\n[^[\\]]\\*    any number of characters excluding brackets,\n\\]          followed by a closing bracket.\n)           End of lookahead assertion.\n```\n\n##### Replace tags\n\nVery useful when you modify this depending on your needs.\n\n```javascript\nhtml.replace(/<[^>]+>/gi, '')\n```\n\n##### Email regex\n\nProbably the most googled regex. No one knows what the ultimate regex for email is. But here are some.\nJust make sure users ae not stuck if you use a loose one.\n\nThe long one (not the longest by far):\n\n```text\n(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n```\n\nThe short one:\n\n`/^\\S+@\\S+\\.\\S+$/`\n\nSomewhere inbetween:\n\n`^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`\nor\n^[a-zA-Z0-9]+(?:\\.[a-zA-Z0-9]+)_@[a-zA-Z0-9]+(?:\\.[a-zA-Z0-9]+)_$\netc...\n\n##### Target a tag with a attribute as backreference\n\n```regex\n(<svg[^>]+(xmlns=\"[^\"]*\")[^>]*>)\n```\n\n...or if double or single qoutes are optional:\n\n```regex\n(<svg[^>]+(xmlns=[\"'][^(\"|')]*[\"'])[^>]*>)\n```\n";
				}
				function compiledContent$l() {
					return html$l;
				}
				function getHeadings$n() {
					return [{"depth":5,"slug":"lookahead-assertion","text":"Lookahead assertion"},{"depth":5,"slug":"replace-tags","text":"Replace tags"},{"depth":5,"slug":"email-regex","text":"Email regex"},{"depth":5,"slug":"target-a-tag-with-a-attribute-as-backreference","text":"Target a tag with a attribute as backreference"}];
				}
				async function Content$n() {
					const { layout, ...content } = frontmatter$n;
					content.file = file$n;
					content.url = url$n;
					const contentFragment = createVNode(Fragment, { 'set:html': html$l });
					return createVNode($$SnippetPost, {
									file: file$n,
									url: url$n,
									content,
									frontmatter: content,
									headings: getHeadings$n(),
									rawContent: rawContent$l,
									compiledContent: compiledContent$l,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$n[Symbol.for('astro.needsHeadRendering')] = false;

const _page17 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$n,
  compiledContent: compiledContent$l,
  default: Content$n,
  file: file$n,
  frontmatter: frontmatter$n,
  getHeadings: getHeadings$n,
  rawContent: rawContent$l,
  url: url$n
}, Symbol.toStringTag, { value: 'Module' }));

const html$k = "<h5 id=\"dayofyear\">dayOfYear</h5>\n<p>This snippet gets the day of the year from a Date object.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">dayOfYear</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">date</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Math.</span><span style=\"color: #D2A8FF\">floor</span><span style=\"color: #C9D1D9\">((date </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(date.</span><span style=\"color: #D2A8FF\">getFullYear</span><span style=\"color: #C9D1D9\">(), </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">60</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">60</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">24</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">dayOfYear</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// 272</span></span></code></pre>\n<h5 id=\"get-time-from-date\">Get Time From Date</h5>\n<p>This snippet can be used to get the time from a Date object as a string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getColonTimeFromDate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">date</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> date.</span><span style=\"color: #D2A8FF\">toTimeString</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">slice</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">8</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">getColonTimeFromDate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">()) </span><span style=\"color: #8B949E\">// \"08:38:00\"</span></span></code></pre>\n<h5 id=\"get-days-between-dates\">Get Days Between Dates</h5>\n<p>This snippet can be used to find the difference in days between two dates.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getDaysDiffBetweenDates</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">dateInitial</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">dateFinal</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (dateFinal </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> dateInitial) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">3600</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">24</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// or</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getDaysDiffBetweenDates</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">date1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">date2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Math.</span><span style=\"color: #D2A8FF\">ceil</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">abs</span><span style=\"color: #C9D1D9\">(date1 </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> date2) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">60</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">60</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">24</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">getDaysDiffBetweenDates</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'2019-01-13'</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'2019-01-15'</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// 2</span></span></code></pre>\n<h5 id=\"isafterdate\">isAfterDate</h5>\n<p>This snippet can be used to check whether a date is after another date.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isAfterDate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">dateA</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">dateB</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> dateA </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> dateB</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isAfterDate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2010</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">21</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2010</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">20</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"isbeforedate\">isBeforeDate</h5>\n<p>This snippet can be used to check whether a date is before another date.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isBeforeDate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">dateA</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">dateB</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> dateA </span><span style=\"color: #FF7B72\">&#x3C;</span><span style=\"color: #C9D1D9\"> dateB</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isBeforeDate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2010</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">20</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2010</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">21</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"issamedate\">isSameDate</h5>\n<p>This snippet can be used to check whether two dates are equal.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isSameDate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">dateA</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">dateB</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> dateA.</span><span style=\"color: #D2A8FF\">toISOString</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> dateB.</span><span style=\"color: #D2A8FF\">toISOString</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isSameDate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2010</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">20</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2010</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">20</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"maxdate\">maxDate</h5>\n<p>This snippet can be used to get the latest date.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">maxDate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">dates</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(Math.max.</span><span style=\"color: #D2A8FF\">apply</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">dates))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">array</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2017</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">13</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2018</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">12</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2016</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2016</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">9</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">maxDate</span><span style=\"color: #C9D1D9\">(array) </span><span style=\"color: #8B949E\">// 2018-03-11T22:00:00.000Z</span></span></code></pre>\n<h5 id=\"mindate\">minDate</h5>\n<p>This snippet can be used to get the earliest date.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">minDate</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">dates</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(Math.min.</span><span style=\"color: #D2A8FF\">apply</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">null</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">dates))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">array</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2017</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">13</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2018</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">12</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2016</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2016</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">9</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">minDate</span><span style=\"color: #C9D1D9\">(array) </span><span style=\"color: #8B949E\">// 2016-01-08T22:00:00.000Z</span></span></code></pre>\n<h5 id=\"tomorrow\">tomorrow</h5>\n<p>This snippet can be used to get a string representation of tomorrow’s date.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">tomorrow</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> t </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Date</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  t.</span><span style=\"color: #D2A8FF\">setDate</span><span style=\"color: #C9D1D9\">(t.</span><span style=\"color: #D2A8FF\">getDate</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> t.</span><span style=\"color: #D2A8FF\">toISOString</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'T'</span><span style=\"color: #C9D1D9\">)[</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">tomorrow</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #8B949E\">// 2019-09-09 (if current date is 2019-09-08)</span></span></code></pre>";

				const frontmatter$m = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript date helpers","description":"Javascript date","pubDate":"Jan 7 2023"};
				const file$m = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-date.md";
				const url$m = "/snippets/snippets-date";
				function rawContent$k() {
					return "\n##### dayOfYear\n\nThis snippet gets the day of the year from a Date object.\n\n```javascript\nconst dayOfYear = (date) =>\n  Math.floor((date - new Date(date.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24)\n\ndayOfYear(new Date()) // 272\n```\n\n##### Get Time From Date\n\nThis snippet can be used to get the time from a Date object as a string.\n\n```javascript\nconst getColonTimeFromDate = (date) => date.toTimeString().slice(0, 8)\n\ngetColonTimeFromDate(new Date()) // \"08:38:00\"\n```\n\n##### Get Days Between Dates\n\nThis snippet can be used to find the difference in days between two dates.\n\n```javascript\nconst getDaysDiffBetweenDates = (dateInitial, dateFinal) =>\n  (dateFinal - dateInitial) / (1000 * 3600 * 24)\n// or\nconst getDaysDiffBetweenDates = (date1, date2) =>\n  Math.ceil(Math.abs(date1 - date2) / (1000 * 60 * 60 * 24))\n\ngetDaysDiffBetweenDates(new Date('2019-01-13'), new Date('2019-01-15')) // 2\n```\n\n##### isAfterDate\n\nThis snippet can be used to check whether a date is after another date.\n\n```javascript\nconst isAfterDate = (dateA, dateB) => dateA > dateB\n\nisAfterDate(new Date(2010, 10, 21), new Date(2010, 10, 20)) // true\n```\n\n##### isBeforeDate\n\nThis snippet can be used to check whether a date is before another date.\n\n```javascript\nconst isBeforeDate = (dateA, dateB) => dateA < dateB\n\nisBeforeDate(new Date(2010, 10, 20), new Date(2010, 10, 21)) // true\n```\n\n##### isSameDate\n\nThis snippet can be used to check whether two dates are equal.\n\n```javascript\nconst isSameDate = (dateA, dateB) => dateA.toISOString() === dateB.toISOString()\n\nisSameDate(new Date(2010, 10, 20), new Date(2010, 10, 20)) // true\n```\n\n##### maxDate\n\nThis snippet can be used to get the latest date.\n\n```javascript\nconst maxDate = (...dates) => new Date(Math.max.apply(null, ...dates))\n\nconst array = [\n  new Date(2017, 4, 13),\n  new Date(2018, 2, 12),\n  new Date(2016, 0, 10),\n  new Date(2016, 0, 9),\n]\nmaxDate(array) // 2018-03-11T22:00:00.000Z\n```\n\n##### minDate\n\nThis snippet can be used to get the earliest date.\n\n```javascript\nconst minDate = (...dates) => new Date(Math.min.apply(null, ...dates))\n\nconst array = [\n  new Date(2017, 4, 13),\n  new Date(2018, 2, 12),\n  new Date(2016, 0, 10),\n  new Date(2016, 0, 9),\n]\nminDate(array) // 2016-01-08T22:00:00.000Z\n```\n\n##### tomorrow\n\nThis snippet can be used to get a string representation of tomorrow’s date.\n\n```javascript\nconst tomorrow = () => {\n  let t = new Date()\n  t.setDate(t.getDate() + 1)\n  return t.toISOString().split('T')[0]\n}\n\ntomorrow() // 2019-09-09 (if current date is 2019-09-08)\n```\n";
				}
				function compiledContent$k() {
					return html$k;
				}
				function getHeadings$m() {
					return [{"depth":5,"slug":"dayofyear","text":"dayOfYear"},{"depth":5,"slug":"get-time-from-date","text":"Get Time From Date"},{"depth":5,"slug":"get-days-between-dates","text":"Get Days Between Dates"},{"depth":5,"slug":"isafterdate","text":"isAfterDate"},{"depth":5,"slug":"isbeforedate","text":"isBeforeDate"},{"depth":5,"slug":"issamedate","text":"isSameDate"},{"depth":5,"slug":"maxdate","text":"maxDate"},{"depth":5,"slug":"mindate","text":"minDate"},{"depth":5,"slug":"tomorrow","text":"tomorrow"}];
				}
				async function Content$m() {
					const { layout, ...content } = frontmatter$m;
					content.file = file$m;
					content.url = url$m;
					const contentFragment = createVNode(Fragment, { 'set:html': html$k });
					return createVNode($$SnippetPost, {
									file: file$m,
									url: url$m,
									content,
									frontmatter: content,
									headings: getHeadings$m(),
									rawContent: rawContent$k,
									compiledContent: compiledContent$k,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$m[Symbol.for('astro.needsHeadRendering')] = false;

const _page18 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$m,
  compiledContent: compiledContent$k,
  default: Content$m,
  file: file$m,
  frontmatter: frontmatter$m,
  getHeadings: getHeadings$m,
  rawContent: rawContent$k,
  url: url$m
}, Symbol.toStringTag, { value: 'Module' }));

const html$j = "<h5 id=\"tooltip\">Tooltip</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">> &#x3C;</span><span style=\"color: #7EE787\">abbr</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">title</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"World Health Organization\"</span><span style=\"color: #C9D1D9\">>WHO&#x3C;/</span><span style=\"color: #7EE787\">abbr</span><span style=\"color: #C9D1D9\">> was founded in 1948. &#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">title</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Free Web tutorials\"</span><span style=\"color: #C9D1D9\">>W3Schools&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"download\">Download</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/images/myw3schoolsimage.jpg\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">download</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">&#x3C;!-- or --></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"link/to/your/file\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">download</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"filename\"</span><span style=\"color: #C9D1D9\">>Download link&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"word-break\">Word break</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  >This is a</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  veryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryvery&#x3C;</span><span style=\"color: #7EE787\">wbr</span><span style=\"color: #C9D1D9\"> />longwordthatwillbreakatspecific&#x3C;</span><span style=\"color: #7EE787\">wbr</span><span style=\"color: #C9D1D9\"> />placeswhenthebrowserwindowisresized.&#x3C;/</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"text-direction\">Text direction</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">dir</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"auto\"</span><span style=\"color: #C9D1D9\">>This text is following dir=auto&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"basic-accordion\">Basic Accordion</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">details</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">summary</span><span style=\"color: #C9D1D9\">>Epcot Center&#x3C;/</span><span style=\"color: #7EE787\">summary</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    >Epcot is a theme park at Walt Disney World Resort featuring exciting</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    attractions, international pavilions, award-winning fireworks and seasonal</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    special events.&#x3C;/</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  ></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">details</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"content-editable\">Content editable</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">contenteditable</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"true\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  >This is a paragraph. Click the button to make me editable.&#x3C;/</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">x</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> document.</span><span style=\"color: #D2A8FF\">getElementById</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'myP'</span><span style=\"color: #C9D1D9\">).isContentEditable</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">script</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"add-captions\">add captions</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">video</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"320\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">height</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"240\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">controls</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">source</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"forrest_gump.mp4\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">type</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"video/mp4\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">source</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"forrest_gump.ogg\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">type</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"video/ogg\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">track</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"fgsubtitles_en.vtt\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">kind</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"subtitles\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">srclang</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"en\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">label</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"English\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">track</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"fgsubtitles_no.vtt\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">kind</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"subtitles\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">srclang</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"no\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">label</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Norwegian\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">video</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  >With just HTML, you can add captions to your video files using the</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">track</span><span style=\"color: #C9D1D9\"> /> element. Use the src attribute to point to the subtitles file and</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  use the srclang attribute to set the language.&#x3C;/</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"lazy-loading\">Lazy loading</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/w3images/wedding.jpg\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Wedding\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"width: 100%\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/w3images/rocks.jpg\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Rocks\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"width: 100%\"</span><span style=\"color: #C9D1D9\"> /></span></span></code></pre>\n<h5 id=\"off-screen-images\">off-screen images</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/w3images/paris.jpg\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Paris\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"width: 100%\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">loading</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"lazy\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">img</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/w3images/nature.jpg\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Nature\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"width: 100%\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">loading</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"lazy\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">/></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">img</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/w3images/underwater.jpg\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Underwater\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"width: 100%\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">loading</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"lazy\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">/></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/w3images/ocean.jpg\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Ocean\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"width: 100%\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">loading</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"lazy\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">img</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"/w3images/mountainskies.jpg\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Mountains\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"width: 100%\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">loading</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"lazy\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">/></span></span></code></pre>\n<h5 id=\"base-url\">Base url</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">head</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">base</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"https://www.w3schools.com/\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">target</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"_blank\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">head</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">body</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"images/stickman.gif\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"24\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">height</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"39\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">alt</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Stickman\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"tags/tag_base.asp\"</span><span style=\"color: #C9D1D9\">>HTML base Tag&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">body</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"controlling-context-menu-and-paste\">Controlling Context Menu and Paste</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">input</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">type</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"text\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">onpaste</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"</span><span style=\"color: #FF7B72\">return</span><span style=\"color: #A5D6FF\"> </span><span style=\"color: #79C0FF\">false</span><span style=\"color: #A5D6FF\">\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">value</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"Paste something in here\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">oncontextmenu</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"</span><span style=\"color: #D2A8FF\">myFunction</span><span style=\"color: #A5D6FF\">()\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">contextmenu</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"mymenu\"</span><span style=\"color: #C9D1D9\">>&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"spellcheck\">Spellcheck</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">contenteditable</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"true\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">spellcheck</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"true\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  >This is a praggagraph. It is editable. Try to change the text.&#x3C;/</span><span style=\"color: #7EE787\">p</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span></code></pre>";

				const frontmatter$l = {"layout":"../../layouts/SnippetPost.astro","title":"The lesser used HTML","description":"Think you know all about HTML?","pubDate":"Jan 7 2023"};
				const file$l = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-html.md";
				const url$l = "/snippets/snippets-html";
				function rawContent$j() {
					return "\n##### Tooltip\n\n```html\n<p> <abbr title=\"World Health Organization\">WHO</abbr> was founded in 1948. </p>\n<p title=\"Free Web tutorials\">W3Schools</p>\n```\n\n##### Download\n\n```html\n<a href=\"/images/myw3schoolsimage.jpg\" download></a>\n<!-- or -->\n<a href=\"link/to/your/file\" download=\"filename\">Download link</a>\n```\n\n##### Word break\n\n```html\n<p\n  >This is a\n  veryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryvery<wbr />longwordthatwillbreakatspecific<wbr />placeswhenthebrowserwindowisresized.</p\n>\n```\n\n##### Text direction\n\n```html\n<p dir=\"auto\">This text is following dir=auto</p>\n```\n\n##### Basic Accordion\n\n```html\n<details>\n  <summary>Epcot Center</summary>\n  <p\n    >Epcot is a theme park at Walt Disney World Resort featuring exciting\n    attractions, international pavilions, award-winning fireworks and seasonal\n    special events.</p\n  >\n</details>\n```\n\n##### Content editable\n\n```html\n<p contenteditable=\"true\"\n  >This is a paragraph. Click the button to make me editable.</p\n>\n<script>\n  const x = document.getElementById('myP').isContentEditable\n</script>\n```\n\n##### add captions\n\n```html\n<video width=\"320\" height=\"240\" controls>\n  <source src=\"forrest_gump.mp4\" type=\"video/mp4\" />\n  <source src=\"forrest_gump.ogg\" type=\"video/ogg\" />\n  <track\n    src=\"fgsubtitles_en.vtt\"\n    kind=\"subtitles\"\n    srclang=\"en\"\n    label=\"English\"\n  />\n  <track\n    src=\"fgsubtitles_no.vtt\"\n    kind=\"subtitles\"\n    srclang=\"no\"\n    label=\"Norwegian\"\n  />\n</video>\n<p\n  >With just HTML, you can add captions to your video files using the\n  <track /> element. Use the src attribute to point to the subtitles file and\n  use the srclang attribute to set the language.</p\n>\n```\n\n##### Lazy loading\n\n```html\n<img src=\"/w3images/wedding.jpg\" alt=\"Wedding\" style=\"width: 100%\" />\n<img src=\"/w3images/rocks.jpg\" alt=\"Rocks\" style=\"width: 100%\" />\n```\n\n##### off-screen images\n\n```html\n<img src=\"/w3images/paris.jpg\" alt=\"Paris\" style=\"width: 100%\" loading=\"lazy\" />\n<img\n  src=\"/w3images/nature.jpg\"\n  alt=\"Nature\"\n  style=\"width: 100%\"\n  loading=\"lazy\"\n/>\n<img\n  src=\"/w3images/underwater.jpg\"\n  alt=\"Underwater\"\n  style=\"width: 100%\"\n  loading=\"lazy\"\n/>\n<img src=\"/w3images/ocean.jpg\" alt=\"Ocean\" style=\"width: 100%\" loading=\"lazy\" />\n<img\n  src=\"/w3images/mountainskies.jpg\"\n  alt=\"Mountains\"\n  style=\"width: 100%\"\n  loading=\"lazy\"\n/>\n```\n\n##### Base url\n\n```html\n<head>\n  <base href=\"https://www.w3schools.com/\" target=\"_blank\" />\n</head>\n\n<body>\n  <img src=\"images/stickman.gif\" width=\"24\" height=\"39\" alt=\"Stickman\" />\n  <a href=\"tags/tag_base.asp\">HTML base Tag</a>\n</body>\n```\n\n##### Controlling Context Menu and Paste\n\n```html\n<input type=\"text\" onpaste=\"return false\" value=\"Paste something in here\" />\n<div oncontextmenu=\"myFunction()\" contextmenu=\"mymenu\"></div>\n```\n\n##### Spellcheck\n\n```html\n<p contenteditable=\"true\" spellcheck=\"true\"\n  >This is a praggagraph. It is editable. Try to change the text.</p\n>\n</div>\n```\n";
				}
				function compiledContent$j() {
					return html$j;
				}
				function getHeadings$l() {
					return [{"depth":5,"slug":"tooltip","text":"Tooltip"},{"depth":5,"slug":"download","text":"Download"},{"depth":5,"slug":"word-break","text":"Word break"},{"depth":5,"slug":"text-direction","text":"Text direction"},{"depth":5,"slug":"basic-accordion","text":"Basic Accordion"},{"depth":5,"slug":"content-editable","text":"Content editable"},{"depth":5,"slug":"add-captions","text":"add captions"},{"depth":5,"slug":"lazy-loading","text":"Lazy loading"},{"depth":5,"slug":"off-screen-images","text":"off-screen images"},{"depth":5,"slug":"base-url","text":"Base url"},{"depth":5,"slug":"controlling-context-menu-and-paste","text":"Controlling Context Menu and Paste"},{"depth":5,"slug":"spellcheck","text":"Spellcheck"}];
				}
				async function Content$l() {
					const { layout, ...content } = frontmatter$l;
					content.file = file$l;
					content.url = url$l;
					const contentFragment = createVNode(Fragment, { 'set:html': html$j });
					return createVNode($$SnippetPost, {
									file: file$l,
									url: url$l,
									content,
									frontmatter: content,
									headings: getHeadings$l(),
									rawContent: rawContent$j,
									compiledContent: compiledContent$j,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$l[Symbol.for('astro.needsHeadRendering')] = false;

const _page19 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$l,
  compiledContent: compiledContent$j,
  default: Content$l,
  file: file$l,
  frontmatter: frontmatter$l,
  getHeadings: getHeadings$l,
  rawContent: rawContent$j,
  url: url$l
}, Symbol.toStringTag, { value: 'Module' }));

const html$i = "<h5 id=\"degrees-to-rads\">Degrees To Rads</h5>\n<p>This code snippet can be used to convert a value from degrees to radians.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">degreesToRads</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">deg</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (deg </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #79C0FF\">PI</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">180.0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">degreesToRads</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">90.0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// ~1.5708</span></span></code></pre>\n<h5 id=\"rads-to-degrees\">Rads To Degrees</h5>\n<p>This snippet can be used to convert an angle from radians to degrees.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">radsToDegrees</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">rad</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (rad </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">180.0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #79C0FF\">PI</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">radsToDegrees</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #79C0FF\">PI</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 90</span></span></code></pre>\n<h5 id=\"distance\">Distance</h5>\n<p>This snippet returns the distance between two points by calculating the Euclidean distance.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">distance</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">x0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">y0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">x1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">y1</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">hypot</span><span style=\"color: #C9D1D9\">(x1 </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> x0, y1 </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> y0)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">distance</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 2.23606797749979</span></span></code></pre>\n<h5 id=\"random-integer-in-range\">Random Integer In Range</h5>\n<p>This snippet can be used to generate a random integer in a specified range.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">randomIntegerInRange</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">min</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">max</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Math.</span><span style=\"color: #D2A8FF\">floor</span><span style=\"color: #C9D1D9\">(Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> (max </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> min </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> min</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">randomIntegerInRange</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 3</span></span></code></pre>\n<h5 id=\"random-number-in-range\">Random Number In Range</h5>\n<p>This snippet can be used to return a random number in a specified range.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">randomNumberInRange</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">min</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">max</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Math.</span><span style=\"color: #D2A8FF\">random</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">*</span><span style=\"color: #C9D1D9\"> (max </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> min) </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> min</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">randomNumberInRange</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 6.0211363285087005</span></span></code></pre>";

				const frontmatter$k = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript math","description":"Good at math?","pubDate":"Jan 7 2023"};
				const file$k = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-math.md";
				const url$k = "/snippets/snippets-math";
				function rawContent$i() {
					return "\n##### Degrees To Rads\n\nThis code snippet can be used to convert a value from degrees to radians.\n\n```javascript\nconst degreesToRads = (deg) => (deg * Math.PI) / 180.0\n\ndegreesToRads(90.0) // ~1.5708\n```\n\n##### Rads To Degrees\n\nThis snippet can be used to convert an angle from radians to degrees.\n\n```javascript\nconst radsToDegrees = (rad) => (rad * 180.0) / Math.PI\n\nradsToDegrees(Math.PI / 2) // 90\n```\n\n##### Distance\n\nThis snippet returns the distance between two points by calculating the Euclidean distance.\n\n```javascript\nconst distance = (x0, y0, x1, y1) => Math.hypot(x1 - x0, y1 - y0)\n\ndistance(1, 1, 2, 3) // 2.23606797749979\n```\n\n##### Random Integer In Range\n\nThis snippet can be used to generate a random integer in a specified range.\n\n```javascript\nconst randomIntegerInRange = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1)) + min\n\nrandomIntegerInRange(0, 5) // 3\n```\n\n##### Random Number In Range\n\nThis snippet can be used to return a random number in a specified range.\n\n```javascript\nconst randomNumberInRange = (min, max) => Math.random() * (max - min) + min\n\nrandomNumberInRange(2, 10) // 6.0211363285087005\n```\n";
				}
				function compiledContent$i() {
					return html$i;
				}
				function getHeadings$k() {
					return [{"depth":5,"slug":"degrees-to-rads","text":"Degrees To Rads"},{"depth":5,"slug":"rads-to-degrees","text":"Rads To Degrees"},{"depth":5,"slug":"distance","text":"Distance"},{"depth":5,"slug":"random-integer-in-range","text":"Random Integer In Range"},{"depth":5,"slug":"random-number-in-range","text":"Random Number In Range"}];
				}
				async function Content$k() {
					const { layout, ...content } = frontmatter$k;
					content.file = file$k;
					content.url = url$k;
					const contentFragment = createVNode(Fragment, { 'set:html': html$i });
					return createVNode($$SnippetPost, {
									file: file$k,
									url: url$k,
									content,
									frontmatter: content,
									headings: getHeadings$k(),
									rawContent: rawContent$i,
									compiledContent: compiledContent$i,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$k[Symbol.for('astro.needsHeadRendering')] = false;

const _page20 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$k,
  compiledContent: compiledContent$i,
  default: Content$k,
  file: file$k,
  frontmatter: frontmatter$k,
  getHeadings: getHeadings$k,
  rawContent: rawContent$i,
  url: url$k
}, Symbol.toStringTag, { value: 'Module' }));

const html$h = "<h5 id=\"create-directory\">Create Directory</h5>\n<p>This snippet uses existsSync() to check whether a directory exists and then mkdirSync() to create it if it doesn’t.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">fs</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">require</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'fs'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createDirIfNotExists</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">dir</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">fs.</span><span style=\"color: #D2A8FF\">existsSync</span><span style=\"color: #C9D1D9\">(dir) </span><span style=\"color: #FF7B72\">?</span><span style=\"color: #C9D1D9\"> fs.</span><span style=\"color: #D2A8FF\">mkdirSync</span><span style=\"color: #C9D1D9\">(dir) </span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">undefined</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">createDirIfNotExists</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'test'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// creates the directory 'test', if it doesn't exist</span></span></code></pre>\n<h5 id=\"isbrowser\">isBrowser</h5>\n<p>This snippet can be used to determine whether the current runtime environment is a browser. This is helpful for avoiding errors when running front-end modules on the server (Node).</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isBrowser</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> window, </span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> document].</span><span style=\"color: #D2A8FF\">includes</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'undefined'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isBrowser</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #8B949E\">// true (browser)</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isBrowser</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #8B949E\">// false (Node)</span></span></code></pre>\n<h5 id=\"readfilelines\">readFileLines</h5>\n<p>This snippet can be used to read a file by getting an array of lines from a file.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">fs</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">require</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'fs'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">readFileLines</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">filename</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  fs.</span><span style=\"color: #D2A8FF\">readFileSync</span><span style=\"color: #C9D1D9\">(filename).</span><span style=\"color: #D2A8FF\">toString</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'UTF8'</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">split</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'</span><span style=\"color: #79C0FF\">\\n</span><span style=\"color: #A5D6FF\">'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> arr </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">readFileLines</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'test.txt'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(arr) </span><span style=\"color: #8B949E\">// ['line1', 'line2', 'line3']</span></span></code></pre>";

				const frontmatter$j = {"layout":"../../layouts/SnippetPost.astro","title":"Node js snippets","description":"Node","pubDate":"Jan 7 2023"};
				const file$j = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-node.md";
				const url$j = "/snippets/snippets-node";
				function rawContent$h() {
					return "\n##### Create Directory\n\nThis snippet uses existsSync() to check whether a directory exists and then mkdirSync() to create it if it doesn’t.\n\n```javascript\nconst fs = require('fs')\nconst createDirIfNotExists = (dir) =>\n  !fs.existsSync(dir) ? fs.mkdirSync(dir) : undefined\ncreateDirIfNotExists('test')\n// creates the directory 'test', if it doesn't exist\n```\n\n##### isBrowser\n\nThis snippet can be used to determine whether the current runtime environment is a browser. This is helpful for avoiding errors when running front-end modules on the server (Node).\n\n```javascript\nconst isBrowser = () => ![typeof window, typeof document].includes('undefined')\n\nisBrowser() // true (browser)\nisBrowser() // false (Node)\n```\n\n##### readFileLines\n\nThis snippet can be used to read a file by getting an array of lines from a file.\n\n```javascript\nconst fs = require('fs')\nconst readFileLines = (filename) =>\n  fs.readFileSync(filename).toString('UTF8').split('\\n')\n\nlet arr = readFileLines('test.txt')\nconsole.log(arr) // ['line1', 'line2', 'line3']\n```\n";
				}
				function compiledContent$h() {
					return html$h;
				}
				function getHeadings$j() {
					return [{"depth":5,"slug":"create-directory","text":"Create Directory"},{"depth":5,"slug":"isbrowser","text":"isBrowser"},{"depth":5,"slug":"readfilelines","text":"readFileLines"}];
				}
				async function Content$j() {
					const { layout, ...content } = frontmatter$j;
					content.file = file$j;
					content.url = url$j;
					const contentFragment = createVNode(Fragment, { 'set:html': html$h });
					return createVNode($$SnippetPost, {
									file: file$j,
									url: url$j,
									content,
									frontmatter: content,
									headings: getHeadings$j(),
									rawContent: rawContent$h,
									compiledContent: compiledContent$h,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$j[Symbol.for('astro.needsHeadRendering')] = false;

const _page21 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$j,
  compiledContent: compiledContent$h,
  default: Content$j,
  file: file$j,
  frontmatter: frontmatter$j,
  getHeadings: getHeadings$j,
  rawContent: rawContent$h,
  url: url$j
}, Symbol.toStringTag, { value: 'Module' }));

const html$g = "<h5 id=\"css-only-tooltip\">CSS only tooltip</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">data-tool-tip</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"My little tooltip.\"</span><span style=\"color: #C9D1D9\">>A random link&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">position</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">relative</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x26;[</span><span style=\"color: #79C0FF\">data-tool-tip</span><span style=\"color: #C9D1D9\">] {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x26;::after {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">content</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">attr</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">data-tool-tip</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">block</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">position</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">absolute</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">background-color</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">#ccc</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">border-radius</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">5</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">padding</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">color</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">font-size</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0.8</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">bottom</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">left</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">white-space</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">nowrap</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">transform</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">scale</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">transition</span><span style=\"color: #C9D1D9\">: transform </span><span style=\"color: #79C0FF\">ease-out</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">150</span><span style=\"color: #FF7B72\">ms</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">bottom</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">ease-out</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">150</span><span style=\"color: #FF7B72\">ms</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x26;</span><span style=\"color: #79C0FF\">:hover::after</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">bottom</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #79C0FF\">transform</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">scale</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"clever-multicolumn-responsive-layout-with-flex\">Clever multicolumn responsive layout with flex</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #79C0FF\">.split</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">flex</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">flex-direction</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">column</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">@media</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #79C0FF\">min-width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">40</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">.split</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">flex-direction</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">row</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">.split</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #7EE787\">*</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">flex-basis</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">; </span><span style=\"color: #8B949E\">/* makes them even */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">.split</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #7EE787\">*</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #7EE787\">*</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">margin-left</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\">; </span><span style=\"color: #8B949E\">/* clever gutter */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"different-easings-in-css\">Different easings in css</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #79C0FF\">:root</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-quad</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.55</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.085</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.68</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.53</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-cubic</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.55</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.055</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.675</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.19</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-quart</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.895</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.03</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.685</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.22</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-quint</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.755</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.05</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.855</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.06</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-expo</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.95</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.05</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.795</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.035</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-circ</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.6</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.04</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.98</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.335</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-out-quad</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.25</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.46</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.45</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.94</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-out-cubic</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.215</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.61</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.355</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-out-quart</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.165</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.84</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.44</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-out-quint</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.23</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.32</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-out-expo</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.19</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.22</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-out-circ</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.075</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.82</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.165</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-out-quad</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.455</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.03</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.515</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.955</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-out-cubic</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.645</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.045</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.355</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-out-quart</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.77</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.175</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-out-quint</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.86</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.07</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-out-expo</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--ease-in-out-circ</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">cubic-bezier</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0.785</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.135</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.15</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.86</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"bounce-back\">Bounce back</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">transition: 0</span><span style=\"color: #79C0FF\">.5s</span><span style=\"color: #C9D1D9\"> cubic-bezier(0</span><span style=\"color: #79C0FF\">.165</span><span style=\"color: #C9D1D9\">, 0</span><span style=\"color: #79C0FF\">.84</span><span style=\"color: #C9D1D9\">, 0</span><span style=\"color: #79C0FF\">.44</span><span style=\"color: #C9D1D9\">, 1);</span></span></code></pre>\n<h5 id=\"dynamic-and-clamped-font-size\">Dynamic and clamped font size</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">calc(2px </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> ((5 </span><span style=\"color: #7EE787\">*</span><span style=\"color: #C9D1D9\"> (100vw - 800px))/799))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">calc(14px </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> 8 </span><span style=\"color: #7EE787\">*</span><span style=\"color: #C9D1D9\"> ((100vw - 500px)/1500))</span></span></code></pre>\n<h5 id=\"set-multiple-styles-at-once-via-javascript\">Set multiple styles at once via javascript</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setStylesOnElement</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">element</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">stylesObj</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// this wont work -> element.style = {...element.style, ...stylesObj};</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">(element.style, stylesObj)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"check-for-user-color-theme-preference\">Check for user color theme preference</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">@media</span><span style=\"color: #C9D1D9\"> (prefers-color-scheme: dark) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  // your </span><span style=\"color: #7EE787\">code</span><span style=\"color: #C9D1D9\"> for dark mode here</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"text-tooltips\">Text tooltips</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">type</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"button\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"tooltip\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">data-tip</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"This css tooltip\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  I have a Tooltip</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">style</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/* only add tooltip when there is a message */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">.tooltip</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #79C0FF\">data-tip</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #79C0FF\">:not</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">data-tip</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">])</span><span style=\"color: #79C0FF\">::before</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">content</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">attr</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">data-tip</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">position</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">absolute</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">background-color</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">rgba</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.8</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">color</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">#fff</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">padding</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">15</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">border-radius</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">max-width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">300</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">250</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">left</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">transform</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">translate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">-50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">bottom</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">calc</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">12</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/* The direction arrow */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">.tooltip</span><span style=\"color: #C9D1D9\">[</span><span style=\"color: #79C0FF\">data-tip</span><span style=\"color: #C9D1D9\">]</span><span style=\"color: #79C0FF\">:not</span><span style=\"color: #C9D1D9\">([</span><span style=\"color: #79C0FF\">data-tip</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">])</span><span style=\"color: #79C0FF\">::after</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">content</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">border-width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">6</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">border-style</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">solid</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">border-color</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">transparent</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">border-top-color</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">rgba</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.8</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">height</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">inline-block</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">position</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">absolute</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">left</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">bottom</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">transform</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">translate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">-50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">style</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"custom-text-underline\">Custom text underline</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">/* Alt 1 */</span></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">.shadow-underline</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">inline</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">box-shadow</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">inset</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">-0.23</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">inset</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">-0.25</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">green</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">inset</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">-0.3</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">inset</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">-0.4</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">red</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">text-shadow</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0.04</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">-0.04</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/* Alt 2 */</span></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">.custom-underline</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">inline</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">linear-gradient</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">90</span><span style=\"color: #FF7B72\">deg</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">black</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">78</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">/</span><span style=\"color: #79C0FF\">4</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">repeat-x</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">linear-gradient</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">90</span><span style=\"color: #FF7B72\">deg</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">black</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">82</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">/</span><span style=\"color: #79C0FF\">4</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">repeat-x</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">text-shadow</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0.04</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">-0.04</span><span style=\"color: #FF7B72\">em</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">white</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"no-html-for-wrapper-needed\">No HTML for wrapper needed</h5>\n<p>A better and less HTML intrusive solution would use CSS\npadding alone. The formula is something like this:\n100vw — min(max-width, (100vw — (left-gap + right-gap))) / 2.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">main</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">#3f51b5</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">padding</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">15</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">calc</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">vw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">min</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">900</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">calc</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">vw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">))) / </span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">color</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">#fff</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"extend-the-clickable-area\">Extend the clickable area</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">border</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">none</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">#222</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">height</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">border-radius</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">padding</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">position</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">relative</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">cursor</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">pointer</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #7EE787\">button</span><span style=\"color: #79C0FF\">::after</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">content</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">position</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">absolute</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">left</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">top</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">transform</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">translate</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">-50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">-50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">200</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">height</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">200</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">inline-block</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/* for demo purpose only - should be removed   */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">rgba</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">0.2</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"responsive-text\">Responsive text</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">font-size</span><span style=\"color: #C9D1D9\">: calc(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  [minimum </span><span style=\"color: #79C0FF\">size</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> ([maximum </span><span style=\"color: #79C0FF\">size</span><span style=\"color: #C9D1D9\">] - [minimum </span><span style=\"color: #79C0FF\">size</span><span style=\"color: #C9D1D9\">]) </span><span style=\"color: #7EE787\">*</span><span style=\"color: #C9D1D9\"> ((</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          100vw - [minimum viewport </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        ) / ([maximum viewport </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">] - [minimum viewport </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">]))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">// or there is decent support for clamping</span></span>\n<span class=\"line\"><span style=\"color: #7EE787\">font-size</span><span style=\"color: #C9D1D9\">: clamp(min, </span><span style=\"color: #7EE787\">viewport-width-unit</span><span style=\"color: #C9D1D9\">, max);</span></span></code></pre>\n<h5 id=\"image-grid-with-random-height-aka-maisonary-layout-grid\">Image grid with random height (aka maisonary layout grid)</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"container\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"item\"</span><span style=\"color: #C9D1D9\">> &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"item\"</span><span style=\"color: #C9D1D9\">> &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"item\"</span><span style=\"color: #C9D1D9\">> &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"item\"</span><span style=\"color: #C9D1D9\">> &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"item\"</span><span style=\"color: #C9D1D9\">> &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">style</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">.container</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">600</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">-webkit-column-count</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">-moz-column-count</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">column-count</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">-webkit-column-gap</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">15</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">-moz-column-gap</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">15</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">column-gap</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">15</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">.item</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">block</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">/* match gap size */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">margin-bottom</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">15</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">style</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h5 id=\"truncate-with-ellipsis-single-line\">Truncate with Ellipsis (single line)</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/*  use max-width so the ellipsis</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">  only shows when reached that size     */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">max-width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">200</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">overflow</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">hidden</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">white-space</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">nowrap</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">text-overflow</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">ellipsis</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">inline-block</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"truncate-with-an-ellipsis-multiple-lines\">Truncate with an ellipsis (multiple lines)</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/* old display option */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">-webkit-box</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">-webkit-box-orient</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">vertical</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/* max number of lines to show */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">-webkit-line-clamp</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/* needed for it to work */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">overflow</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">hidden</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"vertical-alignment-an-inline-inline-block-or-table-cell-box\">Vertical alignment an inline, inline-block, or table-cell box</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">/* only for block tags */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">inline-block</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">vertical-align</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">middle</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"aspect-ratio\">Aspect ratio</h5>\n<p>Create a 16 by 9 rectangle of 200px wide.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #79C0FF\">.container</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">200</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">.box</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">padding-top</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">calc</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #79C0FF\">9</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">16</span><span style=\"color: #C9D1D9\">) * </span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">#eee</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/* You can also use the after pseudo-element to create the ratio size */</span></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">.container</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">200</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">.box::after</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">content</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">display</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">block</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">padding-top</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">calc</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #79C0FF\">9</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">16</span><span style=\"color: #C9D1D9\">) * </span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">#eee</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/* In modern css */</span></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">.box</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">aspect-ratio</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">16</span><span style=\"color: #C9D1D9\"> / </span><span style=\"color: #79C0FF\">9</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"text-around-an-image\">Text around an image</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #7EE787\">img</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">float</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">right</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">shape-outside</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">url</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">some-url-to-your-image</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"is-matches-any-and-where\">is, matches, any and :where</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">/* turn */</span></span>\n<span class=\"line\"><span style=\"color: #7EE787\">section</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #7EE787\">h1</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #7EE787\">article</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #7EE787\">h1</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #7EE787\">aside</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #7EE787\">h1</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #7EE787\">nav</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #7EE787\">h1</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">font-size</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">25</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/* into */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">:is(</span><span style=\"color: #7EE787\">section</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #7EE787\">article</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #7EE787\">aside</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #7EE787\">nav</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #7EE787\">h1</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">font-size</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">25</span><span style=\"color: #FF7B72\">px</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>The <code>:where</code> works similarly but the specificity is always zero\nwhere the <code>:is</code> specificity is of the overall selector.</p>\n<h5 id=\"css-pie-timer\">CSS Pie Timer</h5>\n<p>Here is my <a href=\"https://codepen.io/nicolashervy/pen/KKyMXVg\">codepen example</a><br>\nNote: Won’t work in firefox just yet.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">@property</span><span style=\"color: #C9D1D9\"> --a {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  syntax: '&#x3C;angle</span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\">';</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  inherits: false;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #7EE787\">initial-value</span><span style=\"color: #C9D1D9\">: 10deg;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">.pie</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">--a</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">10</span><span style=\"color: #FF7B72\">deg</span><span style=\"color: #C9D1D9\">; </span><span style=\"color: #8B949E\">/*  needed for firefox to have a valid output */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">background-image</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">conic-gradient</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">#fff</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">var</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">--a</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #79C0FF\">#000</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">100</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">border-radius</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">50</span><span style=\"color: #FF7B72\">%</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">transition</span><span style=\"color: #C9D1D9\">: --a </span><span style=\"color: #79C0FF\">3</span><span style=\"color: #FF7B72\">s</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">linear</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x26;:hover {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    --a: </span><span style=\"color: #79C0FF\">360</span><span style=\"color: #FF7B72\">deg</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>";

				const frontmatter$i = {"layout":"../../layouts/SnippetPost.astro","title":"Trickeries with CSS","description":"Tricky CSS or CSS that trick you up","pubDate":"Jan 7 2023"};
				const file$i = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-css.md";
				const url$i = "/snippets/snippets-css";
				function rawContent$g() {
					return "\n##### CSS only tooltip\n\n```html\n<a data-tool-tip=\"My little tooltip.\">A random link</a>\n```\n\n```css\na {\n  position: relative;\n  &[data-tool-tip] {\n    &::after {\n      content: attr(data-tool-tip);\n      display: block;\n      position: absolute;\n      background-color: #ccc;\n      border-radius: 5px;\n      padding: 1em 3em;\n      color: white;\n      font-size: 0.8em;\n      bottom: 0;\n      left: 0;\n      white-space: nowrap;\n      transform: scale(0);\n      transition: transform ease-out 150ms, bottom ease-out 150ms;\n    }\n    &:hover::after {\n      bottom: 100%;\n      transform: scale(1);\n    }\n  }\n}\n```\n\n##### Clever multicolumn responsive layout with flex\n\n```css\n.split {\n  display: flex;\n  flex-direction: column;\n}\n@media (min-width: 40em) {\n  .split {\n    flex-direction: row;\n  }\n  .split > * {\n    flex-basis: 100%; /* makes them even */\n  }\n  .split > * + * {\n    margin-left: 2em; /* clever gutter */\n  }\n}\n```\n\n##### Different easings in css\n\n```css\n:root {\n  --ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);\n  --ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n  --ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);\n  --ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n  --ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);\n  --ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);\n\n  --ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  --ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);\n  --ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);\n  --ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);\n  --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);\n  --ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);\n\n  --ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);\n  --ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);\n  --ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);\n  --ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);\n  --ease-in-out-expo: cubic-bezier(1, 0, 0, 1);\n  --ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);\n}\n```\n\n##### Bounce back\n\n```css\ntransition: 0.5s cubic-bezier(0.165, 0.84, 0.44, 1);\n```\n\n##### Dynamic and clamped font size\n\n```css\ncalc(2px + ((5 * (100vw - 800px))/799))\ncalc(14px + 8 * ((100vw - 500px)/1500))\n```\n\n##### Set multiple styles at once via javascript\n\n```javascript\nfunction setStylesOnElement(element, stylesObj) {\n  // this wont work -> element.style = {...element.style, ...stylesObj};\n  Object.assign(element.style, stylesObj)\n}\n```\n\n##### Check for user color theme preference\n\n```css\n@media (prefers-color-scheme: dark) {\n  // your code for dark mode here\n}\n```\n\n##### Text tooltips\n\n```html\n<button type=\"button\" class=\"tooltip\" data-tip=\"This css tooltip\">\n  I have a Tooltip\n</button>\n<style>\n  /* only add tooltip when there is a message */\n  .tooltip[data-tip]:not([data-tip=''])::before {\n    content: attr(data-tip);\n    position: absolute;\n    background-color: rgba(0, 0, 0, 0.8);\n    color: #fff;\n    padding: 15px 10px;\n    border-radius: 3px;\n    max-width: 300px;\n    width: 250%;\n    left: 50%;\n    transform: translate(-50%, 0);\n    bottom: calc(100% + 12px);\n  }\n  /* The direction arrow */\n  .tooltip[data-tip]:not([data-tip=''])::after {\n    content: '';\n    border-width: 6px;\n    border-style: solid;\n    border-color: transparent;\n    border-top-color: rgba(0, 0, 0, 0.8);\n    width: 0;\n    height: 0;\n    display: inline-block;\n    position: absolute;\n    left: 50%;\n    bottom: 100%;\n    transform: translate(-50%, 0);\n  }\n</style>\n```\n\n##### Custom text underline\n\n```css\n/* Alt 1 */\n.shadow-underline {\n  display: inline;\n  box-shadow: inset 0 -0.23em white, inset 0 -0.25em green, inset 0 -0.3em white,\n    inset 0 -0.4em red;\n  text-shadow: 0.04em 0 white, -0.04em 0 white;\n}\n\n/* Alt 2 */\n.custom-underline {\n  display: inline;\n  background: linear-gradient(90deg, black 50%, white 0) 0 78%/4px 2px repeat-x,\n    linear-gradient(90deg, white 50%, black 0) 0 82%/4px 2px repeat-x;\n  text-shadow: 0.04em 0 white, -0.04em 0 white;\n}\n```\n\n##### No HTML for wrapper needed\n\nA better and less HTML intrusive solution would use CSS\npadding alone. The formula is something like this:\n100vw — min(max-width, (100vw — (left-gap + right-gap))) / 2.\n\n```css\nmain {\n  background: #3f51b5;\n  padding: 15px calc((100vw - min(900px, calc(100vw - 50px))) / 2);\n  color: #fff;\n}\n```\n\n##### Extend the clickable area\n\n```css\nbutton {\n  border: none;\n  background: #222;\n  width: 10px;\n  height: 10px;\n  border-radius: 50%;\n  padding: 0;\n  position: relative;\n  cursor: pointer;\n}\nbutton::after {\n  content: '';\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 200%;\n  height: 200%;\n  display: inline-block;\n  /* for demo purpose only - should be removed   */\n  background: rgba(0, 0, 0, 0.2);\n}\n```\n\n##### Responsive text\n\n```css\nfont-size: calc(\n  [minimum size] + ([maximum size] - [minimum size]) * ((\n          100vw - [minimum viewport width]\n        ) / ([maximum viewport width] - [minimum viewport width]))\n);\n// or there is decent support for clamping\nfont-size: clamp(min, viewport-width-unit, max);\n```\n\n##### Image grid with random height (aka maisonary layout grid)\n\n```html\n<div class=\"container\">\n  <div class=\"item\"> </div>\n  <div class=\"item\"> </div>\n  <div class=\"item\"> </div>\n  <div class=\"item\"> </div>\n  <div class=\"item\"> </div>\n</div>\n<style>\n  .container {\n    width: 600px;\n    -webkit-column-count: 3;\n    -moz-column-count: 3;\n    column-count: 3;\n\n    -webkit-column-gap: 15px;\n    -moz-column-gap: 15px;\n    column-gap: 15px;\n  }\n  .item {\n    display: block;\n    /* match gap size */\n    margin-bottom: 15px;\n  }\n</style>\n```\n\n##### Truncate with Ellipsis (single line)\n\n```css\np {\n  /*  use max-width so the ellipsis\n  only shows when reached that size     */\n\n  max-width: 200px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  display: inline-block;\n}\n```\n\n##### Truncate with an ellipsis (multiple lines)\n\n```css\np {\n  /* old display option */\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  /* max number of lines to show */\n  -webkit-line-clamp: 3;\n  /* needed for it to work */\n  overflow: hidden;\n}\n```\n\n##### Vertical alignment an inline, inline-block, or table-cell box\n\n```css\nimg {\n  /* only for block tags */\n  display: inline-block;\n  vertical-align: middle;\n}\n```\n\n##### Aspect ratio\n\nCreate a 16 by 9 rectangle of 200px wide.\n\n```css\n.container {\n  width: 200px;\n}\n.box {\n  padding-top: calc((9 / 16) * 100%);\n  background: #eee;\n}\n/* You can also use the after pseudo-element to create the ratio size */\n.container {\n  width: 200px;\n}\n.box::after {\n  content: '';\n  display: block;\n  padding-top: calc((9 / 16) * 100%);\n  background: #eee;\n}\n/* In modern css */\n.box {\n  aspect-ratio: 16 / 9;\n}\n```\n\n##### Text around an image\n\n```css\nimg {\n  float: right;\n  shape-outside: url(some-url-to-your-image);\n}\n```\n\n##### is, matches, any and :where\n\n```css\n/* turn */\nsection h1,\narticle h1,\naside h1,\nnav h1 {\n  font-size: 25px;\n}\n/* into */\n:is(section, article, aside, nav) h1 {\n  font-size: 25px;\n}\n```\n\nThe `:where` works similarly but the specificity is always zero\nwhere the `:is` specificity is of the overall selector.\n\n##### CSS Pie Timer\n\nHere is my [codepen example](https://codepen.io/nicolashervy/pen/KKyMXVg)  \nNote: Won't work in firefox just yet.\n\n```css\n@property --a {\n  syntax: '<angle>';\n  inherits: false;\n  initial-value: 10deg;\n}\n\n.pie {\n  --a: 10deg; /*  needed for firefox to have a valid output */\n  background-image: conic-gradient(#fff var(--a), #000 0% 100%);\n  border-radius: 50%;\n  transition: --a 3s linear;\n  &:hover {\n    --a: 360deg;\n  }\n}\n```\n";
				}
				function compiledContent$g() {
					return html$g;
				}
				function getHeadings$i() {
					return [{"depth":5,"slug":"css-only-tooltip","text":"CSS only tooltip"},{"depth":5,"slug":"clever-multicolumn-responsive-layout-with-flex","text":"Clever multicolumn responsive layout with flex"},{"depth":5,"slug":"different-easings-in-css","text":"Different easings in css"},{"depth":5,"slug":"bounce-back","text":"Bounce back"},{"depth":5,"slug":"dynamic-and-clamped-font-size","text":"Dynamic and clamped font size"},{"depth":5,"slug":"set-multiple-styles-at-once-via-javascript","text":"Set multiple styles at once via javascript"},{"depth":5,"slug":"check-for-user-color-theme-preference","text":"Check for user color theme preference"},{"depth":5,"slug":"text-tooltips","text":"Text tooltips"},{"depth":5,"slug":"custom-text-underline","text":"Custom text underline"},{"depth":5,"slug":"no-html-for-wrapper-needed","text":"No HTML for wrapper needed"},{"depth":5,"slug":"extend-the-clickable-area","text":"Extend the clickable area"},{"depth":5,"slug":"responsive-text","text":"Responsive text"},{"depth":5,"slug":"image-grid-with-random-height-aka-maisonary-layout-grid","text":"Image grid with random height (aka maisonary layout grid)"},{"depth":5,"slug":"truncate-with-ellipsis-single-line","text":"Truncate with Ellipsis (single line)"},{"depth":5,"slug":"truncate-with-an-ellipsis-multiple-lines","text":"Truncate with an ellipsis (multiple lines)"},{"depth":5,"slug":"vertical-alignment-an-inline-inline-block-or-table-cell-box","text":"Vertical alignment an inline, inline-block, or table-cell box"},{"depth":5,"slug":"aspect-ratio","text":"Aspect ratio"},{"depth":5,"slug":"text-around-an-image","text":"Text around an image"},{"depth":5,"slug":"is-matches-any-and-where","text":"is, matches, any and :where"},{"depth":5,"slug":"css-pie-timer","text":"CSS Pie Timer"}];
				}
				async function Content$i() {
					const { layout, ...content } = frontmatter$i;
					content.file = file$i;
					content.url = url$i;
					const contentFragment = createVNode(Fragment, { 'set:html': html$g });
					return createVNode($$SnippetPost, {
									file: file$i,
									url: url$i,
									content,
									frontmatter: content,
									headings: getHeadings$i(),
									rawContent: rawContent$g,
									compiledContent: compiledContent$g,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$i[Symbol.for('astro.needsHeadRendering')] = false;

const _page22 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$i,
  compiledContent: compiledContent$g,
  default: Content$i,
  file: file$i,
  frontmatter: frontmatter$i,
  getHeadings: getHeadings$i,
  rawContent: rawContent$g,
  url: url$i
}, Symbol.toStringTag, { value: 'Module' }));

const html$f = "<h5 id=\"bottom-visible\">Bottom visible</h5>\n<p>This snippet checks whether the bottom of a page is visible.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">bottomVisible</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  document.documentElement.clientHeight </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> window.scrollY </span><span style=\"color: #FF7B72\">>=</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  (document.documentElement.scrollHeight </span><span style=\"color: #FF7B72\">||</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    document.documentElement.clientHeight)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">bottomVisible</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"element-contains\">Element contains</h5>\n<p>This snippet checks whether the parent element contains the child.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">elementContains</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">parent</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">child</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  parent </span><span style=\"color: #FF7B72\">!==</span><span style=\"color: #C9D1D9\"> child </span><span style=\"color: #FF7B72\">&#x26;&#x26;</span><span style=\"color: #C9D1D9\"> parent.</span><span style=\"color: #D2A8FF\">contains</span><span style=\"color: #C9D1D9\">(child)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">elementContains</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'head'</span><span style=\"color: #C9D1D9\">), document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'title'</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// true</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">elementContains</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'body'</span><span style=\"color: #C9D1D9\">), document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'body'</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// false</span></span></code></pre>\n<h5 id=\"get-style\">Get style</h5>\n<p>This snippet can be used to get the value of a CSS rule for a particular element.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getStyle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">ruleName</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getComputedStyle</span><span style=\"color: #C9D1D9\">(el)[ruleName]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">getStyle</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'p'</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #A5D6FF\">'font-size'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// '16px'</span></span></code></pre>\n<h5 id=\"hide\">Hide</h5>\n<p>This snippet can be used to hide all elements specified.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">hide</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">el].</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">e</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (e.style.display </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'none'</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">hide</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelectorAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'img'</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// Hides all &#x3C;img> elements on the page</span></span></code></pre>\n<h5 id=\"insert-after\">Insert after</h5>\n<p>This snippet can be used to insert an HTML string after the end of a particular element.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">insertAfter</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">htmlString</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  el.</span><span style=\"color: #D2A8FF\">insertAdjacentHTML</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'afterend'</span><span style=\"color: #C9D1D9\">, htmlString)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">insertAfter</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">getElementById</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'myId'</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #A5D6FF\">'&#x3C;p>after&#x3C;/p>'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// &#x3C;div id=\"myId\">...&#x3C;/div> &#x3C;p>after&#x3C;/p></span></span></code></pre>\n<h5 id=\"insert-before\">Insert before</h5>\n<p>This snippet can be used to insert an HTML string before a particular element.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">insertBefore</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">htmlString</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  el.</span><span style=\"color: #D2A8FF\">insertAdjacentHTML</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'beforebegin'</span><span style=\"color: #C9D1D9\">, htmlString)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">insertBefore</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">getElementById</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'myId'</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #A5D6FF\">'&#x3C;p>before&#x3C;/p>'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// &#x3C;p>before&#x3C;/p> &#x3C;div id=\"myId\">...&#x3C;/div></span></span></code></pre>\n<h5 id=\"is-browser-tab-focused\">Is browser tab focused</h5>\n<p>This snippet can be used to determine whether the browser tab is focused.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">isBrowserTabFocused</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">document.hidden</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">isBrowserTabFocused</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #8B949E\">// true</span></span></code></pre>\n<h5 id=\"node-list-to-array\">Node list to array</h5>\n<p>This snippet can be used to convert a nodeList to an array.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">nodeListToArray</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">nodeList</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">nodeList]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">nodeListToArray</span><span style=\"color: #C9D1D9\">(document.childNodes) </span><span style=\"color: #8B949E\">// [ &#x3C;!DOCTYPE html>, html ]</span></span></code></pre>\n<h5 id=\"scroll-to-top\">scroll to top</h5>\n<p>This snippet can be used to do a smooth scroll to the top of the current page.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">scrollToTop</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">c</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> document.documentElement.scrollTop </span><span style=\"color: #FF7B72\">||</span><span style=\"color: #C9D1D9\"> document.body.scrollTop</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (c </span><span style=\"color: #FF7B72\">></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    window.</span><span style=\"color: #D2A8FF\">requestAnimationFrame</span><span style=\"color: #C9D1D9\">(scrollToTop)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    window.</span><span style=\"color: #D2A8FF\">scrollTo</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, c </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> c </span><span style=\"color: #FF7B72\">/</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">8</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">scrollToTop</span><span style=\"color: #C9D1D9\">()</span></span></code></pre>\n<h5 id=\"serialize-cookie\">Serialize cookie</h5>\n<p>This snippet can be used to serialize a cookie name-value pair into a Set-Cookie header string.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">serializeCookie</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">name</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #A5D6FF\">`${</span><span style=\"color: #D2A8FF\">encodeURIComponent</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #C9D1D9\">name</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">}=${</span><span style=\"color: #D2A8FF\">encodeURIComponent</span><span style=\"color: #A5D6FF\">(</span><span style=\"color: #C9D1D9\">val</span><span style=\"color: #A5D6FF\">)</span><span style=\"color: #A5D6FF\">}`</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">serializeCookie</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'foo'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'bar'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// 'foo=bar'</span></span></code></pre>\n<h5 id=\"set-style\">Set style</h5>\n<p>This snippet can be used to set the value of a CSS rule for a particular element.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setStyle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">ruleName</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">val</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (el.style[ruleName] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> val)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">setStyle</span><span style=\"color: #C9D1D9\">(document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'p'</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #A5D6FF\">'font-size'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'20px'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// The first &#x3C;p> element on the page will have a font-size of 20px</span></span></code></pre>\n<h5 id=\"show\">Show</h5>\n<p>This snippet can be used to show all the elements specified.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">show</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">el].</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">e</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> (e.style.display </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">show</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">document.</span><span style=\"color: #D2A8FF\">querySelectorAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'img'</span><span style=\"color: #C9D1D9\">)) </span><span style=\"color: #8B949E\">// Shows all &#x3C;img> elements on the page</span></span></code></pre>\n<h5 id=\"smooth-scroll\">Smooth scroll</h5>\n<p>This snippet can be used to smoothly scroll the element on which it is called into the visible area of the browser window.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">smoothScroll</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">element</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(element).</span><span style=\"color: #D2A8FF\">scrollIntoView</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    behavior: </span><span style=\"color: #A5D6FF\">'smooth'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">smoothScroll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'#fooBar'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// scrolls smoothly to the element with the id fooBar</span></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">smoothScroll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'.fooBar'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// scrolls smoothly to the first element with a class of fooBar</span></span></code></pre>\n<h5 id=\"start-a-css-transition-with-js-fairly-synchronosly\">Start a css transition with js fairly synchronosly.</h5>\n<p>But watchout, the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\">web animation api</a> put this snippet in the legacy bin. Read my <a href=\"http://localhost:3000/blog/we-animation-API\">intro article</a>.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setTransitionStylesOnElement</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">element</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">startStyles</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">endStyles</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">resolve</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">(element.style, startStyles)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> Object.</span><span style=\"color: #D2A8FF\">assign</span><span style=\"color: #C9D1D9\">(element.style, endStyles), </span><span style=\"color: #79C0FF\">100</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    element.</span><span style=\"color: #D2A8FF\">addEventListener</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'transitionend'</span><span style=\"color: #C9D1D9\">, postAnimation)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">postAnimation</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      element.</span><span style=\"color: #D2A8FF\">removeEventListener</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'transitionend'</span><span style=\"color: #C9D1D9\">, postAnimation)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      marketsOverlay.</span><span style=\"color: #D2A8FF\">removeAttribute</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'style'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">resolve</span><span style=\"color: #C9D1D9\">(element)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Useage.</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">hiddenStyles</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { opacity: </span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">, transition: </span><span style=\"color: #A5D6FF\">'all 0.5s'</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">visibleStyles</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { opacity: </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">, transition: </span><span style=\"color: #A5D6FF\">'all 0.5s'</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">setStylesOnElement</span><span style=\"color: #C9D1D9\">(overlayElement, visibleStyles, hiddenStyles).</span><span style=\"color: #D2A8FF\">then</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">el</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  el.</span><span style=\"color: #D2A8FF\">setAttribute</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'hidden'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"lazy-loading-stylesheet-on-scroll\">Lazy-loading stylesheet on scroll</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">loadStyle</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">src</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (document.createStylesheet) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    document.</span><span style=\"color: #D2A8FF\">createStylesheet</span><span style=\"color: #C9D1D9\">(src)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">stylesheet</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> document.</span><span style=\"color: #D2A8FF\">createElement</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'link'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    stylesheet.href </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> src</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    stylesheet.type </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'text/css'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    stylesheet.rel </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'stylesheet'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    document.</span><span style=\"color: #D2A8FF\">getElementsByTagName</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'head'</span><span style=\"color: #C9D1D9\">)[</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">].</span><span style=\"color: #D2A8FF\">appendChild</span><span style=\"color: #C9D1D9\">(stylesheet)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> scrollFlag </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">false</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">window.</span><span style=\"color: #D2A8FF\">onscroll</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">scrollFlag) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Started Scrolling!'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">setTimeout</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">loadStyle</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'./style2.css'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }, </span><span style=\"color: #79C0FF\">1000</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    scrollFlag </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">true</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"mutation-observer-example\">Mutation observer example</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// Select the node that will be observed for mutations</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">targetNode</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> document.</span><span style=\"color: #D2A8FF\">getElementById</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'some-id'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Options for the observer (which mutations to observe)</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">config</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> { attributes: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">, childList: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">, subtree: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Callback function to execute when mutations are observed</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">callback</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">mutationsList</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">observer</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Use traditional 'for loops' for IE 11</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">for</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">mutation</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">of</span><span style=\"color: #C9D1D9\"> mutationsList) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (mutation.type </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'childList'</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'A child node has been added or removed.'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (mutation.type </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'attributes'</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'The '</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> mutation.attributeName </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">' attribute was modified.'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Create an observer instance linked to the callback function</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">observer</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">MutationObserver</span><span style=\"color: #C9D1D9\">(callback)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Start observing the target node for configured mutations</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">observer.</span><span style=\"color: #D2A8FF\">observe</span><span style=\"color: #C9D1D9\">(targetNode, config)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Later, you can stop observing</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">observer.</span><span style=\"color: #D2A8FF\">disconnect</span><span style=\"color: #C9D1D9\">()</span></span></code></pre>";

				const frontmatter$h = {"layout":"../../layouts/SnippetPost.astro","title":"Javascript interacting with the DOM","description":"Javascript date","pubDate":"Jan 7 2023"};
				const file$h = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-dom.md";
				const url$h = "/snippets/snippets-dom";
				function rawContent$f() {
					return "\n##### Bottom visible\n\nThis snippet checks whether the bottom of a page is visible.\n\n```javascript\nconst bottomVisible = () =>\n  document.documentElement.clientHeight + window.scrollY >=\n  (document.documentElement.scrollHeight ||\n    document.documentElement.clientHeight)\n\nbottomVisible() // true\n```\n\n##### Element contains\n\nThis snippet checks whether the parent element contains the child.\n\n```javascript\nconst elementContains = (parent, child) =>\n  parent !== child && parent.contains(child)\n\nelementContains(document.querySelector('head'), document.querySelector('title')) // true\nelementContains(document.querySelector('body'), document.querySelector('body')) // false\n```\n\n##### Get style\n\nThis snippet can be used to get the value of a CSS rule for a particular element.\n\n```javascript\nconst getStyle = (el, ruleName) => getComputedStyle(el)[ruleName]\n\ngetStyle(document.querySelector('p'), 'font-size') // '16px'\n```\n\n##### Hide\n\nThis snippet can be used to hide all elements specified.\n\n```javascript\nconst hide = (...el) => [...el].forEach((e) => (e.style.display = 'none'))\n\nhide(document.querySelectorAll('img')) // Hides all <img> elements on the page\n```\n\n##### Insert after\n\nThis snippet can be used to insert an HTML string after the end of a particular element.\n\n```javascript\nconst insertAfter = (el, htmlString) =>\n  el.insertAdjacentHTML('afterend', htmlString)\n\ninsertAfter(document.getElementById('myId'), '<p>after</p>') // <div id=\"myId\">...</div> <p>after</p>\n```\n\n##### Insert before\n\nThis snippet can be used to insert an HTML string before a particular element.\n\n```javascript\nconst insertBefore = (el, htmlString) =>\n  el.insertAdjacentHTML('beforebegin', htmlString)\n\ninsertBefore(document.getElementById('myId'), '<p>before</p>') // <p>before</p> <div id=\"myId\">...</div>\n```\n\n##### Is browser tab focused\n\nThis snippet can be used to determine whether the browser tab is focused.\n\n```javascript\nconst isBrowserTabFocused = () => !document.hidden\n\nisBrowserTabFocused() // true\n```\n\n##### Node list to array\n\nThis snippet can be used to convert a nodeList to an array.\n\n```javascript\nconst nodeListToArray = (nodeList) => [...nodeList]\n\nnodeListToArray(document.childNodes) // [ <!DOCTYPE html>, html ]\n```\n\n##### scroll to top\n\nThis snippet can be used to do a smooth scroll to the top of the current page.\n\n```javascript\nconst scrollToTop = () => {\n  const c = document.documentElement.scrollTop || document.body.scrollTop\n  if (c > 0) {\n    window.requestAnimationFrame(scrollToTop)\n    window.scrollTo(0, c - c / 8)\n  }\n}\n\nscrollToTop()\n```\n\n##### Serialize cookie\n\nThis snippet can be used to serialize a cookie name-value pair into a Set-Cookie header string.\n\n```javascript\nconst serializeCookie = (name, val) =>\n  `${encodeURIComponent(name)}=${encodeURIComponent(val)}`\n\nserializeCookie('foo', 'bar') // 'foo=bar'\n```\n\n##### Set style\n\nThis snippet can be used to set the value of a CSS rule for a particular element.\n\n```javascript\nconst setStyle = (el, ruleName, val) => (el.style[ruleName] = val)\n\nsetStyle(document.querySelector('p'), 'font-size', '20px')\n// The first <p> element on the page will have a font-size of 20px\n```\n\n##### Show\n\nThis snippet can be used to show all the elements specified.\n\n```javascript\nconst show = (...el) => [...el].forEach((e) => (e.style.display = ''))\n\nshow(...document.querySelectorAll('img')) // Shows all <img> elements on the page\n```\n\n##### Smooth scroll\n\nThis snippet can be used to smoothly scroll the element on which it is called into the visible area of the browser window.\n\n```javascript\nconst smoothScroll = (element) =>\n  document.querySelector(element).scrollIntoView({\n    behavior: 'smooth',\n  })\n\nsmoothScroll('#fooBar') // scrolls smoothly to the element with the id fooBar\nsmoothScroll('.fooBar') // scrolls smoothly to the first element with a class of fooBar\n```\n\n##### Start a css transition with js fairly synchronosly.\n\nBut watchout, the new [web animation api](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API) put this snippet in the legacy bin. Read my [intro article](http://localhost:3000/blog/we-animation-API).\n\n```javascript\nfunction setTransitionStylesOnElement(element, startStyles, endStyles) {\n  return new Promise((resolve) => {\n    Object.assign(element.style, startStyles)\n    setTimeout(() => Object.assign(element.style, endStyles), 100)\n    element.addEventListener('transitionend', postAnimation)\n    function postAnimation() {\n      element.removeEventListener('transitionend', postAnimation)\n      marketsOverlay.removeAttribute('style')\n      resolve(element)\n    }\n  })\n}\n// Useage.\nconst hiddenStyles = { opacity: 0, transition: 'all 0.5s' }\nconst visibleStyles = { opacity: 1, transition: 'all 0.5s' }\n\nsetStylesOnElement(overlayElement, visibleStyles, hiddenStyles).then((el) =>\n  el.setAttribute('hidden')\n)\n```\n\n##### Lazy-loading stylesheet on scroll\n\n```javascript\nconst loadStyle = (src) => {\n  if (document.createStylesheet) {\n    document.createStylesheet(src)\n  } else {\n    const stylesheet = document.createElement('link')\n    stylesheet.href = src\n    stylesheet.type = 'text/css'\n    stylesheet.rel = 'stylesheet'\n    document.getElementsByTagName('head')[0].appendChild(stylesheet)\n  }\n}\nlet scrollFlag = false\nwindow.onscroll = () => {\n  if (!scrollFlag) {\n    console.log('Started Scrolling!')\n    setTimeout(() => {\n      loadStyle('./style2.css')\n    }, 1000)\n    scrollFlag = true\n  }\n}\n```\n\n##### Mutation observer example\n\n```javascript\n// Select the node that will be observed for mutations\nconst targetNode = document.getElementById('some-id')\n\n// Options for the observer (which mutations to observe)\nconst config = { attributes: true, childList: true, subtree: true }\n\n// Callback function to execute when mutations are observed\nconst callback = function (mutationsList, observer) {\n  // Use traditional 'for loops' for IE 11\n  for (const mutation of mutationsList) {\n    if (mutation.type === 'childList') {\n      console.log('A child node has been added or removed.')\n    } else if (mutation.type === 'attributes') {\n      console.log('The ' + mutation.attributeName + ' attribute was modified.')\n    }\n  }\n}\n\n// Create an observer instance linked to the callback function\nconst observer = new MutationObserver(callback)\n\n// Start observing the target node for configured mutations\nobserver.observe(targetNode, config)\n\n// Later, you can stop observing\nobserver.disconnect()\n```\n";
				}
				function compiledContent$f() {
					return html$f;
				}
				function getHeadings$h() {
					return [{"depth":5,"slug":"bottom-visible","text":"Bottom visible"},{"depth":5,"slug":"element-contains","text":"Element contains"},{"depth":5,"slug":"get-style","text":"Get style"},{"depth":5,"slug":"hide","text":"Hide"},{"depth":5,"slug":"insert-after","text":"Insert after"},{"depth":5,"slug":"insert-before","text":"Insert before"},{"depth":5,"slug":"is-browser-tab-focused","text":"Is browser tab focused"},{"depth":5,"slug":"node-list-to-array","text":"Node list to array"},{"depth":5,"slug":"scroll-to-top","text":"scroll to top"},{"depth":5,"slug":"serialize-cookie","text":"Serialize cookie"},{"depth":5,"slug":"set-style","text":"Set style"},{"depth":5,"slug":"show","text":"Show"},{"depth":5,"slug":"smooth-scroll","text":"Smooth scroll"},{"depth":5,"slug":"start-a-css-transition-with-js-fairly-synchronosly","text":"Start a css transition with js fairly synchronosly."},{"depth":5,"slug":"lazy-loading-stylesheet-on-scroll","text":"Lazy-loading stylesheet on scroll"},{"depth":5,"slug":"mutation-observer-example","text":"Mutation observer example"}];
				}
				async function Content$h() {
					const { layout, ...content } = frontmatter$h;
					content.file = file$h;
					content.url = url$h;
					const contentFragment = createVNode(Fragment, { 'set:html': html$f });
					return createVNode($$SnippetPost, {
									file: file$h,
									url: url$h,
									content,
									frontmatter: content,
									headings: getHeadings$h(),
									rawContent: rawContent$f,
									compiledContent: compiledContent$f,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$h[Symbol.for('astro.needsHeadRendering')] = false;

const _page23 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$h,
  compiledContent: compiledContent$f,
  default: Content$h,
  file: file$h,
  frontmatter: frontmatter$h,
  getHeadings: getHeadings$h,
  rawContent: rawContent$f,
  url: url$h
}, Symbol.toStringTag, { value: 'Module' }));

const html$e = "<h4 id=\"restart-git-after-git-ingore-updated\">“Restart” git after git ingore updated</h4>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">  git rm -rf --cached </span><span style=\"color: #79C0FF\">.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  git add </span><span style=\"color: #79C0FF\">.</span></span></code></pre>\n<h4 id=\"visa-alla-brancher-som-innehåller-branch\">Visa alla brancher som innehåller branch</h4>\n<p><code>git branch --contains [branch/tag/commit]</code></p>\n<h2 id=\"rensa-upp\">Rensa upp</h2>\n<h4 id=\"rensa-locala-brancher-som-tagits-bort-på-remote\">Rensa locala brancher som tagits bort på remote</h4>\n<p><code>git fetch upstream --prune</code></p>\n<h4 id=\"rensa-remote-på-brancher-som-tagits-bort-lokalt\">Rensa remote på brancher som tagits bort lokalt</h4>\n<p><code>git remote prune origin --dry-run</code>\n<code>git remote prune origin</code></p>\n<h4 id=\"rensa-working-directory\">Rensa Working directory</h4>\n<p><code>git clean -i</code></p>\n<h4 id=\"undvik-uppdatera-stagade-filer\">Undvik uppdatera stagade filer</h4>\n<p><code>git checkout -- app/public/libs/flex_slider</code>\n<code>git clean -i</code></p>\n<h2 id=\"ångra\">Ångra</h2>\n<h4 id=\"ångra-commits\">Ångra commits</h4>\n<p><code>git reflog map-gui</code>\n<code>git reset --hard map-gui{4}</code>\n(Use —soft to copy changes from another branch)</p>\n<h4 id=\"ta-bort-modifikation-i-workdir\">Ta bort modifikation i workdir</h4>\n<p><code>git checkout -- [filnamn]</code></p>\n<h4 id=\"visa-filer-i-en-commit\">Visa filer i en commit</h4>\n<p><code>git show --numstat</code></p>\n<h4 id=\"flow\">Flow</h4>\n<p><code>git push -u origin dialog-styling</code>\n<code>git fetch upstream/dev-2.8</code>\n<code>git checkout -b upstream/dev-2.8 new_branch</code>\n<code>git diff upstream/release/3.1</code></p>\n<h4 id=\"create-branch\">Create branch</h4>\n<p><code>git fetch origin</code>\n<code>git checkout origin/main -b [new branch]</code></p>\n<h3 id=\"pull-branch-from-remote\">Pull branch from remote</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">git fetch origin</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git branch -v -a</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git switch -c </span><span style=\"color: #79C0FF\">test</span><span style=\"color: #C9D1D9\"> origin/test</span></span></code></pre>\n<p>(more info on switch ->) man git-switch</p>\n<p><em>prior to git 2.23</em></p>\n<p><code>git checkout --track origin/daves_branch</code></p>\n<h4 id=\"checkout-or-diff-between-two-branches-on-specific-file\">Checkout or diff between two branches on specific file</h4>\n<p><code>git diff [branch1] [branch2] -- [filepath]</code></p>\n<h4 id=\"update-submodule\">Update submodule</h4>\n<p><code>git submodule update</code></p>\n<h4 id=\"uppdatera-master\">Uppdatera master</h4>\n<p><code>git fetch --all</code>\n<code>git checkout main</code>\n<code>git pull origin main</code></p>\n<h4 id=\"flytta-master-downstream-framåt\">Flytta master downstream (framåt)</h4>\n<p><code>git checkout [branch mest upstream (bak)]</code>\n<code>git merge [downstream branch] --ff-only</code></p>\n<h4 id=\"flytta-lokal-master-upstream\">Flytta lokal master upstream</h4>\n<p><code>git reset --hard origin/master</code></p>\n<h4 id=\"uppdatera-origin\">Uppdatera origin</h4>\n<p><code>git pull upstream master</code>\n<code>git push origin master (-f)</code>\n<code>git fetch --prune upstream</code></p>\n<h4 id=\"rename-local--remote-branches\">Rename local &#x26; remote branches</h4>\n<p><code>git branch -m old-name new-name</code>\n<code>git push origin :old-name new-name</code></p>\n<h4 id=\"reset-upstream-branch-for-the-new-name\">reset upstream branch for the new-name</h4>\n<p><code>git push origin -u new-name</code></p>\n<h4 id=\"squash-merge-commit\">Squash merge commit</h4>\n<p><code>git checkout master</code>\n<code>git merge --squash bugfix</code>\n<code>git commit</code></p>\n<h4 id=\"squash-rebase\">Squash rebase</h4>\n<p><code>git rebase -i HEAD~4</code></p>\n<h4 id=\"squash-all-your-commits-in-your-branch-and-reset-the-index-to-maincode\">Squash all your commits (in your branch) and reset the index to maincode</h4>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">git checkout yourBranch</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git reset </span><span style=\"color: #A5D6FF\">$(git merge-base master $(git rev-parse --abbrev-ref HEAD))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git add -A</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git commit -m </span><span style=\"color: #A5D6FF\">\"one commit on yourBranch\"</span></span></code></pre>\n<h4 id=\"search-in-commits\">Search in commits</h4>\n<p><code>git log -S [search string]</code></p>\n<h4 id=\"titta-gammal-kod\">Titta gammal kod</h4>\n<p><code>git show [branch]:[fill]>temp.txt</code></p>\n<h4 id=\"add-remote-upstream\">Add remote upstream</h4>\n<p><code>git remote &#x3C;- check</code>\n<code>git remote -v</code>\n<code>git remote add upstream [clone repo from github]</code>\n<code>git fetch upstream</code></p>\n<h4 id=\"tag\">Tag</h4>\n<p><code>add: git tag -f [tagname]</code>\n<code>delete: git push upstream :[tagname]</code>\n<code>push: git push (-f) upstream [tagname]</code></p>\n<h4 id=\"update-from-upstreammaster\">Update from upstream/master</h4>\n<p><code>git reset --hard upstream/master</code></p>\n<h4 id=\"ångra-rebase-ej-pushad\">Ångra rebase (ej pushad)</h4>\n<p><code>git checkout [branch som ska flyttas]</code>\n<code>git reset [origin/branch] --hard</code></p>\n<h4 id=\"go-back-in-history\">Go back in history</h4>\n<p><code>git reflog HEAD@{2}</code>\n<code>git reset HEAD --hard</code></p>\n<h4 id=\"flytta-flera-commits-i-grupp\">Flytta flera commits i grupp</h4>\n<p><code>git rebase [branch1] [branch2] --onto [branch att flytta ovanpå]</code></p>\n<h4 id=\"checka-ut-branch\">Checka ut branch</h4>\n<p><code>git checkout -b [branch name] upstream/[branch name]</code></p>\n<h4 id=\"delete-branch-on-remote\">Delete branch on remote</h4>\n<p><code>git push upstream :[branch]</code>\n<code>git push upstream --delete [branch]</code></p>\n<h4 id=\"push-branch-and-delete-local\">Push branch and delete local</h4>\n<p><code>git push upstream [branch] -d</code></p>\n<h4 id=\"undo-reset-hard\">Undo reset —hard</h4>\n<p>Only the changes to branch and HEAD can be undone, this way</p>\n<p><code>git reset --hard &#x3C;expr> # do</code>\n<code>git reset HEAD@{1} #undo</code>\n<code>git stash</code></p>\n<p>If you made lot of things after your git reset —hard, then you should search your commit using reflog</p>\n<h4 id=\"git-reflog-for-head\">git reflog for HEAD</h4>\n<p><code>git reflog</code></p>\n<h4 id=\"git-reflog-for-any-branch\">git reflog for any branch</h4>\n<p><code>git reflog &#x3C;branchname></code></p>\n<h4 id=\"find-the-commit-sha-and-use-it-on-git-reset\">Find the commit sha, and use it on git reset</h4>\n<p><code>git reset &#x3C;SHA></code>\n<code>git stash</code></p>\n<h4 id=\"commit-empty-commits\">Commit empty commits</h4>\n<p><code>git commit --allow-empty -m \"This is empty\"</code></p>\n<h4 id=\"automate-the-cleanup-of-my-feature-branch-with-git-autosquash\">Automate the cleanup of my feature branch with Git Autosquash</h4>\n<p><code>git commit --fixup [sha of commit to merge with later]</code></p>\n<h4 id=\"more-commits-instead-of-giving-sha-do-search-of-where-word-is-in-comit-msg\">more commits, instead of giving sha do search of where [word] is in comit msg</h4>\n<p><code>git commit --fixup :/update &#x3C;- if update is a word in your merge target cmt msg.</code></p>\n<h2 id=\"finally\">Finally</h2>\n<p><code>git commit --fixup :/update</code>\n<code>git rebase -i --autosquash [sha that covers some commits]</code></p>\n<h2 id=\"vim\">VIM</h2>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">i = insert mode</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">esc = gå ur insert mode</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">:x = spara och stäng</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">:q = stäng</span></span></code></pre>\n<h2 id=\"terminal\">Terminal</h2>\n<h4 id=\"list-and-kill-process\">List and kill process</h4>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">lsof -i :[port number] // replace with port number.</span></span>\n<span class=\"line\"><span style=\"color: #79C0FF\">kill</span><span style=\"color: #C9D1D9\"> [pid]             // replace with process id.</span></span></code></pre>\n<h4 id=\"clear-screen-and-back-buffer\">Clear screen and back buffer</h4>\n<p><code>clear &#x26;&#x26; echo -en \"\\e[3J\"</code></p>\n<p>or store in a alias</p>\n<p><code>alias cls='clear &#x26;&#x26; echo -en \"\\e[3J\"'</code></p>\n<h4 id=\"list-your-aliases\">List your aliases</h4>\n<p><code>git config --get-regexp alias</code></p>\n<p>My current aliases:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">alias.lg log --color --graph --pretty=format:</span><span style=\"color: #A5D6FF\">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&#x3C;%an>%Creset'</span><span style=\"color: #C9D1D9\"> --abbrev-commit</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">alias.next checkout</span></span></code></pre>\n<h4 id=\"partial-cherry-pick\">Partial cherry-pick</h4>\n<p>Credits to <a href=\"https://stackoverflow.com/a/5717615/7193150\">https://stackoverflow.com/a/5717615/7193150</a></p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">git cherry-pick -n $1</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git reset HEAD</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git add src/</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git checkout </span><span style=\"color: #79C0FF\">.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">git commit -C $1</span></span></code></pre>\n<h4 id=\"list-unused-typescript-exports\">List unused typescript exports</h4>\n<p><code>npx ts-prune | grep -v 'used in module'</code></p>\n<h4 id=\"delete-node_modules-recursively-in-workdirectory-not-git\">Delete node_modules recursively in workdirectory (not git)</h4>\n<p>Print out a list of directories to be deleted:</p>\n<p><code>find . -name 'node_modules' -type d -prune</code></p>\n<p>Delete directories from the current working directory</p>\n<p><code>find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +</code></p>";

				const frontmatter$g = {"layout":"../../layouts/SnippetPost.astro","title":"Git stuff","description":"Usefull git commands","pubDate":"Jan 6 2023"};
				const file$g = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/snippets-git.md";
				const url$g = "/snippets/snippets-git";
				function rawContent$e() {
					return "\n#### \"Restart\" git after git ingore updated\n\n```bash\n  git rm -rf --cached .\n  git add .\n```\n\n#### Visa alla brancher som innehåller branch\n\n`git branch --contains [branch/tag/commit]`\n\n## Rensa upp\n\n#### Rensa locala brancher som tagits bort på remote\n\n`git fetch upstream --prune`\n\n#### Rensa remote på brancher som tagits bort lokalt\n\n`git remote prune origin --dry-run`\n`git remote prune origin`\n\n#### Rensa Working directory\n\n`git clean -i`\n\n#### Undvik uppdatera stagade filer\n\n`git checkout -- app/public/libs/flex_slider`\n`git clean -i`\n\n## Ångra\n\n#### Ångra commits\n\n`git reflog map-gui`\n`git reset --hard map-gui{4}`\n(Use --soft to copy changes from another branch)\n\n#### Ta bort modifikation i workdir\n\n`git checkout -- [filnamn]`\n\n#### Visa filer i en commit\n\n`git show --numstat`\n\n#### Flow\n\n`git push -u origin dialog-styling`\n`git fetch upstream/dev-2.8`\n`git checkout -b upstream/dev-2.8 new_branch`\n`git diff upstream/release/3.1`\n\n#### Create branch\n\n`git fetch origin`\n`git checkout origin/main -b [new branch]`\n\n### Pull branch from remote\n\n```bash\ngit fetch origin\ngit branch -v -a\ngit switch -c test origin/test\n```\n\n(more info on switch ->) man git-switch\n\n_prior to git 2.23_\n\n`git checkout --track origin/daves_branch`\n\n#### Checkout or diff between two branches on specific file\n\n`git diff [branch1] [branch2] -- [filepath]`\n\n#### Update submodule\n\n`git submodule update`\n\n#### Uppdatera master\n\n`git fetch --all`\n`git checkout main`\n`git pull origin main`\n\n#### Flytta master downstream (framåt)\n\n`git checkout [branch mest upstream (bak)]`\n`git merge [downstream branch] --ff-only`\n\n#### Flytta lokal master upstream\n\n`git reset --hard origin/master`\n\n#### Uppdatera origin\n\n`git pull upstream master`\n`git push origin master (-f)`\n`git fetch --prune upstream`\n\n#### Rename local & remote branches\n\n`git branch -m old-name new-name`\n`git push origin :old-name new-name`\n\n#### reset upstream branch for the new-name\n\n`git push origin -u new-name`\n\n#### Squash merge commit\n\n`git checkout master`\n`git merge --squash bugfix`\n`git commit`\n\n#### Squash rebase\n\n`git rebase -i HEAD~4`\n\n#### Squash all your commits (in your branch) and reset the index to maincode\n\n```bash\ngit checkout yourBranch\ngit reset $(git merge-base master $(git rev-parse --abbrev-ref HEAD))\ngit add -A\ngit commit -m \"one commit on yourBranch\"\n```\n\n#### Search in commits\n\n`git log -S [search string]`\n\n#### Titta gammal kod\n\n`git show [branch]:[fill]>temp.txt`\n\n#### Add remote upstream\n\n`git remote <- check`\n`git remote -v`\n`git remote add upstream [clone repo from github]`\n`git fetch upstream`\n\n#### Tag\n\n`add: git tag -f [tagname]`\n`delete: git push upstream :[tagname]`\n`push: git push (-f) upstream [tagname]`\n\n#### Update from upstream/master\n\n`git reset --hard upstream/master`\n\n#### Ångra rebase (ej pushad)\n\n`git checkout [branch som ska flyttas]`\n`git reset [origin/branch] --hard`\n\n#### Go back in history\n\n`git reflog HEAD@{2}`\n`git reset HEAD --hard`\n\n#### Flytta flera commits i grupp\n\n`git rebase [branch1] [branch2] --onto [branch att flytta ovanpå]`\n\n#### Checka ut branch\n\n`git checkout -b [branch name] upstream/[branch name]`\n\n#### Delete branch on remote\n\n`git push upstream :[branch]`\n`git push upstream --delete [branch]`\n\n#### Push branch and delete local\n\n`git push upstream [branch] -d`\n\n#### Undo reset --hard\n\nOnly the changes to branch and HEAD can be undone, this way\n\n`git reset --hard <expr> # do`\n`git reset HEAD@{1} #undo`\n`git stash`\n\nIf you made lot of things after your git reset --hard, then you should search your commit using reflog\n\n#### git reflog for HEAD\n\n`git reflog`\n\n#### git reflog for any branch\n\n`git reflog <branchname>`\n\n#### Find the commit sha, and use it on git reset\n\n`git reset <SHA>`\n`git stash`\n\n#### Commit empty commits\n\n`git commit --allow-empty -m \"This is empty\"`\n\n#### Automate the cleanup of my feature branch with Git Autosquash\n\n`git commit --fixup [sha of commit to merge with later]`\n\n#### more commits, instead of giving sha do search of where [word] is in comit msg\n\n`git commit --fixup :/update <- if update is a word in your merge target cmt msg.`\n\n## Finally\n\n`git commit --fixup :/update`\n`git rebase -i --autosquash [sha that covers some commits]`\n\n## VIM\n\n```text\ni = insert mode\nesc = gå ur insert mode\n:x = spara och stäng\n:q = stäng\n```\n\n## Terminal\n\n#### List and kill process\n\n```bash\nlsof -i :[port number] // replace with port number.\nkill [pid]             // replace with process id.\n```\n\n#### Clear screen and back buffer\n\n`clear && echo -en \"\\e[3J\"`\n\nor store in a alias\n\n`alias cls='clear && echo -en \"\\e[3J\"'`\n\n#### List your aliases\n\n`git config --get-regexp alias`\n\nMy current aliases:\n\n```bash\nalias.lg log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\nalias.next checkout\n```\n\n#### Partial cherry-pick\n\nCredits to <https://stackoverflow.com/a/5717615/7193150>\n\n```bash\ngit cherry-pick -n $1\ngit reset HEAD\ngit add src/\ngit checkout .\ngit commit -C $1\n```\n\n#### List unused typescript exports\n\n`npx ts-prune | grep -v 'used in module'`\n\n#### Delete node_modules recursively in workdirectory (not git)\n\nPrint out a list of directories to be deleted:\n\n`find . -name 'node_modules' -type d -prune`\n\nDelete directories from the current working directory\n\n`find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +`\n";
				}
				function compiledContent$e() {
					return html$e;
				}
				function getHeadings$g() {
					return [{"depth":4,"slug":"restart-git-after-git-ingore-updated","text":"“Restart” git after git ingore updated"},{"depth":4,"slug":"visa-alla-brancher-som-innehåller-branch","text":"Visa alla brancher som innehåller branch"},{"depth":2,"slug":"rensa-upp","text":"Rensa upp"},{"depth":4,"slug":"rensa-locala-brancher-som-tagits-bort-på-remote","text":"Rensa locala brancher som tagits bort på remote"},{"depth":4,"slug":"rensa-remote-på-brancher-som-tagits-bort-lokalt","text":"Rensa remote på brancher som tagits bort lokalt"},{"depth":4,"slug":"rensa-working-directory","text":"Rensa Working directory"},{"depth":4,"slug":"undvik-uppdatera-stagade-filer","text":"Undvik uppdatera stagade filer"},{"depth":2,"slug":"ångra","text":"Ångra"},{"depth":4,"slug":"ångra-commits","text":"Ångra commits"},{"depth":4,"slug":"ta-bort-modifikation-i-workdir","text":"Ta bort modifikation i workdir"},{"depth":4,"slug":"visa-filer-i-en-commit","text":"Visa filer i en commit"},{"depth":4,"slug":"flow","text":"Flow"},{"depth":4,"slug":"create-branch","text":"Create branch"},{"depth":3,"slug":"pull-branch-from-remote","text":"Pull branch from remote"},{"depth":4,"slug":"checkout-or-diff-between-two-branches-on-specific-file","text":"Checkout or diff between two branches on specific file"},{"depth":4,"slug":"update-submodule","text":"Update submodule"},{"depth":4,"slug":"uppdatera-master","text":"Uppdatera master"},{"depth":4,"slug":"flytta-master-downstream-framåt","text":"Flytta master downstream (framåt)"},{"depth":4,"slug":"flytta-lokal-master-upstream","text":"Flytta lokal master upstream"},{"depth":4,"slug":"uppdatera-origin","text":"Uppdatera origin"},{"depth":4,"slug":"rename-local--remote-branches","text":"Rename local & remote branches"},{"depth":4,"slug":"reset-upstream-branch-for-the-new-name","text":"reset upstream branch for the new-name"},{"depth":4,"slug":"squash-merge-commit","text":"Squash merge commit"},{"depth":4,"slug":"squash-rebase","text":"Squash rebase"},{"depth":4,"slug":"squash-all-your-commits-in-your-branch-and-reset-the-index-to-maincode","text":"Squash all your commits (in your branch) and reset the index to maincode"},{"depth":4,"slug":"search-in-commits","text":"Search in commits"},{"depth":4,"slug":"titta-gammal-kod","text":"Titta gammal kod"},{"depth":4,"slug":"add-remote-upstream","text":"Add remote upstream"},{"depth":4,"slug":"tag","text":"Tag"},{"depth":4,"slug":"update-from-upstreammaster","text":"Update from upstream/master"},{"depth":4,"slug":"ångra-rebase-ej-pushad","text":"Ångra rebase (ej pushad)"},{"depth":4,"slug":"go-back-in-history","text":"Go back in history"},{"depth":4,"slug":"flytta-flera-commits-i-grupp","text":"Flytta flera commits i grupp"},{"depth":4,"slug":"checka-ut-branch","text":"Checka ut branch"},{"depth":4,"slug":"delete-branch-on-remote","text":"Delete branch on remote"},{"depth":4,"slug":"push-branch-and-delete-local","text":"Push branch and delete local"},{"depth":4,"slug":"undo-reset-hard","text":"Undo reset —hard"},{"depth":4,"slug":"git-reflog-for-head","text":"git reflog for HEAD"},{"depth":4,"slug":"git-reflog-for-any-branch","text":"git reflog for any branch"},{"depth":4,"slug":"find-the-commit-sha-and-use-it-on-git-reset","text":"Find the commit sha, and use it on git reset"},{"depth":4,"slug":"commit-empty-commits","text":"Commit empty commits"},{"depth":4,"slug":"automate-the-cleanup-of-my-feature-branch-with-git-autosquash","text":"Automate the cleanup of my feature branch with Git Autosquash"},{"depth":4,"slug":"more-commits-instead-of-giving-sha-do-search-of-where-word-is-in-comit-msg","text":"more commits, instead of giving sha do search of where [word] is in comit msg"},{"depth":2,"slug":"finally","text":"Finally"},{"depth":2,"slug":"vim","text":"VIM"},{"depth":2,"slug":"terminal","text":"Terminal"},{"depth":4,"slug":"list-and-kill-process","text":"List and kill process"},{"depth":4,"slug":"clear-screen-and-back-buffer","text":"Clear screen and back buffer"},{"depth":4,"slug":"list-your-aliases","text":"List your aliases"},{"depth":4,"slug":"partial-cherry-pick","text":"Partial cherry-pick"},{"depth":4,"slug":"list-unused-typescript-exports","text":"List unused typescript exports"},{"depth":4,"slug":"delete-node_modules-recursively-in-workdirectory-not-git","text":"Delete node_modules recursively in workdirectory (not git)"}];
				}
				async function Content$g() {
					const { layout, ...content } = frontmatter$g;
					content.file = file$g;
					content.url = url$g;
					const contentFragment = createVNode(Fragment, { 'set:html': html$e });
					return createVNode($$SnippetPost, {
									file: file$g,
									url: url$g,
									content,
									frontmatter: content,
									headings: getHeadings$g(),
									rawContent: rawContent$e,
									compiledContent: compiledContent$e,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$g[Symbol.for('astro.needsHeadRendering')] = false;

const _page24 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$g,
  compiledContent: compiledContent$e,
  default: Content$g,
  file: file$g,
  frontmatter: frontmatter$g,
  getHeadings: getHeadings$g,
  rawContent: rawContent$e,
  url: url$g
}, Symbol.toStringTag, { value: 'Module' }));

const html$d = "<h4 id=\"micro-frontends\">Micro frontends</h4>\n<p><em>2019-06-18 01:363</em> <a href=\"https://martinfowler.com/articles/micro-frontends.html\">https://martinfowler.com/articles/micro-frontends.html</a> TL;DR In short, micro frontends are all about slicing up big and scary things into smaller, more manageable pieces.</p>\n<p><em>2019-07-11 07:56</em> It is not an ideal state to have many front-end frameworks within the company but it is a way to transition to a more homogenic front-end situation. <a href=\"https://link.medium.com/qF4AICBdeY\">Medium article</a></p>\n<p><em>2019-11-30 15:37</em> THIS is a very interesting way of including different frameworks into each other. At 13:50 [<a href=\"https://youtu.be/o1Sr39DVdOQ\">https://youtu.be/o1Sr39DVdOQ</a>] extra interesting in conjunction with the open-wc project.\n<em>2019-12-05 16:59</em> Embedding a react SPA in a Web Component <a href=\"https://medium.com/@gilfink/wrapping-react-components-inside-custom-elements-97431d1155bd\">https://medium.com/@gilfink/wrapping-react-components-inside-custom-elements-97431d1155bd</a> to be used in another framework.</p>\n<p>In depth about micro frontends architechture <a href=\"https://lucamezzalira.com/\">https://lucamezzalira.com/</a></p>\n<p><em>2020-05-23 09:41</em> Whenever we need to take our micro frontend situation to the next level. <a href=\"https://link.medium.com/4JOfwA7tI6\">https://link.medium.com/4JOfwA7tI6</a></p>\n<p><em>2020-07-01 22:50</em> Micro frontends in retrospect <a href=\"https://link.medium.com/tUh7ieT7L7\">Medium article</a></p>\n<h4 id=\"redux\">Redux</h4>\n<p><em>2019-06-20 11:33</em> As mentioned in a private conversation, a new way of connecting react components to redux that is less verbose. Right now in react-redux release candidate. <a href=\"https://youtu.be/3zoIigieur0\">https://youtu.be/3zoIigieur0</a> This looks promising.</p>\n<p><em>2019-07-10 01:41</em> And BOOM! Version 7.1 of React-Redux is officially released. (7.1 uses React hooks to connect to Redux store that I in previous examples got from a alpha release candidate.) More info and a timeline travel through some previous versions here <a href=\"https://youtu.be/zNs-phgKx3Q\">https://youtu.be/zNs-phgKx3Q</a> by a Redux dev person.</p>\n<p><em>2019-08-29 23:14</em> Removing boilerplate code around Redux can’t be bad. <a href=\"https://link.medium.com/JQIZvN6ByZ\">https://link.medium.com/JQIZvN6ByZ</a></p>\n<p><em>2019-08-30 09:30</em> Getting started with Redux-Saga <a href=\"https://medium.com/@lavitr01051977/make-your-first-call-to-api-using-redux-saga-15aa995df5b6\">Medium article</a></p>\n<p><em>2019-08-30 09:31</em> React Router with Redux <a href=\"https://medium.com/@lavitr01051977/react-router-redux-app-with-call-to-api-70a324c34ecb\">Medium article</a>\n<em>2019-10-31 08:52</em> Above is yesterdays news. Today this is how to do it. <a href=\"https://www.youtube.com/watch?v=CZeulkp1ClA\">https://www.youtube.com/watch?v=CZeulkp1ClA</a> with React Router v5.</p>\n<p><em>2019-11-03 22:09</em> This is a comendable project <a href=\"https://redux-starter-kit.js.org\">redux-starter-kit</a> that I wont use for two reasons. 1 - IMO it does create a lot of stuff for you that you will not understand unless you go through the pain of both discover the need for or get to know because you’ve done all the wiring by yourself. 2 - It is opinionated and not necessarily the way I prefer to set it up. However I will look into it some more because it also has some off the shelf utility functions I have not seen before.</p>\n<p><em>2019-11-03 22:18</em> This “getting started with Redux” has one of the best instructions I think on how to wire up Redux Saga and get started. Unfortunately the rest is class based React and thus a bit out of fashion but if one only focus on the non-react parts it has some golden nuggets apart from Sagas aswell. <a href=\"https://www.valentinog.com/blog/redux/\">https://www.valentinog.com/blog/redux/</a>\n<em>Note to self: The way action creators/action types are set up is the same as in SCadmin and this will come in handy in the upcomming React project.</em></p>\n<p><em>2019-11-27 11:03</em> [Mixing redux with typescript] A bit outdated (from january 2019) but does have the redux part nicely layed out with typescript. <a href=\"https://medium.com/@ksholla20/react-redux-with-typescript-ad7266896a9b\">https://medium.com/@ksholla20/react-redux-with-typescript-ad7266896a9b</a></p>\n<p><em>2019-11-28 09:24</em> Usefull Redux Thunks tips and tricks. <a href=\"https://youtu.be/xihoZZU0gao\">https://youtu.be/xihoZZU0gao</a></p>\n<p><em>2020-07-13 09:33</em> <a href=\"https://link.medium.com/ywMsgHQ747\">Is Recoil the new shiny thing that replaces Redux?</a></p>\n<h4 id=\"configurator\">Configurator</h4>\n<p><em>2019-07-09 15:40</em> <a href=\"https://link.medium.com/SdBxX0zrbY\">Article about building a configurator</a>.</p>\n<h4 id=\"styled-components\">Styled Components</h4>\n<p><em>2019-08-22 15:24</em> If Styled Components is a keeper then <a href=\"https://github.com/styled-components/babel-plugin-styled-components\">https://github.com/styled-components/babel-plugin-styled-components</a> is a thing to add to my React boilerplate for larger apps. Easier debugging of Styled Components.</p>\n<h4 id=\"docker\">Docker</h4>\n<p><em>019-08-29 23:12</em> This is above my head but never the less interesting… <a href=\"https://youtu.be/Td7w0_nD5_4\">Youtube</a></p>\n<h4 id=\"optimizations\">Optimizations</h4>\n<p><em>2019-09-14 20:58</em> <a href=\"https://www.youtube.com/watch?v=eDd6Y6Z50Mg\">Optimization by planing when to load scripts</a></p>\n<p><em>2019-10-15 10:00</em> <a href=\"https://medium.com/@devspotlight/best-practices-for-client-side-logging-and-error-handling-in-react-log-analysis-log-monitoring-531fea4a5fae\">Error Logging Frontend js errors back to server</a></p>\n<p><em>2019-10-26 09:16</em> <a href=\"https://medium.com/javascript-in-plain-english/how-to-handle-and-design-the-startup-of-a-react-application-da779f3727e5\">An article about doing a controlled startup of a web app the same as we aspire to do. Need to evaluate it</a></p>\n<p><em>2019-10-31 09:36</em> Remember the differences android and ios measures window height in respect to the keyboard was a headache when I was doing the mobile version of the current configurator. <a href=\"https://twitter.com/jesper_vos/status/1179673256925814785?s=09\">Now it seems there is a native solution</a>.\n(I had to store the viewport height upon onload as an attribute or css style on mobile and lock it to that)</p>\n<p><em>2019-11-30 02:23</em> <a href=\"https://www.youtube.com/watch?v=1gEoOuixsYs\">Faster JSON!</a></p>\n<p><em>2019-11-30 09:07</em> <a href=\"https://medium.com/javascript-in-plain-english/how-to-handle-and-design-the-startup-of-a-react-application-da779f3727e5\">App startup orchestration</a></p>\n<h4 id=\"css-libraries\">CSS Libraries</h4>\n<p><em>2019-10-07 15:49</em> Semantic-UI: A jQuery free alternative to Bootstrap. With a React specific fork <a href=\"https://react.semantic-ui.com/\">https://react.semantic-ui.com/</a></p>\n<h4 id=\"ux\">UX</h4>\n<p><em>2019-10-19 10:11</em> Talking about microcopy would be a useful thing to involve Scania in. Talking points: when to use Scania corporate tone and when to use a more casual and emphatic voice, users emotional journey, how this works with translations. <a href=\"https://medium.com/swlh/my-6-point-microcopy-checklist-for-non-ux-writers-634eb52b29c9\">https://medium.com/swlh/my-6-point-microcopy-checklist-for-non-ux-writers-634eb52b29c9</a></p>\n<p><em>2019-10-23 08:53</em> Microanimations/transitions might be more programmatically readable with this libraries than plain css. <a href=\"https://reactcommunity.org/react-transition-group/\">https://reactcommunity.org/react-transition-group/</a></p>\n<p><em>2019-10-31 13:18</em> All web apps made to mimic native apps should lock screen orientation down and just use it as a feature when it has something extra to offer. <a href=\"https://code-boxx.com/lock-screen-orientation/\">https://code-boxx.com/lock-screen-orientation/</a></p>\n<p><em>2020-01-13 21:58</em> Finally a css solution to :hover on touch screens <a href=\"https://link.medium.com/QPKG4ORYd3\">https://link.medium.com/QPKG4ORYd3</a></p>\n<h4 id=\"react\">React</h4>\n<p><em>2019-10-19 00:26</em> <strong>Capturing gestures</strong> won’t happen by itself. We need a library. This is a pretty lowlevel library. Will probably need to look further. <a href=\"https://dev.to/bmcmahen/building-react-components-with-gesture-support-3nn8\">https://dev.to/bmcmahen/building-react-components-with-gesture-support-3nn8</a></p>\n<p><em>2019-10-07 15:15</em> Cute <strong>micro-animation library</strong> <a href=\"https://react.useanimations.com/\">https://react.useanimations.com/</a></p>\n<p><em>2019-11-01 14:54</em> <strong>Sharing React components</strong> seems to be perhaps even more user frendly than reusing Polymer components using <a href=\"https://bit.dev/\">https://bit.dev/</a></p>\n<p><em>2019-11-03 23:02</em> <strong>Axios</strong> has been the goto alternative to the native javascript fetch. Now comes this little library and it looks really sexy out of the box <a href=\"https://swr.now.sh/\">https://swr.now.sh/</a></p>\n<p><em>2019-10-06 08:07</em> This will come in handy. <strong>useBreakpoint hook</strong> - media query breakpoints in react. <a href=\"https://link.medium.com/PyNjAQDDy0\">https://link.medium.com/PyNjAQDDy0</a>\nThe spinn-off js-in-css library to Styled Components called Polished.js also handles breakpoints. Polished.js works well in combo with Styled Components. <a href=\"https://polished.js.org/\">https://polished.js.org/</a>\nMedia query function set up in plain js with styled-components <a href=\"https://medium.com/@samuelresua/easy-media-queries-in-styled-components-690b78f50053\">https://medium.com/@samuelresua/easy-media-queries-in-styled-components-690b78f50053</a>\nUpdate to first link <a href=\"https://medium.com/better-programming/how-to-use-media-queries-programmatically-in-react-4d6562c3bc97\">https://medium.com/better-programming/how-to-use-media-queries-programmatically-in-react-4d6562c3bc97</a></p>\n<p><em>2019-09-02 18:01</em> Article describes a way to use multiple projects under the same url:\n<a href=\"https://link.medium.com/n6c43G8SEZ\">https://link.medium.com/n6c43G8SEZ</a></p>\n<p><em>2019-11-16 12:22</em> Not even forms are straight forward in React. So there are libraries for that like <a href=\"https://medium.com/better-programming/build-the-next-generation-of-forms-with-react-hooks-forms-b4f2039e51c1\">https://medium.com/better-programming/build-the-next-generation-of-forms-with-react-hooks-forms-b4f2039e51c1</a> or Formik2 or Redux Forms\nFormik <a href=\"https://github.com/jaredpalmer/formik/releases/tag/v2.0.1\">https://github.com/jaredpalmer/formik/releases/tag/v2.0.1</a></p>\n<p><em>2019-11-03 22:34</em> The react hooks way to detect click outside <a href=\"https://codesandbox.io/s/9o3lw5792w\">https://codesandbox.io/s/9o3lw5792w</a>\nMore <a href=\"https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-with-react-hook-ba77c37c7e82\">https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-with-react-hook-ba77c37c7e82</a></p>\n<p><em>2020-01-24 20:53</em> A few potentially useful React tips here <a href=\"https://link.medium.com/FlTaGD49v3\">https://link.medium.com/FlTaGD49v3</a></p>\n<p><em>2020-07-29 19:25</em> Webpack 5/React will adress some micro frontend issues. <a href=\"https://link.medium.com/GSi09Mvmw8\">https://link.medium.com/GSi09Mvmw8</a></p>\n<h4 id=\"animations\">Animations</h4>\n<p><em>2019-11-03 23:41</em> Super interesting talk about <strong>animation</strong> in webb apps on mobile (vs desktop) <a href=\"https://www.youtube.com/watch?v=JDDxR1a15Yo&#x26;feature=youtu.be&#x26;t=10664\">https://www.youtube.com/watch?v=JDDxR1a15Yo&#x26;feature=youtu.be&#x26;t=10664</a></p>\n<p><em>2019-11-12 08:59</em> The slider component that needs to work with both gestures and on desktop with super smooth animations probably is going to cost us a lot of developing hours. CSS to the rescue! scroll-snap seems to have full support for all browsers we care about <a href=\"https://caniuse.com/#search=scroll-snap\">https://caniuse.com/#search=scroll-snap</a>\nIf scroll-snap fails on us this is a good starting point for doing the same in JS/React. <a href=\"https://www.youtube.com/watch?v=3ax9TW2c2bY&#x26;list=LLuVFSB0bbZK_B3dciRnBBfw&#x26;index=41&#x26;t=1008s\">Youtube</a>\n<a href=\"https://medium.com/dailyjs/horizontal-scroll-animation-fc39ae43cbe5\">More alernate starting points if scroll-snap fails</a></p>\n<h4 id=\"testing\">Testing</h4>\n<p><em>2019-11-12 23:51</em> Make <strong>Jest</strong> also test Styled-Components <a href=\"https://github.com/styled-components/jest-styled-components\">https://github.com/styled-components/jest-styled-components</a></p>\n<p><em>2019-11-21 19:53</em> A good primer for automated tests with Jest an Enzyme <a href=\"https://link.medium.com/BAaUIuWRN1\">https://link.medium.com/BAaUIuWRN1</a></p>\n<h4 id=\"web-components\">Web components</h4>\n<p>Polymer without build tools, just <strong>native web components</strong> <a href=\"https://stackblitz.com/edit/open-wc-lit-demos?file=01-basic%2F01-basic-setup.js\">https://stackblitz.com/edit/open-wc-lit-demos?file=01-basic%2F01-basic-setup.js</a></p>\n<h4 id=\"analytics\">Analytics</h4>\n<p><em>2019-11-16 18:00</em> Analytics tool <a href=\"https://www.hotjar.com/?utm_source=SyndicateAds&#x26;utm_medium=display&#x26;utm_campaign=NativeCPC&#x26;utm_content=8a4a673f623aff992f1a5908b3c3fb94\">https://www.hotjar.com/?utm_source=SyndicateAds&#x26;utm_medium=display&#x26;utm_campaign=NativeCPC&#x26;utm_content=8a4a673f623aff992f1a5908b3c3fb94</a></p>\n<h4 id=\"typescript\">Typescript</h4>\n<p><em>2019-12-13 15:38</em> Nice Typescript intro, it’s live coding 50 minutes so using the youtube speed setting is recommended <a href=\"https://youtu.be/IadZyDwfwWI\">https://youtu.be/IadZyDwfwWI</a></p>\n<h4 id=\"router\">Router</h4>\n<p><em>2020-01-20 23:45</em> Lets code a client side router. It very well might be the easiest way forward in a micro frontend lanscape to roll your own orchestrator that ties together underlying spa’s with a few but common functions. One of these is a router function. Here is an article on how to roll your own. <a href=\"https://link.medium.com/GM2w3MhIp3\">https://link.medium.com/GM2w3MhIp3</a></p>\n<h4 id=\"pwa\">PWA</h4>\n<p><em>2020-07-20 11:49</em> <a href=\"https://youtu.be/M0wPM8B6z5c\">PWA is seriously catching up with native</a></p>\n<h4 id=\"usefull-links-in-general\">Usefull links in general</h4>\n<p>Make your own wifi QR-code to print out for easy sharing.\n<a href=\"https://qifi.org/\">qifi.org</a></p>";

				const frontmatter$f = {"layout":"../../layouts/SnippetPost.astro","title":"Usefull links","description":"Micro frontends links","pubDate":"Jan 6 2023"};
				const file$f = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/snippets/links.md";
				const url$f = "/snippets/links";
				function rawContent$d() {
					return "\n#### Micro frontends\n\n_2019-06-18 01:363_ [https://martinfowler.com/articles/micro-frontends.html](https://martinfowler.com/articles/micro-frontends.html) TL;DR In short, micro frontends are all about slicing up big and scary things into smaller, more manageable pieces.\n\n_2019-07-11 07:56_ It is not an ideal state to have many front-end frameworks within the company but it is a way to transition to a more homogenic front-end situation. [Medium article](https://link.medium.com/qF4AICBdeY)\n\n_2019-11-30 15:37_ THIS is a very interesting way of including different frameworks into each other. At 13:50 [https://youtu.be/o1Sr39DVdOQ] extra interesting in conjunction with the open-wc project.\n_2019-12-05 16:59_ Embedding a react SPA in a Web Component <https://medium.com/@gilfink/wrapping-react-components-inside-custom-elements-97431d1155bd> to be used in another framework.\n\nIn depth about micro frontends architechture <https://lucamezzalira.com/>\n\n_2020-05-23 09:41_ Whenever we need to take our micro frontend situation to the next level. <https://link.medium.com/4JOfwA7tI6>\n\n_2020-07-01 22:50_ Micro frontends in retrospect [Medium article](https://link.medium.com/tUh7ieT7L7)\n\n#### Redux\n\n_2019-06-20 11:33_ As mentioned in a private conversation, a new way of connecting react components to redux that is less verbose. Right now in react-redux release candidate. [https://youtu.be/3zoIigieur0](https://youtu.be/3zoIigieur0) This looks promising.\n\n_2019-07-10 01:41_ And BOOM! Version 7.1 of React-Redux is officially released. (7.1 uses React hooks to connect to Redux store that I in previous examples got from a alpha release candidate.) More info and a timeline travel through some previous versions here <https://youtu.be/zNs-phgKx3Q> by a Redux dev person.\n\n_2019-08-29 23:14_ Removing boilerplate code around Redux can’t be bad. <https://link.medium.com/JQIZvN6ByZ>\n\n_2019-08-30 09:30_ Getting started with Redux-Saga [Medium article](https://medium.com/@lavitr01051977/make-your-first-call-to-api-using-redux-saga-15aa995df5b6)\n\n_2019-08-30 09:31_ React Router with Redux [Medium article](https://medium.com/@lavitr01051977/react-router-redux-app-with-call-to-api-70a324c34ecb)\n_2019-10-31 08:52_ Above is yesterdays news. Today this is how to do it. <https://www.youtube.com/watch?v=CZeulkp1ClA> with React Router v5.\n\n_2019-11-03 22:09_ This is a comendable project [redux-starter-kit](https://redux-starter-kit.js.org) that I wont use for two reasons. 1 - IMO it does create a lot of stuff for you that you will not understand unless you go through the pain of both discover the need for or get to know because you've done all the wiring by yourself. 2 - It is opinionated and not necessarily the way I prefer to set it up. However I will look into it some more because it also has some off the shelf utility functions I have not seen before.\n\n_2019-11-03 22:18_ This \"getting started with Redux\" has one of the best instructions I think on how to wire up Redux Saga and get started. Unfortunately the rest is class based React and thus a bit out of fashion but if one only focus on the non-react parts it has some golden nuggets apart from Sagas aswell. <https://www.valentinog.com/blog/redux/>\n_Note to self: The way action creators/action types are set up is the same as in SCadmin and this will come in handy in the upcomming React project._\n\n_2019-11-27 11:03_ [Mixing redux with typescript] A bit outdated (from january 2019) but does have the redux part nicely layed out with typescript. <https://medium.com/@ksholla20/react-redux-with-typescript-ad7266896a9b>\n\n_2019-11-28 09:24_ Usefull Redux Thunks tips and tricks. <https://youtu.be/xihoZZU0gao>\n\n_2020-07-13 09:33_ [Is Recoil the new shiny thing that replaces Redux?](https://link.medium.com/ywMsgHQ747)\n\n#### Configurator\n\n_2019-07-09 15:40_ [Article about building a configurator](https://link.medium.com/SdBxX0zrbY).\n\n#### Styled Components\n\n_2019-08-22 15:24_ If Styled Components is a keeper then <https://github.com/styled-components/babel-plugin-styled-components> is a thing to add to my React boilerplate for larger apps. Easier debugging of Styled Components.\n\n#### Docker\n\n_019-08-29 23:12_ This is above my head but never the less interesting... [Youtube](https://youtu.be/Td7w0_nD5_4)\n\n#### Optimizations\n\n_2019-09-14 20:58_ [Optimization by planing when to load scripts](https://www.youtube.com/watch?v=eDd6Y6Z50Mg)\n\n_2019-10-15 10:00_ [Error Logging Frontend js errors back to server](https://medium.com/@devspotlight/best-practices-for-client-side-logging-and-error-handling-in-react-log-analysis-log-monitoring-531fea4a5fae)\n\n_2019-10-26 09:16_ [An article about doing a controlled startup of a web app the same as we aspire to do. Need to evaluate it](https://medium.com/javascript-in-plain-english/how-to-handle-and-design-the-startup-of-a-react-application-da779f3727e5)\n\n_2019-10-31 09:36_ Remember the differences android and ios measures window height in respect to the keyboard was a headache when I was doing the mobile version of the current configurator. [Now it seems there is a native solution](https://twitter.com/jesper_vos/status/1179673256925814785?s=09).\n(I had to store the viewport height upon onload as an attribute or css style on mobile and lock it to that)\n\n_2019-11-30 02:23_ [Faster JSON!](https://www.youtube.com/watch?v=1gEoOuixsYs)\n\n_2019-11-30 09:07_ [App startup orchestration](https://medium.com/javascript-in-plain-english/how-to-handle-and-design-the-startup-of-a-react-application-da779f3727e5)\n\n#### CSS Libraries\n\n_2019-10-07 15:49_ Semantic-UI: A jQuery free alternative to Bootstrap. With a React specific fork https://react.semantic-ui.com/\n\n#### UX\n\n_2019-10-19 10:11_ Talking about microcopy would be a useful thing to involve Scania in. Talking points: when to use Scania corporate tone and when to use a more casual and emphatic voice, users emotional journey, how this works with translations. <https://medium.com/swlh/my-6-point-microcopy-checklist-for-non-ux-writers-634eb52b29c9>\n\n_2019-10-23 08:53_ Microanimations/transitions might be more programmatically readable with this libraries than plain css. <https://reactcommunity.org/react-transition-group/>\n\n_2019-10-31 13:18_ All web apps made to mimic native apps should lock screen orientation down and just use it as a feature when it has something extra to offer. <https://code-boxx.com/lock-screen-orientation/>\n\n_2020-01-13 21:58_ Finally a css solution to :hover on touch screens <https://link.medium.com/QPKG4ORYd3>\n\n#### React\n\n_2019-10-19 00:26_ **Capturing gestures** won’t happen by itself. We need a library. This is a pretty lowlevel library. Will probably need to look further. <https://dev.to/bmcmahen/building-react-components-with-gesture-support-3nn8>\n\n_2019-10-07 15:15_ Cute **micro-animation library** <https://react.useanimations.com/>\n\n_2019-11-01 14:54_ **Sharing React components** seems to be perhaps even more user frendly than reusing Polymer components using https://bit.dev/\n\n_2019-11-03 23:02_ **Axios** has been the goto alternative to the native javascript fetch. Now comes this little library and it looks really sexy out of the box <https://swr.now.sh/>\n\n_2019-10-06 08:07_ This will come in handy. **useBreakpoint hook** - media query breakpoints in react. <https://link.medium.com/PyNjAQDDy0>\nThe spinn-off js-in-css library to Styled Components called Polished.js also handles breakpoints. Polished.js works well in combo with Styled Components. <https://polished.js.org/>\nMedia query function set up in plain js with styled-components <https://medium.com/@samuelresua/easy-media-queries-in-styled-components-690b78f50053>\nUpdate to first link <https://medium.com/better-programming/how-to-use-media-queries-programmatically-in-react-4d6562c3bc97>\n\n_2019-09-02 18:01_ Article describes a way to use multiple projects under the same url:\n<https://link.medium.com/n6c43G8SEZ>\n\n_2019-11-16 12:22_ Not even forms are straight forward in React. So there are libraries for that like <https://medium.com/better-programming/build-the-next-generation-of-forms-with-react-hooks-forms-b4f2039e51c1> or Formik2 or Redux Forms\nFormik <https://github.com/jaredpalmer/formik/releases/tag/v2.0.1>\n\n_2019-11-03 22:34_ The react hooks way to detect click outside <https://codesandbox.io/s/9o3lw5792w>\nMore <https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-with-react-hook-ba77c37c7e82>\n\n_2020-01-24 20:53_ A few potentially useful React tips here <https://link.medium.com/FlTaGD49v3>\n\n_2020-07-29 19:25_ Webpack 5/React will adress some micro frontend issues. <https://link.medium.com/GSi09Mvmw8>\n\n#### Animations\n\n_2019-11-03 23:41_ Super interesting talk about **animation** in webb apps on mobile (vs desktop) <https://www.youtube.com/watch?v=JDDxR1a15Yo&feature=youtu.be&t=10664>\n\n_2019-11-12 08:59_ The slider component that needs to work with both gestures and on desktop with super smooth animations probably is going to cost us a lot of developing hours. CSS to the rescue! scroll-snap seems to have full support for all browsers we care about <https://caniuse.com/#search=scroll-snap>\nIf scroll-snap fails on us this is a good starting point for doing the same in JS/React. [Youtube](https://www.youtube.com/watch?v=3ax9TW2c2bY&list=LLuVFSB0bbZK_B3dciRnBBfw&index=41&t=1008s)\n[More alernate starting points if scroll-snap fails](https://medium.com/dailyjs/horizontal-scroll-animation-fc39ae43cbe5)\n\n#### Testing\n\n_2019-11-12 23:51_ Make **Jest** also test Styled-Components <https://github.com/styled-components/jest-styled-components>\n\n_2019-11-21 19:53_ A good primer for automated tests with Jest an Enzyme https://link.medium.com/BAaUIuWRN1\n\n#### Web components\n\nPolymer without build tools, just **native web components** <https://stackblitz.com/edit/open-wc-lit-demos?file=01-basic%2F01-basic-setup.js>\n\n#### Analytics\n\n_2019-11-16 18:00_ Analytics tool <https://www.hotjar.com/?utm_source=SyndicateAds&utm_medium=display&utm_campaign=NativeCPC&utm_content=8a4a673f623aff992f1a5908b3c3fb94>\n\n#### Typescript\n\n_2019-12-13 15:38_ Nice Typescript intro, it's live coding 50 minutes so using the youtube speed setting is recommended <https://youtu.be/IadZyDwfwWI>\n\n#### Router\n\n_2020-01-20 23:45_ Lets code a client side router. It very well might be the easiest way forward in a micro frontend lanscape to roll your own orchestrator that ties together underlying spa’s with a few but common functions. One of these is a router function. Here is an article on how to roll your own. <https://link.medium.com/GM2w3MhIp3>\n\n#### PWA\n\n_2020-07-20 11:49_ [PWA is seriously catching up with native](https://youtu.be/M0wPM8B6z5c)\n\n#### Usefull links in general\n\nMake your own wifi QR-code to print out for easy sharing.\n[qifi.org](https://qifi.org/)\n";
				}
				function compiledContent$d() {
					return html$d;
				}
				function getHeadings$f() {
					return [{"depth":4,"slug":"micro-frontends","text":"Micro frontends"},{"depth":4,"slug":"redux","text":"Redux"},{"depth":4,"slug":"configurator","text":"Configurator"},{"depth":4,"slug":"styled-components","text":"Styled Components"},{"depth":4,"slug":"docker","text":"Docker"},{"depth":4,"slug":"optimizations","text":"Optimizations"},{"depth":4,"slug":"css-libraries","text":"CSS Libraries"},{"depth":4,"slug":"ux","text":"UX"},{"depth":4,"slug":"react","text":"React"},{"depth":4,"slug":"animations","text":"Animations"},{"depth":4,"slug":"testing","text":"Testing"},{"depth":4,"slug":"web-components","text":"Web components"},{"depth":4,"slug":"analytics","text":"Analytics"},{"depth":4,"slug":"typescript","text":"Typescript"},{"depth":4,"slug":"router","text":"Router"},{"depth":4,"slug":"pwa","text":"PWA"},{"depth":4,"slug":"usefull-links-in-general","text":"Usefull links in general"}];
				}
				async function Content$f() {
					const { layout, ...content } = frontmatter$f;
					content.file = file$f;
					content.url = url$f;
					const contentFragment = createVNode(Fragment, { 'set:html': html$d });
					return createVNode($$SnippetPost, {
									file: file$f,
									url: url$f,
									content,
									frontmatter: content,
									headings: getHeadings$f(),
									rawContent: rawContent$d,
									compiledContent: compiledContent$d,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$f[Symbol.for('astro.needsHeadRendering')] = false;

const _page25 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$f,
  compiledContent: compiledContent$d,
  default: Content$f,
  file: file$f,
  frontmatter: frontmatter$f,
  getHeadings: getHeadings$f,
  rawContent: rawContent$d,
  url: url$f
}, Symbol.toStringTag, { value: 'Module' }));

const get = () =>
	rss({
		title: SITE_TITLE,
		description: SITE_DESCRIPTION,
		site: "https://hervy.netlify.com/",
		items: /* #__PURE__ */ Object.assign({"./blog/CSS-module-scripts.md": () => Promise.resolve().then(() => _page37),"./blog/create-wifi-qr.md": () => Promise.resolve().then(() => _page40),"./blog/creating-endpoint-in-astro.md": () => Promise.resolve().then(() => _page30),"./blog/css-to-inline-scroll-with-transitions.md": () => Promise.resolve().then(() => _page28),"./blog/error-handling-in-typescript.md": () => Promise.resolve().then(() => _page29),"./blog/guidlines-on-unit-testing.md": () => Promise.resolve().then(() => _page31),"./blog/hits-n-misses-2022.md": () => Promise.resolve().then(() => _page38),"./blog/hydroactive-functional-wc.md": () => Promise.resolve().then(() => _page32),"./blog/markdown-style-guide.md": () => Promise.resolve().then(() => _page34),"./blog/send-mail-with-node.md": () => Promise.resolve().then(() => _page35),"./blog/using-mdx.mdx": () => Promise.resolve().then(() => _page41),"./blog/view-transition-api.md": () => Promise.resolve().then(() => _page36),"./blog/want-to-see-the-future.md": () => Promise.resolve().then(() => _page33),"./blog/we-animation-API.md": () => Promise.resolve().then(() => _page39)}),
	});

const _page26 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  get
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$1 = async function ({
  children
}) {
  const Layout = (await Promise.resolve().then(() => BlogPost)).default;
  const {
    layout,
    ...content
  } = frontmatter$e;
  content.file = file$e;
  content.url = url$e;
  return createVNode(Layout, {
    file: file$e,
    url: url$e,
    content,
    frontmatter: content,
    headings: getHeadings$e(),
    "server:root": true,
    children
  });
};
const frontmatter$e = {
  "layout": "../layouts/BlogPost.astro",
  "title": "About Me",
  "description": "",
  "updatedDate": "August 08 2022",
  "heroImage": "/placeholder-about.jpg"
};
function getHeadings$e() {
  return [];
}
function _createMdxContent$1(props) {
  const _components = Object.assign({
    p: "p"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: "With 20 years of experience in the industry, I am a seasoned full stack developer with a focus on frontend and user experience. My career began as a graphic designer in 1990, where I honed my skills in advertising, brand identities, logotypes, and magazine design for both advertising agencies and individual clients."
    }), "\n", createVNode(_components.p, {
      children: "Since 1997, I have been working in the web development industry, creating web sites and web apps, and working with user experience. I use tools such as Figma and Adobe XD to create prototypes, and I believe that my involvement in UX allows me to have a holistic view of projects, better understanding the needs of the client\u2019s customer."
    }), "\n", createVNode(_components.p, {
      children: "Throughout my career, I have had the opportunity to work in both large teams for big companies, using frameworks such as SAFe, and also taking on complete projects for smaller companies. I am a strong believer in the importance of knowledge sharing and code reviews, and I enjoy getting feedback on my code to continue to improve my skills."
    }), "\n", createVNode(_components.p, {
      children: "Even though my focus is mainly on the frontend, I still have a passion for being involved in UX and believe that this gives me an advantage as my technological knowledge allows me to see solutions others may have missed. On the backend, I have mainly worked with SQL databases such as MsSQL and MariaDB. I am proficient in a React/Typescript environment, native web components, and sometimes use meta frameworks such as Astro or Next. I am also open to working on bigger projects using Svelte or other frameworks as long as they are up to date and fit for the task at hand."
    }), "\n", createVNode(_components.p, {
      children: "Overall, my experience and passion for web development make me a valuable asset to any team."
    }), "\n", createVNode("a", {
      href: "https://www.linkedin.com/in/nicolashervy/",
      class: "fa fa-linkedin"
    })]
  });
}
function MDXContent$1(props = {}) {
  return createVNode(MDXLayout$1, {
    ...props,
    children: createVNode(_createMdxContent$1, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$e, "astro:jsx");
__astro_tag_component__(MDXContent$1, "astro:jsx");
const url$e = "/about";
const file$e = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/about.mdx";
const Content$e = (props = {}) => MDXContent$1({
											...props,
											components: { Fragment, ...props.components },
										});
Content$e[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$e.layout);

const _page27 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$e,
  default: Content$e,
  file: file$e,
  frontmatter: frontmatter$e,
  getHeadings: getHeadings$e,
  url: url$e
}, Symbol.toStringTag, { value: 'Module' }));

const $$Astro$1 = createAstro("https://hervy.netlify.com/");
const $$BlogPost = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$BlogPost;
  const {
    content: { title, description, pubDate, updatedDate, heroImage }
  } = Astro2.props;
  return renderTemplate`<html lang="en" class="astro-BVZIHDZO">
  <head>
    ${renderComponent($$result, "BaseHead", $$BaseHead, { "title": title, "description": description, "class": "astro-BVZIHDZO" })}
    
  ${renderHead($$result)}</head>

  <body class="astro-BVZIHDZO">
    ${renderComponent($$result, "Header", $$Header, { "class": "astro-BVZIHDZO" })}
    <main class="astro-BVZIHDZO">
      <article class="blog astro-BVZIHDZO">
        <!-- {heroImage && <img width={720} height={360} src={heroImage} alt='' />} -->
        ${heroImage && renderTemplate`${renderComponent($$result, "Image", $$Image, { "width": 720, "aspectRatio": 720 / 400, "height": 400, "src": heroImage, "alt": "", "format": heroImage.split(".")[1], "class": "astro-BVZIHDZO" })}`}
        <h2 class="title astro-BVZIHDZO">${title}</h2>
        ${pubDate && renderTemplate`<time class="astro-BVZIHDZO">${pubDate}</time>`}
        ${updatedDate && renderTemplate`<div class="updated astro-BVZIHDZO">
              Last updated on <time class="astro-BVZIHDZO">${updatedDate}</time>
            </div>`}
        <hr class="separator astro-BVZIHDZO">
        <!-- <Toc client:load /> -->
        ${renderSlot($$result, $$slots["default"])}
      </article>
    </main>
    ${renderComponent($$result, "Footer", $$Footer, { "class": "astro-BVZIHDZO" })}
    
  </body></html>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/layouts/BlogPost.astro");

const $$file$1 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/layouts/BlogPost.astro";
const $$url$1 = undefined;

const BlogPost = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$BlogPost,
  file: $$file$1,
  url: $$url$1
}, Symbol.toStringTag, { value: 'Module' }));

const html$c = "<p>CSS is getting more and more competent to do what JS has solved for a long time. The benefit of using CSS is that it is very performant and rarely glitches.</p>\n<h5 id=\"example\">Example</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">&#x3C;!</span><span style=\"color: #79C0FF\">DOCTYPE</span><span style=\"color: #C9D1D9\"> html</span><span style=\"color: #FF7B72\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">html</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">head</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">style</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">html </span><span style=\"color: #FF7B72\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  scroll</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\">behavior: smooth;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">div:target </span><span style=\"color: #FF7B72\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  background</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\">color:red;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">.tab div </span><span style=\"color: #FF7B72\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  display: none;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">.tab div:target </span><span style=\"color: #FF7B72\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  display: block;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">div > div </span><span style=\"color: #FF7B72\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\"> margin</span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\">top: 100vw;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">style</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">head</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">body</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">class</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"tab\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"#link1\"</span><span style=\"color: #C9D1D9\">>Link 1&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"#link2\"</span><span style=\"color: #C9D1D9\">>Link 2&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"#link3\"</span><span style=\"color: #C9D1D9\">>Link 3&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Veritatis maiores esse reprehenderit error sunt sequi molestias corporis omnis debitis voluptatibus ipsum impedit laborum quis ex, vel veniam iure ipsa eum?</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Eos recusandae culpa odio quod at quasi nemo, doloremque totam, cumque non animi atque et officia, vitae mollitia sapiente unde. Molestiae voluptatum tempore excepturi quo. Ex magnam perspiciatis molestias vitae!</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Debitis modi laboriosam, accusantium nihil consequuntur quam fugiat totam dolorum aliquid ducimus veritatis ab, eaque, doloribus magni. Molestias sint, pariatur dolore id hic perspiciatis labore consequatur inventore architecto, vitae odit.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Excepturi, voluptate? Repellat ea quisquam pariatur perferendis distinctio minima deserunt veritatis, illum laboriosam adipisci iusto, molestias qui aliquam optio quia saepe at provident numquam vero! Qui ullam a pariatur rem?</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Corrupti dolorum deserunt quod ab odio culpa fuga, praesentium iste ex. Explicabo minima animi id? Tempore voluptatum eaque inventore quidem voluptates suscipit quia amet omnis alias consectetur, laboriosam dicta quos!&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">id</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"link1\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">h3</span><span style=\"color: #C9D1D9\">>Content to Link 1&#x3C;/</span><span style=\"color: #7EE787\">h3</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">>Hello World!&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Veritatis maiores esse reprehenderit error sunt sequi molestias corporis omnis debitis voluptatibus ipsum impedit laborum quis ex, vel veniam iure ipsa eum?</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Eos recusandae culpa odio quod at quasi nemo, doloremque totam, cumque non animi atque et officia, vitae mollitia sapiente unde. Molestiae voluptatum tempore excepturi quo. Ex magnam perspiciatis molestias vitae!</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Debitis modi laboriosam, accusantium nihil consequuntur quam fugiat totam dolorum aliquid ducimus veritatis ab, eaque, doloribus magni. Molestias sint, pariatur dolore id hic perspiciatis labore consequatur inventore architecto, vitae odit.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Excepturi, voluptate? Repellat ea quisquam pariatur perferendis distinctio minima deserunt veritatis, illum laboriosam adipisci iusto, molestias qui aliquam optio quia saepe at provident numquam vero! Qui ullam a pariatur rem?</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Corrupti dolorum deserunt quod ab odio culpa fuga, praesentium iste ex. Explicabo minima animi id? Tempore voluptatum eaque inventore quidem voluptates suscipit quia amet omnis alias consectetur, laboriosam dicta quos!&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">id</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"link2\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">h3</span><span style=\"color: #C9D1D9\">>Content to Link 2&#x3C;/</span><span style=\"color: #7EE787\">h3</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">h4</span><span style=\"color: #C9D1D9\">>Great success!&#x3C;/</span><span style=\"color: #7EE787\">h4</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">id</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"link3\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">h3</span><span style=\"color: #C9D1D9\">>Content to Link 3&#x3C;/</span><span style=\"color: #7EE787\">h3</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">>Yeah!&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">body</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">html</span><span style=\"color: #C9D1D9\">></span></span></code></pre>";

				const frontmatter$d = {"layout":"../../layouts/BlogPost.astro","title":"Scroll inline a page using css with transitions thanks to :target pseudo selector","description":"","pubDate":"Jan 10 2023","heroImage":"/placeholder-hero.jpg","draft":true};
				const file$d = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/css-to-inline-scroll-with-transitions.md";
				const url$d = "/blog/css-to-inline-scroll-with-transitions";
				function rawContent$c() {
					return "\nCSS is getting more and more competent to do what JS has solved for a long time. The benefit of using CSS is that it is very performant and rarely glitches.\n\n##### Example\n\n```javascript\n<!DOCTYPE html>\n<html>\n<head>\n<style>\nhtml {\n  scroll-behavior: smooth;\n}\ndiv:target {\n  background-color:red;\n}\n.tab div {\n  display: none;\n}\n\n.tab div:target {\n  display: block;\n}\ndiv > div {\n margin-top: 100vw;\n}\n</style>\n</head>\n<body>\n\n<div class=\"tab\">\n\n<a href=\"#link1\">Link 1</a>\n<a href=\"#link2\">Link 2</a>\n<a href=\"#link3\">Link 3</a>\n<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Veritatis maiores esse reprehenderit error sunt sequi molestias corporis omnis debitis voluptatibus ipsum impedit laborum quis ex, vel veniam iure ipsa eum?\nEos recusandae culpa odio quod at quasi nemo, doloremque totam, cumque non animi atque et officia, vitae mollitia sapiente unde. Molestiae voluptatum tempore excepturi quo. Ex magnam perspiciatis molestias vitae!\nDebitis modi laboriosam, accusantium nihil consequuntur quam fugiat totam dolorum aliquid ducimus veritatis ab, eaque, doloribus magni. Molestias sint, pariatur dolore id hic perspiciatis labore consequatur inventore architecto, vitae odit.\nExcepturi, voluptate? Repellat ea quisquam pariatur perferendis distinctio minima deserunt veritatis, illum laboriosam adipisci iusto, molestias qui aliquam optio quia saepe at provident numquam vero! Qui ullam a pariatur rem?\nCorrupti dolorum deserunt quod ab odio culpa fuga, praesentium iste ex. Explicabo minima animi id? Tempore voluptatum eaque inventore quidem voluptates suscipit quia amet omnis alias consectetur, laboriosam dicta quos!</p>\n\n<div id=\"link1\">\n  <h3>Content to Link 1</h3>\n  <p>Hello World!</p>\n  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Veritatis maiores esse reprehenderit error sunt sequi molestias corporis omnis debitis voluptatibus ipsum impedit laborum quis ex, vel veniam iure ipsa eum?\nEos recusandae culpa odio quod at quasi nemo, doloremque totam, cumque non animi atque et officia, vitae mollitia sapiente unde. Molestiae voluptatum tempore excepturi quo. Ex magnam perspiciatis molestias vitae!\nDebitis modi laboriosam, accusantium nihil consequuntur quam fugiat totam dolorum aliquid ducimus veritatis ab, eaque, doloribus magni. Molestias sint, pariatur dolore id hic perspiciatis labore consequatur inventore architecto, vitae odit.\nExcepturi, voluptate? Repellat ea quisquam pariatur perferendis distinctio minima deserunt veritatis, illum laboriosam adipisci iusto, molestias qui aliquam optio quia saepe at provident numquam vero! Qui ullam a pariatur rem?\nCorrupti dolorum deserunt quod ab odio culpa fuga, praesentium iste ex. Explicabo minima animi id? Tempore voluptatum eaque inventore quidem voluptates suscipit quia amet omnis alias consectetur, laboriosam dicta quos!</p>\n</div>\n\n<div id=\"link2\">\n  <h3>Content to Link 2</h3>\n  <h4>Great success!</h4>\n</div>\n\n<div id=\"link3\">\n  <h3>Content to Link 3</h3>\n  <p>Yeah!</p>\n</div>\n\n</div>\n\n</body>\n</html>\n```\n";
				}
				function compiledContent$c() {
					return html$c;
				}
				function getHeadings$d() {
					return [{"depth":5,"slug":"example","text":"Example"}];
				}
				async function Content$d() {
					const { layout, ...content } = frontmatter$d;
					content.file = file$d;
					content.url = url$d;
					const contentFragment = createVNode(Fragment, { 'set:html': html$c });
					return createVNode($$BlogPost, {
									file: file$d,
									url: url$d,
									content,
									frontmatter: content,
									headings: getHeadings$d(),
									rawContent: rawContent$c,
									compiledContent: compiledContent$c,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$d[Symbol.for('astro.needsHeadRendering')] = false;

const _page28 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$d,
  compiledContent: compiledContent$c,
  default: Content$d,
  file: file$d,
  frontmatter: frontmatter$d,
  getHeadings: getHeadings$d,
  rawContent: rawContent$c,
  url: url$d
}, Symbol.toStringTag, { value: 'Module' }));

const html$b = "<p>Error handling in Type/JavaScript is a topic that doesn’t get the importance it deserves. It’s crucial to the longevity of any project to catch and log errors.</p>\n<p>As I’ve started working with TypeScript more over the years, I started to realize that I didn’t really understand error handling. I would often run into this problem:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">try</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Error</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'Ooops</span><span style=\"color: #FFA198\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">} </span><span style=\"color: #D2A8FF\">catch</span><span style=\"color: #C9D1D9\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.error(error.messages)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>error is type unknown, so we can’t perform any actions with error until we cast it to a new type, or narrow the type. The correct answer is to narrow the type, and we’ll look at how to do that, but why is this even necessary?</p>\n<p>In JavaScript, just about anything can be thrown:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'oops'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">210</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">undefined</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> { message: </span><span style=\"color: #A5D6FF\">'You get the idea'</span><span style=\"color: #C9D1D9\"> }</span></span></code></pre>\n<p>So the error that is caught truly is unknown. But, there are ways we can handle errors cleanly with TypeScript, and over the years I’ve developed a design pattern that I really enjoy using to help me do just that.</p>\n<h4 id=\"first-the-basics-of-errors-in-javascript\">First, the basics of errors in JavaScript</h4>\n<h5 id=\"types-of-errors-in-javascript\">Types of errors in JavaScript</h5>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types\">There are many types of errors in JavaScript</a>, but the most common are:</p>\n<ul>\n<li><code>ReferenceError</code> — The code referenced a variable that doesn’t exist.</li>\n<li><code>TypeError</code> — A value wasn’t the expected type.</li>\n<li><code>SyntaxError</code> — The code was syntactically invalid.</li>\n</ul>\n<h5 id=\"throwing-errors\">Throwing errors</h5>\n<p>There are times when you should throw an error manually. For example, you might have some code that relies on a value being returned from a function call, but there’s a possibility of the value being <code>undefined</code>, or at least TypeScript believes there is. In this example throwing is the best solution to narrow the <code>user</code> that is returned.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createProject</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Inferred type is user | undefined</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">user</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getUser</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// user could be undefined, so TS complains</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">saveProject</span><span style=\"color: #C9D1D9\">({ name: </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">, userId: user.id })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// BAD</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createProject</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Inferred type is user | undefined</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">user</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getUser</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">user) </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// Dont do this</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">saveProject</span><span style=\"color: #C9D1D9\">({ name: </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">, userId: user.id })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// GOOD</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createProject</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Inferred type is user | undefined</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">user</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getUser</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FF7B72\">!</span><span style=\"color: #C9D1D9\">user) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">ReferenceError</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'User undefined'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">saveProject</span><span style=\"color: #C9D1D9\">({ name: </span><span style=\"color: #A5D6FF\">''</span><span style=\"color: #C9D1D9\">, userId: user.id })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"catching-errors\">Catching errors</h5>\n<p>Once an error is thrown, it will bubble up the callstack until caught in a <code>try/catch</code> statement. When code that is run inside of a <code>try</code> block throws an error, it will be “caught” in the catch block. The error can originate from a function nested inside of a function, and will bubble up until caught.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">try</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">ReferenceError</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">} </span><span style=\"color: #FF7B72\">catch</span><span style=\"color: #C9D1D9\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">error</span><span style=\"color: #C9D1D9\">(error)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"narrowing-the-type-of-error\">Narrowing the type of error</h5>\n<p>Once caught, it can be useful to check the type of error that was thrown. This allows us to narrow the type from <code>unknown</code>, to a specific type that we can then interact with. We can do that with <code>instanceof</code>.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">try</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">ReferenceError</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">} </span><span style=\"color: #FF7B72\">catch</span><span style=\"color: #C9D1D9\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (error </span><span style=\"color: #FF7B72\">instanceof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ReferenceError</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    console.</span><span style=\"color: #D2A8FF\">error</span><span style=\"color: #C9D1D9\">(error.message)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"enough-of-the-basics-lets-look-at-the-design-pattern\">Enough of the basics, let’s look at the design pattern</h5>\n<p>In my latest project I grouped my code by domains in directories named Features. I’ll go over this architecture in detail in another post, but TL;DR is that a Feature dir contains code for a given domain. It can contain related components, hooks, types, errors, and more. What we’re interested in for this post are the errors. Each Feature dir contains an <code>errors.ts</code> file where I define a custom error class for the respective domain.</p>\n<h5 id=\"creating-a-custom-error-type\">Creating a custom error type</h5>\n<p>In my <code>errors.ts</code> file I export a <code>class</code>. I maintain a union type for the potential names, which adds some nice intellisense and type safety. The class extends the Error object, which allows a stack trace to be inserted (for most JS runtimes).</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ErrorName</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'GET_PROJECT_ERROR'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'CREATE_PROJECT_ERROR'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'PROJECT_LIMMIT_REACHED'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">class</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ProjectError</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Error</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">name</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ErrorName</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">message</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">cause</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">any</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">constructor</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">name</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">message</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">cause</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">name</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ErrorName</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">message</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">cause</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">any</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">super</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.name </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> name</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.message </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> message</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.cause </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> cause</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"throwing-a-custom-error\">Throwing a custom error</h5>\n<p>When a new error is instantiated, the name value has intellisense and must be one of the names defined in the union type.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createProject</span><span style=\"color: #C9D1D9\">() {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> { </span><span style=\"color: #79C0FF\">data</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">error</span><span style=\"color: #C9D1D9\"> } </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> api.</span><span style=\"color: #D2A8FF\">createProject</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">ProjectError</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      name: </span><span style=\"color: #A5D6FF\">'CREATE_PROJECT_ERROR'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      message: </span><span style=\"color: #A5D6FF\">'API error occurred while creating project'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      cause: error,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (data.</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> projectLimit) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">throw</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">ProjectError</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      name: </span><span style=\"color: #A5D6FF\">'PROJECT_LIMIT_REACHED'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      message: </span><span style=\"color: #A5D6FF\">'Project limit has been reached.'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> data</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"catching-a-custom-error\">Catching a custom error</h5>\n<p>When the error is caught we can narrow the error type by using <code>instanceof</code>. Once narrowed, <code>error.name</code> gives us intellisense. At this point we can perform logic based on the name of the error that was thrown. In this example the <code>PROJECT_LIMIT_REACHED</code> error is one we want to show the user, and we provided a message specifically to be rendered for the user.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">try</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">createProject</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">} </span><span style=\"color: #FF7B72\">catch</span><span style=\"color: #C9D1D9\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (error </span><span style=\"color: #FF7B72\">instanceof</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ProjectError</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (error.name </span><span style=\"color: #FF7B72\">===</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'PROJECT_LIMIT_REACHED'</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">toast</span><span style=\"color: #C9D1D9\">(error.message)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<h5 id=\"making-a-reusable-error-base\">Making a reusable error base</h5>\n<p>Since I have many <code>errors.ts</code> files, I want to ensure my code stays DRY. The only dynamic code in our class is the union type of names. So I create an <code>ErrorBase</code> class, which accepts a generic that is used as the name type.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">class</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ErrorBase</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">T</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span><span style=\"color: #C9D1D9\">> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Error</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">name</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">message</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FFA657\">cause</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">any</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">constructor</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">name</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">message</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">cause</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">name</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">T</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">message</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">string</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FFA657\">cause</span><span style=\"color: #FF7B72\">?:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">any</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">super</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.name </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> name</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.message </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> message</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">this</span><span style=\"color: #C9D1D9\">.cause </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> cause</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>Now, when I create a new custom error class I can extend this base, and all I need to do is give it the union type of available names.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { ErrorBase } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'../utils/error-base'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">ErrorName</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'GET_PROJECT_ERROR'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'CREATE_PROJECT_ERROR'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">|</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'PROJECT_LIMIT_REACHED'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">class</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">TeamError</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">extends</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">ErrorBase</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FFA657\">ErrorName</span><span style=\"color: #C9D1D9\">> {}</span></span></code></pre>\n<hr>\n<p><a href=\"https://medium.com/udacity-engineering/handling-errors-like-a-pro-in-typescript-d7a314ad4991\">Source</a></p>";

				const frontmatter$c = {"layout":"../../layouts/BlogPost.astro","title":"How to handle errors in typescript","description":"","pubDate":"Jan 30 2023","draft":false,"heroImage":"/assets/blog/errorhandling.webp"};
				const file$c = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/error-handling-in-typescript.md";
				const url$c = "/blog/error-handling-in-typescript";
				function rawContent$b() {
					return "\nError handling in Type/JavaScript is a topic that doesn’t get the importance it deserves. It’s crucial to the longevity of any project to catch and log errors.\n\nAs I’ve started working with TypeScript more over the years, I started to realize that I didn’t really understand error handling. I would often run into this problem:\n\n```javascript\ntry {\n    throw new Error('Ooops)\n} catch (error) {\n    console.error(error.messages)\n}\n```\n\nerror is type unknown, so we can’t perform any actions with error until we cast it to a new type, or narrow the type. The correct answer is to narrow the type, and we’ll look at how to do that, but why is this even necessary?\n\nIn JavaScript, just about anything can be thrown:\n\n```javascript\nthrow 'oops'\nthrow 210\nthrow null\nthrow undefined\nthrow { message: 'You get the idea' }\n```\n\nSo the error that is caught truly is unknown. But, there are ways we can handle errors cleanly with TypeScript, and over the years I’ve developed a design pattern that I really enjoy using to help me do just that.\n\n#### First, the basics of errors in JavaScript\n\n##### Types of errors in JavaScript\n\n[There are many types of errors in JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#error_types), but the most common are:\n\n- `ReferenceError` — The code referenced a variable that doesn’t exist.\n- `TypeError` — A value wasn’t the expected type.\n- `SyntaxError` — The code was syntactically invalid.\n\n##### Throwing errors\n\nThere are times when you should throw an error manually. For example, you might have some code that relies on a value being returned from a function call, but there’s a possibility of the value being `undefined`, or at least TypeScript believes there is. In this example throwing is the best solution to narrow the `user` that is returned.\n\n```javascript\nfunction createProject() {\n  // Inferred type is user | undefined\n  const user = getUser()\n  // user could be undefined, so TS complains\n  saveProject({ name: '', userId: user.id })\n}\n\n// BAD\nfunction createProject() {\n  // Inferred type is user | undefined\n  const user = getUser()\n\n  if (!user) return // Dont do this\n\n  saveProject({ name: '', userId: user.id })\n}\n\n// GOOD\nfunction createProject() {\n  // Inferred type is user | undefined\n  const user = getUser()\n\n  if (!user) {\n    throw new ReferenceError('User undefined')\n  }\n\n  saveProject({ name: '', userId: user.id })\n}\n```\n\n##### Catching errors\n\nOnce an error is thrown, it will bubble up the callstack until caught in a `try/catch` statement. When code that is run inside of a `try` block throws an error, it will be “caught” in the catch block. The error can originate from a function nested inside of a function, and will bubble up until caught.\n\n```javascript\ntry {\n  throw new ReferenceError()\n} catch (error) {\n  console.error(error)\n}\n```\n\n##### Narrowing the type of error\n\nOnce caught, it can be useful to check the type of error that was thrown. This allows us to narrow the type from `unknown`, to a specific type that we can then interact with. We can do that with `instanceof`.\n\n```javascript\ntry {\n  throw new ReferenceError()\n} catch (error) {\n  if (error instanceof ReferenceError) {\n    console.error(error.message)\n  }\n}\n```\n\n##### Enough of the basics, let’s look at the design pattern\n\nIn my latest project I grouped my code by domains in directories named Features. I’ll go over this architecture in detail in another post, but TL;DR is that a Feature dir contains code for a given domain. It can contain related components, hooks, types, errors, and more. What we’re interested in for this post are the errors. Each Feature dir contains an `errors.ts` file where I define a custom error class for the respective domain.\n\n##### Creating a custom error type\n\nIn my `errors.ts` file I export a `class`. I maintain a union type for the potential names, which adds some nice intellisense and type safety. The class extends the Error object, which allows a stack trace to be inserted (for most JS runtimes).\n\n```typescript\ntype ErrorName =\n  | 'GET_PROJECT_ERROR'\n  | 'CREATE_PROJECT_ERROR'\n  | 'PROJECT_LIMMIT_REACHED'\n\nexport class ProjectError extends Error {\n  name: ErrorName\n  message: string\n  cause: any\n\n  constructor({\n    name,\n    message,\n    cause,\n  }: {\n    name: ErrorName\n    message: string\n    cause: any\n  }) {\n    super()\n    this.name = name\n    this.message = message\n    this.cause = cause\n  }\n}\n```\n\n##### Throwing a custom error\n\nWhen a new error is instantiated, the name value has intellisense and must be one of the names defined in the union type.\n\n```javascript\nexport async function createProject() {\n  const { data, error } = await api.createProject()\n\n  if (error) {\n    throw new ProjectError({\n      name: 'CREATE_PROJECT_ERROR',\n      message: 'API error occurred while creating project',\n      cause: error,\n    })\n  }\n\n  if (data.length === projectLimit) {\n    throw new ProjectError({\n      name: 'PROJECT_LIMIT_REACHED',\n      message: 'Project limit has been reached.',\n    })\n  }\n\n  return data\n}\n```\n\n##### Catching a custom error\n\nWhen the error is caught we can narrow the error type by using `instanceof`. Once narrowed, `error.name` gives us intellisense. At this point we can perform logic based on the name of the error that was thrown. In this example the `PROJECT_LIMIT_REACHED` error is one we want to show the user, and we provided a message specifically to be rendered for the user.\n\n```javascript\ntry {\n  await createProject()\n} catch (error) {\n  if (error instanceof ProjectError) {\n    if (error.name === 'PROJECT_LIMIT_REACHED') {\n      toast(error.message)\n    }\n  }\n}\n```\n\n##### Making a reusable error base\n\nSince I have many `errors.ts` files, I want to ensure my code stays DRY. The only dynamic code in our class is the union type of names. So I create an `ErrorBase` class, which accepts a generic that is used as the name type.\n\n```typescript\nexport class ErrorBase<T extends string> extends Error {\n  name: T\n  message: string\n  cause: any\n\n  constructor({\n    name,\n    message,\n    cause,\n  }: {\n    name: T\n    message: string\n    cause?: any\n  }) {\n    super()\n    this.name = name\n    this.message = message\n    this.cause = cause\n  }\n}\n```\n\nNow, when I create a new custom error class I can extend this base, and all I need to do is give it the union type of available names.\n\n```typescript\nimport { ErrorBase } from '../utils/error-base'\n\ntype ErrorName =\n  | 'GET_PROJECT_ERROR'\n  | 'CREATE_PROJECT_ERROR'\n  | 'PROJECT_LIMIT_REACHED'\n\nexport class TeamError extends ErrorBase<ErrorName> {}\n```\n\n---\n\n[Source](https://medium.com/udacity-engineering/handling-errors-like-a-pro-in-typescript-d7a314ad4991)\n";
				}
				function compiledContent$b() {
					return html$b;
				}
				function getHeadings$c() {
					return [{"depth":4,"slug":"first-the-basics-of-errors-in-javascript","text":"First, the basics of errors in JavaScript"},{"depth":5,"slug":"types-of-errors-in-javascript","text":"Types of errors in JavaScript"},{"depth":5,"slug":"throwing-errors","text":"Throwing errors"},{"depth":5,"slug":"catching-errors","text":"Catching errors"},{"depth":5,"slug":"narrowing-the-type-of-error","text":"Narrowing the type of error"},{"depth":5,"slug":"enough-of-the-basics-lets-look-at-the-design-pattern","text":"Enough of the basics, let’s look at the design pattern"},{"depth":5,"slug":"creating-a-custom-error-type","text":"Creating a custom error type"},{"depth":5,"slug":"throwing-a-custom-error","text":"Throwing a custom error"},{"depth":5,"slug":"catching-a-custom-error","text":"Catching a custom error"},{"depth":5,"slug":"making-a-reusable-error-base","text":"Making a reusable error base"}];
				}
				async function Content$c() {
					const { layout, ...content } = frontmatter$c;
					content.file = file$c;
					content.url = url$c;
					const contentFragment = createVNode(Fragment, { 'set:html': html$b });
					return createVNode($$BlogPost, {
									file: file$c,
									url: url$c,
									content,
									frontmatter: content,
									headings: getHeadings$c(),
									rawContent: rawContent$b,
									compiledContent: compiledContent$b,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$c[Symbol.for('astro.needsHeadRendering')] = false;

const _page29 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$c,
  compiledContent: compiledContent$b,
  default: Content$c,
  file: file$c,
  frontmatter: frontmatter$c,
  getHeadings: getHeadings$c,
  rawContent: rawContent$b,
  url: url$c
}, Symbol.toStringTag, { value: 'Module' }));

const html$a = "<p>Here are two ways to create an endpoint in Astrojs. Let’s play around with the idea that we want to use a form to upload an image and two ways to do that in Astrojs. First a primer om formData.</p>\n<h5 id=\"about-formdata\">About formData</h5>\n<blockquote>\n<p><code>FormData</code> [is an] interface [which] provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the fetch() or XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to “multipart/form-data”. Source: MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData?ref=hackernoon.com\">FormData</a></p>\n</blockquote>\n<p>Basically instead of using JSON to send data to and from your server, you’d use <code>FormData</code>, except unlike JSON it supports files natively.</p>\n<p>For example:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// 1. Create or Get a File</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/** Creating a File */</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">fileContent</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">`Text content...Lorem Ipsium`</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">buffer</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">TextEncoder</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">encode</span><span style=\"color: #C9D1D9\">(fileContent)</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">blob</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Blob</span><span style=\"color: #C9D1D9\">([buffer])</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">file</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">File</span><span style=\"color: #C9D1D9\">([blob], </span><span style=\"color: #A5D6FF\">'text-file.txt'</span><span style=\"color: #C9D1D9\">, { type: </span><span style=\"color: #A5D6FF\">'text/plain'</span><span style=\"color: #C9D1D9\"> })</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/** OR */</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">/** Getting a File */</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">fileInput</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> document.</span><span style=\"color: #D2A8FF\">querySelector</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'#files'</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #8B949E\">// &#x3C;input id=\"files\" type=\"file\" multiple /></span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">file</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> fileInput.files.</span><span style=\"color: #D2A8FF\">item</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// 2. Create FormData</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">formData</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">FormData</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// 3. Add File to FormData through the `file` field</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">formData.</span><span style=\"color: #D2A8FF\">append</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'file'</span><span style=\"color: #C9D1D9\">, file) </span><span style=\"color: #8B949E\">// FormData keys are called fields</span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">file</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> fileInput.files.</span><span style=\"color: #D2A8FF\">item</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<blockquote>\n<p>fileInput.files is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileList?ref=hackernoon.com\">FileList</a>, which is similar but <strong>not</strong> an array, to work around this you can convert the <code>FileList</code> to an array of <code>File</code>’s using <code>Array.from</code>\nFor our use case, since we’re only trying to upload one file, it’d be easier to select the first File in the <code>FileList</code>\nLearn more on MDN - <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files?ref=hackernoon.com\">HTMLInputElement</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File?ref=hackernoon.com\">MDN - File</a>\nNote: you can also just directly use <code>FileReader</code> instead of using an <code>&#x3C;input /></code> element.</p>\n</blockquote>\n<h5 id=\"usage\">Usage</h5>\n<p>There are 2 ways to support FormData in Astro; the easy and the hard way, I’ll show you both.</p>\n<p>Note: both the easy and hard way require Astro to be configured in server (SSR) mode.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { defineConfig } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'astro/config'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// https://astro.build/config</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #FFA657\"> </span><span style=\"color: #FF7B72\">default</span><span style=\"color: #FFA657\"> </span><span style=\"color: #D2A8FF\">defineConfig</span><span style=\"color: #FFA657\">({</span></span>\n<span class=\"line\"><span style=\"color: #FFA657\">  </span><span style=\"color: #C9D1D9\">output: </span><span style=\"color: #A5D6FF\">'server'</span><span style=\"color: #FFA657\">,</span></span>\n<span class=\"line\"><span style=\"color: #FFA657\">})</span></span></code></pre>\n<h5 id=\"easy-way\">Easy way</h5>\n<p>The easy way requires you to create a new .ts file that will act as your endpoint, for example, if you wanted a /upload endpoint, you would create a <code>.ts</code> file in <code>src/pages</code>.</p>\n<p>Read Astro’s official docs on <code>File Routes</code> to learn more</p>\n<p>Your basic file tree should look like this after creating your endpoint.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">src/</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> pages/</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">   upload.ts</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">   index.astro</span></span></code></pre>\n<p>Inside your <code>index.astro</code> file follow the example I gave above in #getting-started, on getting <code>FormData</code> up and running.</p>\n<p>Once you’ve created an instance of <code>FormData</code> and populated it with the files you’d like to upload, you then just setup a POST request to that endpoint.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">res</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">fetch</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'/upload'</span><span style=\"color: #C9D1D9\">, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  method: </span><span style=\"color: #A5D6FF\">'POST'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  body: formData,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">result</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> res.</span><span style=\"color: #D2A8FF\">json</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #C9D1D9\">(result))</span></span></code></pre>\n<p>From the endpoint side you’d then need to export a post method to handle the POST request being sent,</p>\n<p>Here is where things get complex. I recommend going through Astro’s File Routes Docs.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">type</span><span style=\"color: #C9D1D9\"> { APIContext } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'astro'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// File routes export a get() function, which gets called to generate the file.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Return an object with `body` to save the file contents in your final build.</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// If you export a post() function, you can catch post requests, and respond accordingly</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">post</span><span style=\"color: #C9D1D9\">({ </span><span style=\"color: #FFA657\">request</span><span style=\"color: #C9D1D9\"> }</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">APIContext</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">formData</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> request.</span><span style=\"color: #D2A8FF\">formData</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    body: </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      fileNames: </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">Promise</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">all</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        formData.</span><span style=\"color: #D2A8FF\">getAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'files'</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">file</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">File</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            webkitRelativePath: file.webkitRelativePath,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            lastModified: file.lastModified,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            name: file.name,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            size: file.size,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            type: file.type,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            buffer: {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">              type: </span><span style=\"color: #A5D6FF\">'Buffer'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">              value: Array.</span><span style=\"color: #D2A8FF\">from</span><span style=\"color: #C9D1D9\">(</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">                </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Int8Array</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> file.</span><span style=\"color: #D2A8FF\">arrayBuffer</span><span style=\"color: #C9D1D9\">()).</span><span style=\"color: #D2A8FF\">values</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">              ),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      ),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>The basics of what’s happening here are fairly simple, but the code all put together seems rather complex, so let’s break it down.</p>\n<p>First, the exported post function handles POST requests as its name suggests, meaning if you send a get request and don’t export a get function an error will occur.</p>\n<p><code>export async function post() { ... }</code> what?! Yeah, I too recently learned that Astro supports this out of the box, which is awesome.</p>\n<blockquote>\n<p>W3Schools cover <code>POST and GET</code> fairly well, take a look at their article if you’re not familiar with POST and GET requests</p>\n</blockquote>\n<p>Let’s first talk about the <code>request</code> parameter. As it’s name suggests <code>request</code> is an instance of the Request class which includes all the methods that Request supports, including a method for transforming said request into FormData you can work with.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">post</span><span style=\"color: #C9D1D9\">({ </span><span style=\"color: #FFA657\">request</span><span style=\"color: #C9D1D9\"> }</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">APIContext</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">formData</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> request.</span><span style=\"color: #D2A8FF\">formData</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>Using formData you can get all the instances of a specific field (FormData keys are called fields), for example, get all File’s in the file field.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">post</span><span style=\"color: #C9D1D9\">({ </span><span style=\"color: #FFA657\">request</span><span style=\"color: #C9D1D9\"> }</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">APIContext</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">formData</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> request.</span><span style=\"color: #D2A8FF\">formData</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    body: </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #8B949E\">// getAll('file') will return an array of File classes</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      fileNames: formData.</span><span style=\"color: #D2A8FF\">getAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'file'</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>The problem with this solution is that it will return {“fileNames”:[{}]} due to JSON.stringify being unable to convert File classes to a string.</p>\n<p>To deal with this formatting issue we need to format the File’s array properly.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">post</span><span style=\"color: #C9D1D9\">({ </span><span style=\"color: #FFA657\">request</span><span style=\"color: #C9D1D9\"> }</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">APIContext</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">formData</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> request.</span><span style=\"color: #D2A8FF\">formData</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    body: </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #8B949E\">// getAll('files') will return an array of File classes</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      fileNames: formData.</span><span style=\"color: #D2A8FF\">getAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'files'</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">file</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">File</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          webkitRelativePath: file.webkitRelativePath,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          lastModified: file.lastModified,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          name: file.name,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          size: file.size,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          type: file.type,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          buffer: {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #8B949E\">/* ... */</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>The last part is converting ArrayBuffers into data that is easy to work with, for this case using arrays to represent buffers works rather well, so we just do some conversion,</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">post</span><span style=\"color: #C9D1D9\">({ </span><span style=\"color: #FFA657\">request</span><span style=\"color: #C9D1D9\"> }</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">APIContext</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">formData</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> request.</span><span style=\"color: #D2A8FF\">formData</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    body: </span><span style=\"color: #79C0FF\">JSON</span><span style=\"color: #C9D1D9\">.</span><span style=\"color: #D2A8FF\">stringify</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #8B949E\">// getAll('file') will return an array of File classes</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      fileNames: formData.</span><span style=\"color: #D2A8FF\">getAll</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'file'</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">file</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">File</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          </span><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          buffer: {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            type: </span><span style=\"color: #A5D6FF\">'Buffer'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            value: Array.</span><span style=\"color: #D2A8FF\">from</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">Int8Array</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> file.</span><span style=\"color: #D2A8FF\">arrayBuffer</span><span style=\"color: #C9D1D9\">()).</span><span style=\"color: #D2A8FF\">values</span><span style=\"color: #C9D1D9\">()),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">          },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      }),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>That’s the easy way. Using Astro’s baked in file routes to act as an endpoint for your FormData.</p>\n<blockquote>\n<p>To actually run Astro with the /upload endpoint all you need is npm run dev.</p>\n</blockquote>\n<p>You can view a demo of the easy way on <a href=\"https://stackblitz.com/edit/github-a2gvve-izjjam?file=README.md%2Castro.config.mjs%2Csrc%2Findex.ts&#x26;on=stackblitz&#x26;ref=hackernoon.com\">Stackblitz</a> and <a href=\"https://github.com/okikio/astro-form-data-easy-edition?ref=hackernoon.com\">GitHub</a>.</p>\n<h5 id=\"hard-way\">Hard way</h5>\n<p>The hard way requires you to use the <a href=\"https://github.com/expressjs/multer?ref=hackernoon.com\">multer</a> middleware together with <a href=\"https://expressjs.com/?ref=hackernoon.com\">expressjs</a>, in order to make the @astrojs/node integration support FormData requests.</p>\n<p>The hard way mostly builds on the #easy-way, except instead of a <code>src/pages/upload.ts</code> file, you would instead use a <code>server.mjs</code> file in the root directory to define your endpoints, so, your file structure would look more like this.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #c9d1d9\">src/</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\"> pages/</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">   index.astro</span></span>\n<span class=\"line\"><span style=\"color: #c9d1d9\">server.mjs</span></span></code></pre>\n<p>The core of the hard way occurs inside <code>server.mjs</code>. <code>server.mjs</code> should look like this by the end of this blog post.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> express </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'express'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { handler </span><span style=\"color: #FF7B72\">as</span><span style=\"color: #C9D1D9\"> ssrHandler } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'./dist/server/entry.mjs'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> multer </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'multer'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">app</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">express</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">use</span><span style=\"color: #C9D1D9\">(express.</span><span style=\"color: #D2A8FF\">static</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'dist/client/'</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">use</span><span style=\"color: #C9D1D9\">(ssrHandler)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">upload</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">multer</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">post</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'/upload'</span><span style=\"color: #C9D1D9\">, upload.</span><span style=\"color: #D2A8FF\">array</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'file'</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">req</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">next</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.files is an object (String -> Array) where fieldname is the key, and the value is array of files</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// e.g.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.files['avatar'][0] -> File</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.files['gallery'] -> Array</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.body will contain the text fields, if there were any</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(req.files)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  res.</span><span style=\"color: #D2A8FF\">json</span><span style=\"color: #C9D1D9\">({ fileNames: req.files })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">listen</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">8080</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<p>When you build an Astro project in server (SSR) mode (e.g. <code>npm run build</code>), Astro will automatically generate a <code>dist/server/entry.mjs</code> file, it’s this file that allows us to build our own custom nodejs server and then run Astro off this server.</p>\n<p>For this specific use case we are using express for the server, and to enable FormData support in express we need the multer middleware, so if you’re familiar with express at all this should look familiar.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> express </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'express'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { handler </span><span style=\"color: #FF7B72\">as</span><span style=\"color: #C9D1D9\"> ssrHandler } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'./dist/server/entry.mjs'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">app</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">express</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">use</span><span style=\"color: #C9D1D9\">(express.</span><span style=\"color: #D2A8FF\">static</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'dist/client/'</span><span style=\"color: #C9D1D9\">))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">use</span><span style=\"color: #C9D1D9\">(ssrHandler)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">listen</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">8080</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<p>The ssrHandler enables Astro to run on the express server, for the most part it can be treated like any other express middleware and ignored.</p>\n<blockquote>\n<p>Note: If you’re not familiar with the code snippet above, please go through express’ documentation, it’ll make the rest of the explanation easier to understand</p>\n</blockquote>\n<p>The real interesting part is where multer and express meet.</p>\n<p>By using a POST request handler we are able to recieve POST requests made to the /upload endpoint and respond back with the parsed FormData results, but unlike in the #easy-way, express is able to handle all the formatting allowing File responses to be as expected.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> multer </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'multer'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">app</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">express</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">upload</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">multer</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">post</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'/upload'</span><span style=\"color: #C9D1D9\">, upload.</span><span style=\"color: #D2A8FF\">array</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'files'</span><span style=\"color: #C9D1D9\">), </span><span style=\"color: #FF7B72\">function</span><span style=\"color: #C9D1D9\"> (</span><span style=\"color: #FFA657\">req</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">next</span><span style=\"color: #C9D1D9\">) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.files is an object (String -> Array) where fieldname is the key, and the value is array of files</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// e.g.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.files['avatar'][0] -> File</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.files['gallery'] -> Array</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">//</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// req.body will contain the text fields, if there were any</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  console.</span><span style=\"color: #D2A8FF\">log</span><span style=\"color: #C9D1D9\">(req.files)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  res.</span><span style=\"color: #D2A8FF\">json</span><span style=\"color: #C9D1D9\">({ fileNames: req.files })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">app.</span><span style=\"color: #D2A8FF\">listen</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">8080</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<p>Response to express POST request.</p>\n<p>That’s the hard way. Using Astro’s SSR mode together with express and multer to create the <code>/upload</code> endpoint which supports formData.</p>\n<blockquote>\n<p>To actually run Astro you need to do a bit more than you’d need for the #easy-way.</p>\n<ol>\n<li>Install express and multer -> <code>npm install express multer</code></li>\n<li>Build Astro handler -> <code>npm run build</code></li>\n<li>Run server.mjs -> <code>node server.mjs</code></li>\n</ol>\n<p>The hard way may seem easier, but that is due to having done alot of the prep work in the #easy-way, it is actually more overall work than the easy way.</p>\n</blockquote>\n<p>You can view a demo of the hard way on <a href=\"https://stackblitz.com/edit/github-a2gvve?file=server.mjs&#x26;ref=hackernoon.com\">Stackblitz</a> or <a href=\"https://github.com/okikio/astro-form-data?ref=hackernoon.com\">GitHUB</a></p>\n<h5 id=\"conclusion\">Conclusion</h5>\n<p>There are 2 ways of using FormData with Astro, the easy way and the hard way.</p>\n<p>The easy way is to use Astro’s bakend in File Routes to act as an endpoint for your FormData POST requests.</p>\n<p>The hard way is to use Astro’s SSR mode together with express and multer to create a <code>/upload</code> endpoint which supports FormData.</p>\n<p>There is no right way, but I will recommend the easy way as it is easier and less confusing to work with overall.</p>\n<hr>\n<p>Original article at <a href=\"https://hackernoon.com/upload-files-easily-and-quickly-in-nodejs-using-astro\">hackernoon.com</a></p>";

				const frontmatter$b = {"layout":"../../layouts/BlogPost.astro","title":"How to create an endpoint in Astrojs","description":"","pubDate":"Jan 11 2023","heroImage":"/placeholder-hero.jpg"};
				const file$b = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/creating-endpoint-in-astro.md";
				const url$b = "/blog/creating-endpoint-in-astro";
				function rawContent$a() {
					return "\nHere are two ways to create an endpoint in Astrojs. Let's play around with the idea that we want to use a form to upload an image and two ways to do that in Astrojs. First a primer om formData.\n\n##### About formData\n\n> `FormData` [is an] interface [which] provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the fetch() or XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\". Source: MDN - [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData?ref=hackernoon.com)\n\nBasically instead of using JSON to send data to and from your server, you'd use `FormData`, except unlike JSON it supports files natively.\n\nFor example:\n\n```javascript\n// 1. Create or Get a File\n/** Creating a File */\nconst fileContent = `Text content...Lorem Ipsium`\nconst buffer = new TextEncoder().encode(fileContent)\nconst blob = new Blob([buffer])\nconst file = new File([blob], 'text-file.txt', { type: 'text/plain' })\n/** OR */\n/** Getting a File */\nconst fileInput = document.querySelector('#files') // <input id=\"files\" type=\"file\" multiple />\nconst file = fileInput.files.item(0)\n\n// 2. Create FormData\nconst formData = new FormData()\n\n// 3. Add File to FormData through the `file` field\nformData.append('file', file) // FormData keys are called fields\n```\n\n```javascript\nconst file = fileInput.files.item(0)\n```\n\n> fileInput.files is a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList?ref=hackernoon.com), which is similar but **not** an array, to work around this you can convert the `FileList` to an array of `File`'s using `Array.from`\n> For our use case, since we're only trying to upload one file, it'd be easier to select the first File in the `FileList`\n> Learn more on MDN - [HTMLInputElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files?ref=hackernoon.com) and [MDN - File](https://developer.mozilla.org/en-US/docs/Web/API/File?ref=hackernoon.com)\n> Note: you can also just directly use `FileReader` instead of using an `<input />` element.\n\n##### Usage\n\nThere are 2 ways to support FormData in Astro; the easy and the hard way, I'll show you both.\n\nNote: both the easy and hard way require Astro to be configured in server (SSR) mode.\n\n```javascript\nimport { defineConfig } from 'astro/config'\n\n// https://astro.build/config\nexport default defineConfig({\n  output: 'server',\n})\n```\n\n##### Easy way\n\nThe easy way requires you to create a new .ts file that will act as your endpoint, for example, if you wanted a /upload endpoint, you would create a `.ts` file in `src/pages`.\n\nRead Astro's official docs on `File Routes` to learn more\n\nYour basic file tree should look like this after creating your endpoint.\n\n```text\nsrc/\n pages/\n   upload.ts\n   index.astro\n```\n\nInside your `index.astro` file follow the example I gave above in #getting-started, on getting `FormData` up and running.\n\nOnce you've created an instance of `FormData` and populated it with the files you'd like to upload, you then just setup a POST request to that endpoint.\n\n```javascript\n// ...\nconst res = await fetch('/upload', {\n  method: 'POST',\n  body: formData,\n})\nconst result = await res.json()\nconsole.log(JSON.stringify(result))\n```\n\nFrom the endpoint side you'd then need to export a post method to handle the POST request being sent,\n\nHere is where things get complex. I recommend going through Astro's File Routes Docs.\n\n```javascript\nimport type { APIContext } from 'astro'\n\n// File routes export a get() function, which gets called to generate the file.\n// Return an object with `body` to save the file contents in your final build.\n// If you export a post() function, you can catch post requests, and respond accordingly\nexport async function post({ request }: APIContext) {\n  const formData = await request.formData()\n  return {\n    body: JSON.stringify({\n      fileNames: await Promise.all(\n        formData.getAll('files').map(async (file: File) => {\n          return {\n            webkitRelativePath: file.webkitRelativePath,\n            lastModified: file.lastModified,\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            buffer: {\n              type: 'Buffer',\n              value: Array.from(\n                new Int8Array(await file.arrayBuffer()).values()\n              ),\n            },\n          }\n        })\n      ),\n    }),\n  }\n}\n```\n\nThe basics of what's happening here are fairly simple, but the code all put together seems rather complex, so let's break it down.\n\nFirst, the exported post function handles POST requests as its name suggests, meaning if you send a get request and don't export a get function an error will occur.\n\n`export async function post() { ... }` what?! Yeah, I too recently learned that Astro supports this out of the box, which is awesome.\n\n> W3Schools cover `POST and GET` fairly well, take a look at their article if you're not familiar with POST and GET requests\n\nLet's first talk about the `request` parameter. As it's name suggests `request` is an instance of the Request class which includes all the methods that Request supports, including a method for transforming said request into FormData you can work with.\n\n```javascript\n// ...\nexport async function post({ request }: APIContext) {\n  const formData = await request.formData()\n  // ...\n}\n```\n\nUsing formData you can get all the instances of a specific field (FormData keys are called fields), for example, get all File's in the file field.\n\n```javascript\n// ...\nexport async function post({ request }: APIContext) {\n  const formData = await request.formData()\n  return {\n    body: JSON.stringify({\n      // getAll('file') will return an array of File classes\n      fileNames: formData.getAll('file'),\n    }),\n  }\n}\n```\n\nThe problem with this solution is that it will return {\"fileNames\":[{}]} due to JSON.stringify being unable to convert File classes to a string.\n\nTo deal with this formatting issue we need to format the File's array properly.\n\n```javascript\n// ...\nexport async function post({ request }: APIContext) {\n  const formData = await request.formData()\n  return {\n    body: JSON.stringify({\n      // getAll('files') will return an array of File classes\n      fileNames: formData.getAll('files').map(async (file: File) => {\n        return {\n          webkitRelativePath: file.webkitRelativePath,\n          lastModified: file.lastModified,\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          buffer: {\n            /* ... */\n          },\n        }\n      }),\n    }),\n  }\n}\n```\n\nThe last part is converting ArrayBuffers into data that is easy to work with, for this case using arrays to represent buffers works rather well, so we just do some conversion,\n\n```javascript\n// ...\nexport async function post({ request }: APIContext) {\n  const formData = await request.formData()\n  return {\n    body: JSON.stringify({\n      // getAll('file') will return an array of File classes\n      fileNames: formData.getAll('file').map(async (file: File) => {\n        return {\n          // ...\n          buffer: {\n            type: 'Buffer',\n            value: Array.from(new Int8Array(await file.arrayBuffer()).values()),\n          },\n        }\n      }),\n    }),\n  }\n}\n```\n\nThat's the easy way. Using Astro's baked in file routes to act as an endpoint for your FormData.\n\n> To actually run Astro with the /upload endpoint all you need is npm run dev.\n\nYou can view a demo of the easy way on [Stackblitz](https://stackblitz.com/edit/github-a2gvve-izjjam?file=README.md%2Castro.config.mjs%2Csrc%2Findex.ts&on=stackblitz&ref=hackernoon.com) and [GitHub](https://github.com/okikio/astro-form-data-easy-edition?ref=hackernoon.com).\n\n##### Hard way\n\nThe hard way requires you to use the [multer](https://github.com/expressjs/multer?ref=hackernoon.com) middleware together with [expressjs](https://expressjs.com/?ref=hackernoon.com), in order to make the @astrojs/node integration support FormData requests.\n\nThe hard way mostly builds on the #easy-way, except instead of a `src/pages/upload.ts` file, you would instead use a `server.mjs` file in the root directory to define your endpoints, so, your file structure would look more like this.\n\n```text\nsrc/\n pages/\n   index.astro\nserver.mjs\n```\n\nThe core of the hard way occurs inside `server.mjs`. `server.mjs` should look like this by the end of this blog post.\n\n```javascript\nimport express from 'express'\nimport { handler as ssrHandler } from './dist/server/entry.mjs'\nimport multer from 'multer'\n\nconst app = express()\napp.use(express.static('dist/client/'))\napp.use(ssrHandler)\n\nconst upload = multer()\napp.post('/upload', upload.array('file'), function (req, res, next) {\n  // req.files is an object (String -> Array) where fieldname is the key, and the value is array of files\n  //\n  // e.g.\n  // req.files['avatar'][0] -> File\n  // req.files['gallery'] -> Array\n  //\n  // req.body will contain the text fields, if there were any\n  console.log(req.files)\n  res.json({ fileNames: req.files })\n})\n\napp.listen(8080)\n```\n\nWhen you build an Astro project in server (SSR) mode (e.g. `npm run build`), Astro will automatically generate a `dist/server/entry.mjs` file, it's this file that allows us to build our own custom nodejs server and then run Astro off this server.\n\nFor this specific use case we are using express for the server, and to enable FormData support in express we need the multer middleware, so if you're familiar with express at all this should look familiar.\n\n```javascript\nimport express from 'express'\nimport { handler as ssrHandler } from './dist/server/entry.mjs'\n\nconst app = express()\napp.use(express.static('dist/client/'))\napp.use(ssrHandler)\n\n// ...\napp.listen(8080)\n```\n\nThe ssrHandler enables Astro to run on the express server, for the most part it can be treated like any other express middleware and ignored.\n\n> Note: If you're not familiar with the code snippet above, please go through express' documentation, it'll make the rest of the explanation easier to understand\n\nThe real interesting part is where multer and express meet.\n\nBy using a POST request handler we are able to recieve POST requests made to the /upload endpoint and respond back with the parsed FormData results, but unlike in the #easy-way, express is able to handle all the formatting allowing File responses to be as expected.\n\n```javascript\n// ...\nimport multer from 'multer'\n\nconst app = express()\n// ...\n\nconst upload = multer()\napp.post('/upload', upload.array('files'), function (req, res, next) {\n  // req.files is an object (String -> Array) where fieldname is the key, and the value is array of files\n  //\n  // e.g.\n  // req.files['avatar'][0] -> File\n  // req.files['gallery'] -> Array\n  //\n  // req.body will contain the text fields, if there were any\n  console.log(req.files)\n  res.json({ fileNames: req.files })\n})\n\napp.listen(8080)\n```\n\nResponse to express POST request.\n\nThat's the hard way. Using Astro's SSR mode together with express and multer to create the `/upload` endpoint which supports formData.\n\n> To actually run Astro you need to do a bit more than you'd need for the #easy-way.\n>\n> 1. Install express and multer -> `npm install express multer`\n> 2. Build Astro handler -> `npm run build`\n> 3. Run server.mjs -> `node server.mjs`\n>\n> The hard way may seem easier, but that is due to having done alot of the prep work in the #easy-way, it is actually more overall work than the easy way.\n\nYou can view a demo of the hard way on [Stackblitz](https://stackblitz.com/edit/github-a2gvve?file=server.mjs&ref=hackernoon.com) or [GitHUB](https://github.com/okikio/astro-form-data?ref=hackernoon.com)\n\n##### Conclusion\n\nThere are 2 ways of using FormData with Astro, the easy way and the hard way.\n\nThe easy way is to use Astro's bakend in File Routes to act as an endpoint for your FormData POST requests.\n\nThe hard way is to use Astro's SSR mode together with express and multer to create a `/upload` endpoint which supports FormData.\n\nThere is no right way, but I will recommend the easy way as it is easier and less confusing to work with overall.\n\n---\n\nOriginal article at [hackernoon.com](https://hackernoon.com/upload-files-easily-and-quickly-in-nodejs-using-astro)\n";
				}
				function compiledContent$a() {
					return html$a;
				}
				function getHeadings$b() {
					return [{"depth":5,"slug":"about-formdata","text":"About formData"},{"depth":5,"slug":"usage","text":"Usage"},{"depth":5,"slug":"easy-way","text":"Easy way"},{"depth":5,"slug":"hard-way","text":"Hard way"},{"depth":5,"slug":"conclusion","text":"Conclusion"}];
				}
				async function Content$b() {
					const { layout, ...content } = frontmatter$b;
					content.file = file$b;
					content.url = url$b;
					const contentFragment = createVNode(Fragment, { 'set:html': html$a });
					return createVNode($$BlogPost, {
									file: file$b,
									url: url$b,
									content,
									frontmatter: content,
									headings: getHeadings$b(),
									rawContent: rawContent$a,
									compiledContent: compiledContent$a,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$b[Symbol.for('astro.needsHeadRendering')] = false;

const _page30 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$b,
  compiledContent: compiledContent$a,
  default: Content$b,
  file: file$b,
  frontmatter: frontmatter$b,
  getHeadings: getHeadings$b,
  rawContent: rawContent$a,
  url: url$b
}, Symbol.toStringTag, { value: 'Module' }));

const html$9 = "<p>When you’ve read this article also check out <a href=\"https://abseil.io/resources/swe-book/html/ch12.html\">Googles take on unit tests</a>. However I can’t ge rid of the feeling that the ROI in unit test does not add up. Since we introduced Typescript and a CI pipline at SKF I have not had one case were unit test saved us for 1.5 years. However writing test always takes time and there seems to always be some pitfall messing things up until we get it right. However, end-2-end tests (Playwright/Cypress) I still finding valuable.</p>\n<h5 id=\"types-of-tests\">Types of tests</h5>\n<p>Visual regression tests/Snapshot testing\nThe main purpose for snapshot testing is to ensure that components doesn’t accidentally get changed. Scenario: a developer changes some code as part of a user story for Component A but is unaware that the same code is used for Component B, this would cause the snapshot test for Component B to fail, telling the developer to investigate if that change really was planned.</p>\n<h5 id=\"rendering-tests\">Rendering tests</h5>\n<p>Rendering tests follow the principle of “Given a set of props or state, a set of DOM elements should be rendered”. These kind of tests serves both to ensure that the component behaves in the way we want, but also as a documentation of the component.</p>\n<h5 id=\"logic-tests\">Logic tests</h5>\n<p>Logic tests asserts that the application changes when the user interacts with it. A key to writing successful logic tests is to render the component in a realistic context, meaning that rather than rendering the component explicitly in the test, render a component higher up in the component tree.</p>\n<h5 id=\"logic-tests-using-callbacks\">Logic tests using callbacks</h5>\n<p>For a component with callbacks, logic tests can be performed to ensure that when a user interacts with a component, a given callback is called with a specific set of arguments. These kind of tests are useful when dealing with shared components that need to uphold an interface to the consumer. The drawback of these tests are that they validate upon information not usable by the end user.</p>\n<h5 id=\"mocking\">Mocking</h5>\n<p>Try mocking on as low level as possible, often meaning mocking the network request using MSW.</p>\n<h5 id=\"libraries-to-use\">Libraries to use</h5>\n<p>We use React Testing Library exclusively with Jest as our testing framework. To intercept and mock network requests we use Mock Service Worker .</p>\n<h5 id=\"do-not-import-enzyme\">Do not import Enzyme!</h5>\n<p>Prefer the user-event library over the low level fireEvent .\nWhat components to test\nIt is a good practice to build complex components by composition, that is by building them out of other more specific components. Breaking up a component this way makes it easier to work with. In many cases such components exist only for the sake of code readability and should not be tested in isolation. Writing tests for internal component hinders code refactoring and makes it hard to draw test boundaries.</p>\n<p>Test a component as it will be used. If you distribute a package, only write tests for the components that you export from the package.</p>\n<h5 id=\"accessibility\">Accessibility</h5>\n<p>Write all tests from a user perspective. Find elements in the same way a real user would interact with the application. Never lookup elements using id or class and try to avoid relying on data-id. A user cannot see any of these identifiers. Furthermore class attributes should be used for styling purposes only.</p>\n<p>Instead look for elements by their ARIA roles , their label text, finding links and buttons from their text, etc.</p>\n<p>As a last resort data-id can be used where the text content and label do not make sense or is not practical.</p>\n<h5 id=\"examples\">Examples</h5>\n<p>Find a button by role.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">screen.</span><span style=\"color: #D2A8FF\">getByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<p>Try to be as specific as possible by making use of the elements’ accessibility names in the accessibility tree.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">lastName</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> screen.</span><span style=\"color: #D2A8FF\">getByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'textbox'</span><span style=\"color: #C9D1D9\">, { name:</span><span style=\"color: #A5D6FF\"> /last_name/</span><span style=\"color: #C9D1D9\"> })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">userEvent.</span><span style=\"color: #D2A8FF\">type</span><span style=\"color: #C9D1D9\">(lastName, </span><span style=\"color: #A5D6FF\">'Smith'</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<p>Try to narrow down your search scope by using within.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">form</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> screen.</span><span style=\"color: #D2A8FF\">getByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'form'</span><span style=\"color: #C9D1D9\">, { name:</span><span style=\"color: #A5D6FF\"> /edit_profile/</span><span style=\"color: #C9D1D9\"> })</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">within</span><span style=\"color: #C9D1D9\">(form).</span><span style=\"color: #D2A8FF\">getByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">, { name:</span><span style=\"color: #A5D6FF\"> /save/</span><span style=\"color: #C9D1D9\"> })</span></span></code></pre>\n<h5 id=\"async-updates\">Async updates</h5>\n<p>When testing components that are using React Query one must remember that there will be several updates to the component. These components usually render some intermediary loading state while waiting for the data to be fetched.</p>\n<p>Use waitForElementToBeRemoved or similar to wait for the component to move from the loading state to its final state.</p>\n<p>If the test should assert that a loading spinner is displayed during the loading state, make sure to add a considerable delay to the mocked data call in the MSW handler. Otherwise the component may update so fast that the loading state can go by unnoticed in some cases making it highly timing sensitive and thus unstable.</p>\n<h5 id=\"the-not-wrapped-in-act-warning\">The not wrapped in act(…) warning</h5>\n<p>Sooner or later you’ll run into the warning An update to Component inside a test was not wrapped in act(…).. The reason behind this warning is explained in this excellent blog post by Kent C. Dodds. In short every interaction with a component in a test must be wrapped in act(…). This informs React that we expect an update to happen when the user interacts with the component. When an interaction is not wrapped in act(…) and we get the warning it simply means that React has detected an update that is not covered by the test.</p>\n<p>A common cause for the warning is that the component updates after an async operation has completed. Maybe a loading spinner is removed after a data fetch call completes, but the test is not asserting that. The waitForElementToBeRemoved is useful in these scenarios.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">waitForElementToBeRemoved</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> screen.</span><span style=\"color: #D2A8FF\">queryByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'progressbar'</span><span style=\"color: #C9D1D9\">))</span></span></code></pre>\n<p>Helper libraries such as user-event do wrap calls in <code>act(...)</code> so running <code>userEvent.click(element)</code> by itself is enough.</p>\n<h5 id=\"use-getby-findby-or-queryby\">Use getBy, findBy or queryBy?</h5>\n<p>React Testing Library provides three versions of the element query methods: getBy*, findBy* and queryBy*. The difference between them is outlined in detail in the manual . Use the most appropriate version to avoid unnecessary code.</p>\n<h5 id=\"rules-of-thumb\">Rules of thumb</h5>\n<p>Use getBy to find an element or to assert its existence:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> screen.</span><span style=\"color: #D2A8FF\">getByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<p>Use queryBy in conjunction with expect to assert non-existence:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(screen.</span><span style=\"color: #D2A8FF\">queryByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">)).not.</span><span style=\"color: #D2A8FF\">toBeInDocument</span><span style=\"color: #C9D1D9\">()</span></span></code></pre>\n<p>Use findBy when an element is expected but will be rendered after an async operation has completed:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> screen.</span><span style=\"color: #D2A8FF\">findByRole</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">)</span></span></code></pre>\n<h5 id=\"msw-handlers\">MSW handlers</h5>\n<p>Avoid defining global MSW handlers that are shared with all tests. Each handler should be exported as a function that returns a handler. These can then be used as building blocks for composing a set of handlers that is specific to the needs of a particular test.</p>\n<p>As an example consider a test that needs to fetch a gateway and a list of available firmware versions. To setup the handlers for such a test the use method is used.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">server.</span><span style=\"color: #D2A8FF\">use</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">getGateway</span><span style=\"color: #C9D1D9\">(), </span><span style=\"color: #D2A8FF\">getFirmwares</span><span style=\"color: #C9D1D9\">())</span></span></code></pre>\n<p>The getFirmwares method is then exported from a shared module containing all handler builders and could look something like:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">export</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getFirmwares</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> rest.</span><span style=\"color: #D2A8FF\">get</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">`/firmwares`</span><span style=\"color: #C9D1D9\">, (</span><span style=\"color: #FFA657\">req</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">res</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">ctx</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">res</span><span style=\"color: #C9D1D9\">(ctx.</span><span style=\"color: #D2A8FF\">status</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">200</span><span style=\"color: #C9D1D9\">), ctx.</span><span style=\"color: #D2A8FF\">json</span><span style=\"color: #C9D1D9\">({ firmwares: [</span><span style=\"color: #A5D6FF\">'1.0'</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">'2.0'</span><span style=\"color: #C9D1D9\">] }))</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>Notes on performance\nWe have noticed that some tests can take a lot of time to run. You can read more about it in the comment field here . In short we found that the query *byRole can take a long time for large document trees. One way to improve that can be to use within to narrow down the scope of the query.</p>\n<h5 id=\"dos-and-donts\">Do’s and don’ts</h5>\n<p>Don’t mock fetch, use MWS instead\nDon’t mock Redux/Context, use MWS instead\nWriting tests that use rerender is typically a sign that the test should be rendering a parent component instead\nDon’t log to the console in tests. All logs outputted during tests needs to be investigated.\nCode duplication in tests is fine, tests should be easy to read, verbose and easy to change\nDiscussion\nWould it be a good idea to test data being sent to APIs?</p>";

				const frontmatter$a = {"layout":"../../layouts/BlogPost.astro","title":"Guidelines for frontend unit tests at SKF","description":"","heroImage":"/assets/blog/unit-tests.webp","pubDate":"Jan 12 2023"};
				const file$a = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/guidlines-on-unit-testing.md";
				const url$a = "/blog/guidlines-on-unit-testing";
				function rawContent$9() {
					return "\nWhen you've read this article also check out [Googles take on unit tests](https://abseil.io/resources/swe-book/html/ch12.html). However I can't ge rid of the feeling that the ROI in unit test does not add up. Since we introduced Typescript and a CI pipline at SKF I have not had one case were unit test saved us for 1.5 years. However writing test always takes time and there seems to always be some pitfall messing things up until we get it right. However, end-2-end tests (Playwright/Cypress) I still finding valuable.\n\n##### Types of tests\n\nVisual regression tests/Snapshot testing\nThe main purpose for snapshot testing is to ensure that components doesn't accidentally get changed. Scenario: a developer changes some code as part of a user story for Component A but is unaware that the same code is used for Component B, this would cause the snapshot test for Component B to fail, telling the developer to investigate if that change really was planned.\n\n##### Rendering tests\n\nRendering tests follow the principle of \"Given a set of props or state, a set of DOM elements should be rendered\". These kind of tests serves both to ensure that the component behaves in the way we want, but also as a documentation of the component.\n\n##### Logic tests\n\nLogic tests asserts that the application changes when the user interacts with it. A key to writing successful logic tests is to render the component in a realistic context, meaning that rather than rendering the component explicitly in the test, render a component higher up in the component tree.\n\n##### Logic tests using callbacks\n\nFor a component with callbacks, logic tests can be performed to ensure that when a user interacts with a component, a given callback is called with a specific set of arguments. These kind of tests are useful when dealing with shared components that need to uphold an interface to the consumer. The drawback of these tests are that they validate upon information not usable by the end user.\n\n##### Mocking\n\nTry mocking on as low level as possible, often meaning mocking the network request using MSW.\n\n##### Libraries to use\n\nWe use React Testing Library exclusively with Jest as our testing framework. To intercept and mock network requests we use Mock Service Worker .\n\n##### Do not import Enzyme!\n\nPrefer the user-event library over the low level fireEvent .\nWhat components to test\nIt is a good practice to build complex components by composition, that is by building them out of other more specific components. Breaking up a component this way makes it easier to work with. In many cases such components exist only for the sake of code readability and should not be tested in isolation. Writing tests for internal component hinders code refactoring and makes it hard to draw test boundaries.\n\nTest a component as it will be used. If you distribute a package, only write tests for the components that you export from the package.\n\n##### Accessibility\n\nWrite all tests from a user perspective. Find elements in the same way a real user would interact with the application. Never lookup elements using id or class and try to avoid relying on data-id. A user cannot see any of these identifiers. Furthermore class attributes should be used for styling purposes only.\n\nInstead look for elements by their ARIA roles , their label text, finding links and buttons from their text, etc.\n\nAs a last resort data-id can be used where the text content and label do not make sense or is not practical.\n\n##### Examples\n\nFind a button by role.\n\n```javascript\nscreen.getByRole('button')\n```\n\nTry to be as specific as possible by making use of the elements' accessibility names in the accessibility tree.\n\n```javascript\nconst lastName = screen.getByRole('textbox', { name: /last_name/ })\nuserEvent.type(lastName, 'Smith')\n```\n\nTry to narrow down your search scope by using within.\n\n```javascript\nconst form = screen.getByRole('form', { name: /edit_profile/ })\nconst button = within(form).getByRole('button', { name: /save/ })\n```\n\n##### Async updates\n\nWhen testing components that are using React Query one must remember that there will be several updates to the component. These components usually render some intermediary loading state while waiting for the data to be fetched.\n\nUse waitForElementToBeRemoved or similar to wait for the component to move from the loading state to its final state.\n\nIf the test should assert that a loading spinner is displayed during the loading state, make sure to add a considerable delay to the mocked data call in the MSW handler. Otherwise the component may update so fast that the loading state can go by unnoticed in some cases making it highly timing sensitive and thus unstable.\n\n##### The not wrapped in act(...) warning\n\nSooner or later you'll run into the warning An update to Component inside a test was not wrapped in act(...).. The reason behind this warning is explained in this excellent blog post by Kent C. Dodds. In short every interaction with a component in a test must be wrapped in act(...). This informs React that we expect an update to happen when the user interacts with the component. When an interaction is not wrapped in act(...) and we get the warning it simply means that React has detected an update that is not covered by the test.\n\nA common cause for the warning is that the component updates after an async operation has completed. Maybe a loading spinner is removed after a data fetch call completes, but the test is not asserting that. The waitForElementToBeRemoved is useful in these scenarios.\n\n```javascript\nawait waitForElementToBeRemoved(() => screen.queryByRole('progressbar'))\n```\n\nHelper libraries such as user-event do wrap calls in `act(...)` so running `userEvent.click(element)` by itself is enough.\n\n##### Use getBy, findBy or queryBy?\n\nReact Testing Library provides three versions of the element query methods: getBy*, findBy* and queryBy\\*. The difference between them is outlined in detail in the manual . Use the most appropriate version to avoid unnecessary code.\n\n##### Rules of thumb\n\nUse getBy to find an element or to assert its existence:\n\n```javascript\nconst button = screen.getByRole('button')\n```\n\nUse queryBy in conjunction with expect to assert non-existence:\n\n```javascript\nexpect(screen.queryByRole('button')).not.toBeInDocument()\n```\n\nUse findBy when an element is expected but will be rendered after an async operation has completed:\n\n```javascript\nconst button = await screen.findByRole('button')\n```\n\n##### MSW handlers\n\nAvoid defining global MSW handlers that are shared with all tests. Each handler should be exported as a function that returns a handler. These can then be used as building blocks for composing a set of handlers that is specific to the needs of a particular test.\n\nAs an example consider a test that needs to fetch a gateway and a list of available firmware versions. To setup the handlers for such a test the use method is used.\n\n```javascript\nserver.use(getGateway(), getFirmwares())\n```\n\nThe getFirmwares method is then exported from a shared module containing all handler builders and could look something like:\n\n```javascript\nexport const getFirmwares = () => {\n  return rest.get(`/firmwares`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({ firmwares: ['1.0', '2.0'] }))\n  })\n}\n```\n\nNotes on performance\nWe have noticed that some tests can take a lot of time to run. You can read more about it in the comment field here . In short we found that the query \\*byRole can take a long time for large document trees. One way to improve that can be to use within to narrow down the scope of the query.\n\n##### Do's and don'ts\n\nDon't mock fetch, use MWS instead\nDon't mock Redux/Context, use MWS instead\nWriting tests that use rerender is typically a sign that the test should be rendering a parent component instead\nDon't log to the console in tests. All logs outputted during tests needs to be investigated.\nCode duplication in tests is fine, tests should be easy to read, verbose and easy to change\nDiscussion\nWould it be a good idea to test data being sent to APIs?\n";
				}
				function compiledContent$9() {
					return html$9;
				}
				function getHeadings$a() {
					return [{"depth":5,"slug":"types-of-tests","text":"Types of tests"},{"depth":5,"slug":"rendering-tests","text":"Rendering tests"},{"depth":5,"slug":"logic-tests","text":"Logic tests"},{"depth":5,"slug":"logic-tests-using-callbacks","text":"Logic tests using callbacks"},{"depth":5,"slug":"mocking","text":"Mocking"},{"depth":5,"slug":"libraries-to-use","text":"Libraries to use"},{"depth":5,"slug":"do-not-import-enzyme","text":"Do not import Enzyme!"},{"depth":5,"slug":"accessibility","text":"Accessibility"},{"depth":5,"slug":"examples","text":"Examples"},{"depth":5,"slug":"async-updates","text":"Async updates"},{"depth":5,"slug":"the-not-wrapped-in-act-warning","text":"The not wrapped in act(…) warning"},{"depth":5,"slug":"use-getby-findby-or-queryby","text":"Use getBy, findBy or queryBy?"},{"depth":5,"slug":"rules-of-thumb","text":"Rules of thumb"},{"depth":5,"slug":"msw-handlers","text":"MSW handlers"},{"depth":5,"slug":"dos-and-donts","text":"Do’s and don’ts"}];
				}
				async function Content$a() {
					const { layout, ...content } = frontmatter$a;
					content.file = file$a;
					content.url = url$a;
					const contentFragment = createVNode(Fragment, { 'set:html': html$9 });
					return createVNode($$BlogPost, {
									file: file$a,
									url: url$a,
									content,
									frontmatter: content,
									headings: getHeadings$a(),
									rawContent: rawContent$9,
									compiledContent: compiledContent$9,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$a[Symbol.for('astro.needsHeadRendering')] = false;

const _page31 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$a,
  compiledContent: compiledContent$9,
  default: Content$a,
  file: file$a,
  frontmatter: frontmatter$a,
  getHeadings: getHeadings$a,
  rawContent: rawContent$9,
  url: url$a
}, Symbol.toStringTag, { value: 'Module' }));

const html$8 = "<p>I stumbled upon this functional library to create web components. And I must say it looks enticing. Not a big fan of the class based API but it not a big enough problem that I want another layer between more than necessary. However here it comes with a little goody bag of trix in regards to server side rendering and now I am almost over the fence.</p>\n<p>It makes use of the soon to be released declarative shadow DOM. This is important because that makes the web component able to render on the server side in a SSR setup. It is still a good to play around with since you can have a polyfill until the real deal is released. Or if you only plan to stay in Chrome it is already there.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">my-counter</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">template</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">shadowroot</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"open\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">>The current count is &#x3C;</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\">>5&#x3C;/</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\">>.&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\">>Increment&#x3C;/</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;/</span><span style=\"color: #7EE787\">template</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">my-counter</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { component } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'hydroactive'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// `component()` creates a web component based on the given hydrate function. The</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// callback is invoked on hydration and provides a `$` variable with additional</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// functionality to provide interactivity to the pre-rendered component.</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">MyCounter</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">component</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">$</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// `$.live()` automatically hydrates this property by doing</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// `this.shadowRoot!.querySelector('span')!.textContent!` and parsing the result as a</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// `Number`. Returns a `Signal` to provide reactive reads and writes.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Whenever `setCount` is called, the `&#x3C;span />` tag is automatically updated.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">count</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setCount</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> $.</span><span style=\"color: #D2A8FF\">live</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'span'</span><span style=\"color: #C9D1D9\">, Number)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Ergonomic wrapper to read an element from the shadow DOM and assert it exists.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Also types the result based on the query, this has type `HTMLButtonElement`.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">incrementBtn</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> $.</span><span style=\"color: #D2A8FF\">query</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'button'</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// Ergonomic wrapper to bind event listeners. Automatically removes and re-adds the</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// listener when the element is disconnected from / reconnected to the DOM.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  $.</span><span style=\"color: #D2A8FF\">listen</span><span style=\"color: #C9D1D9\">(incrementBtn, </span><span style=\"color: #A5D6FF\">'click'</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #8B949E\">// `setCount()` automatically updates the underlying DOM with the new value.</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">setCount</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #D2A8FF\">count</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">customElements.</span><span style=\"color: #D2A8FF\">define</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'my-counter'</span><span style=\"color: #C9D1D9\">, MyCounter);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">declare</span><span style=\"color: #C9D1D9\"> global {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">interface</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">HTMLElementTagNameMap</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #A5D6FF\">'my-counter'</span><span style=\"color: #FF7B72\">:</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FFA657\">InstanceType</span><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #FF7B72\">typeof</span><span style=\"color: #C9D1D9\"> MyCounter>;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p><a href=\"https://youtu.be/zL0TzFY6aj0\">Hydroactive explained - YouTube</a>\n<a href=\"https://github.com/dgp1130/HydroActive/\">GitHub</a>\n<a href=\"https://www.npmjs.com/package/hydroactive\">Npm</a>\n<a href=\"https://web.dev/declarative-shadow-dom/#polyfill\">Declarative shadow dom polyfill</a>\n<a href=\"https://github.com/dgp1130/HydroActive/blob/main/src/examples\">More examples</a></p>";

				const frontmatter$9 = {"layout":"../../layouts/SnippetPost.astro","title":"HydroActive - functional and SSR ready Web Components","description":"","heroImage":"/assets/blog/hydroactive.webp","pubDate":"Jan 13 2023","draft":true};
				const file$9 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/hydroactive-functional-wc.md";
				const url$9 = "/blog/hydroactive-functional-wc";
				function rawContent$8() {
					return "\nI stumbled upon this functional library to create web components. And I must say it looks enticing. Not a big fan of the class based API but it not a big enough problem that I want another layer between more than necessary. However here it comes with a little goody bag of trix in regards to server side rendering and now I am almost over the fence.\n\nIt makes use of the soon to be released declarative shadow DOM. This is important because that makes the web component able to render on the server side in a SSR setup. It is still a good to play around with since you can have a polyfill until the real deal is released. Or if you only plan to stay in Chrome it is already there.\n\n```html\n<my-counter>\n  <template shadowroot=\"open\">\n    <div>The current count is <span>5</span>.</div>\n    <button>Increment</button>\n  </template>\n</my-counter>\n```\n\n```javascript\nimport { component } from 'hydroactive'\n\n// `component()` creates a web component based on the given hydrate function. The\n// callback is invoked on hydration and provides a `$` variable with additional\n// functionality to provide interactivity to the pre-rendered component.\nconst MyCounter = component(($) => {\n  // `$.live()` automatically hydrates this property by doing\n  // `this.shadowRoot!.querySelector('span')!.textContent!` and parsing the result as a\n  // `Number`. Returns a `Signal` to provide reactive reads and writes.\n  // Whenever `setCount` is called, the `<span />` tag is automatically updated.\n  const [count, setCount] = $.live('span', Number)\n\n  // Ergonomic wrapper to read an element from the shadow DOM and assert it exists.\n  // Also types the result based on the query, this has type `HTMLButtonElement`.\n  const incrementBtn = $.query('button')\n\n  // Ergonomic wrapper to bind event listeners. Automatically removes and re-adds the\n  // listener when the element is disconnected from / reconnected to the DOM.\n  $.listen(incrementBtn, 'click', () => {\n    // `setCount()` automatically updates the underlying DOM with the new value.\n    setCount(count() + 1)\n  })\n})\n\ncustomElements.define('my-counter', MyCounter);\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'my-counter': InstanceType<typeof MyCounter>;\n    }\n}\n```\n\n[Hydroactive explained - YouTube](https://youtu.be/zL0TzFY6aj0)\n[GitHub](https://github.com/dgp1130/HydroActive/)\n[Npm](https://www.npmjs.com/package/hydroactive)\n[Declarative shadow dom polyfill](https://web.dev/declarative-shadow-dom/#polyfill)\n[More examples](https://github.com/dgp1130/HydroActive/blob/main/src/examples)\n";
				}
				function compiledContent$8() {
					return html$8;
				}
				function getHeadings$9() {
					return [];
				}
				async function Content$9() {
					const { layout, ...content } = frontmatter$9;
					content.file = file$9;
					content.url = url$9;
					const contentFragment = createVNode(Fragment, { 'set:html': html$8 });
					return createVNode($$SnippetPost, {
									file: file$9,
									url: url$9,
									content,
									frontmatter: content,
									headings: getHeadings$9(),
									rawContent: rawContent$8,
									compiledContent: compiledContent$8,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$9[Symbol.for('astro.needsHeadRendering')] = false;

const _page32 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$9,
  compiledContent: compiledContent$8,
  default: Content$9,
  file: file$9,
  frontmatter: frontmatter$9,
  getHeadings: getHeadings$9,
  rawContent: rawContent$8,
  url: url$9
}, Symbol.toStringTag, { value: 'Module' }));

const html$7 = "<p>Want to see the future? Try <a href=\"https://chromestatus.com/features\">Chromestatus</a></p>\n<p>Many interesting proposals are published here. And also information on some old ones too. I believe <a href=\"https://chromestatus.com/feature/4854408103854080\">HTML module proposal</a> is the same thing as HTML imports that I thought was done and burried. Turns out there is a something twitching at least. It’s not much but still a hope that it may come alive at some point.</p>";

				const frontmatter$8 = {"layout":"../../layouts/BlogPost.astro","title":"Want to see the future?","description":"The chromestatus got you covered.","pubDate":"Dec 27 2022","heroImage":"/papercutcomputer.png"};
				const file$8 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/want-to-see-the-future.md";
				const url$8 = "/blog/want-to-see-the-future";
				function rawContent$7() {
					return "\nWant to see the future? Try [Chromestatus](https://chromestatus.com/features)\n\nMany interesting proposals are published here. And also information on some old ones too. I believe [HTML module proposal](https://chromestatus.com/feature/4854408103854080) is the same thing as HTML imports that I thought was done and burried. Turns out there is a something twitching at least. It's not much but still a hope that it may come alive at some point.\n";
				}
				function compiledContent$7() {
					return html$7;
				}
				function getHeadings$8() {
					return [];
				}
				async function Content$8() {
					const { layout, ...content } = frontmatter$8;
					content.file = file$8;
					content.url = url$8;
					const contentFragment = createVNode(Fragment, { 'set:html': html$7 });
					return createVNode($$BlogPost, {
									file: file$8,
									url: url$8,
									content,
									frontmatter: content,
									headings: getHeadings$8(),
									rawContent: rawContent$7,
									compiledContent: compiledContent$7,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$8[Symbol.for('astro.needsHeadRendering')] = false;

const _page33 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$8,
  compiledContent: compiledContent$7,
  default: Content$8,
  file: file$8,
  frontmatter: frontmatter$8,
  getHeadings: getHeadings$8,
  rawContent: rawContent$7,
  url: url$8
}, Symbol.toStringTag, { value: 'Module' }));

const html$6 = "<p>Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.</p>\n<h2 id=\"headings\">Headings</h2>\n<p>The following HTML <code>&#x3C;h1></code>—<code>&#x3C;h6></code> elements represent six levels of section headings. <code>&#x3C;h1></code> is the highest section level while <code>&#x3C;h6></code> is the lowest.</p>\n<h1 id=\"h1\">H1</h1>\n<h2 id=\"h2\">H2</h2>\n<h3 id=\"h3\">H3</h3>\n<h4 id=\"h4\">H4</h4>\n<h5 id=\"h5\">H5</h5>\n<h6 id=\"h6\">H6</h6>\n<h2 id=\"paragraph\">Paragraph</h2>\n<p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.</p>\n<p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.</p>\n<h2 id=\"images\">Images</h2>\n<p><img src=\"/placeholder-social.jpg\" alt=\"This is a placeholder image description\"></p>\n<h2 id=\"blockquotes\">Blockquotes</h2>\n<p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a <code>footer</code> or <code>cite</code> element, and optionally with in-line changes such as annotations and abbreviations.</p>\n<h4 id=\"blockquote-without-attribution\">Blockquote without attribution</h4>\n<blockquote>\n<p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.<br>\n<strong>Note</strong> that you can use <em>Markdown syntax</em> within a blockquote.</p>\n</blockquote>\n<h4 id=\"blockquote-with-attribution\">Blockquote with attribution</h4>\n<blockquote>\n<p>Don’t communicate by sharing memory, share memory by communicating.<br>\n— <cite>Rob Pike<sup><a href=\"#user-content-fn-1\" id=\"user-content-fnref-1\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup></cite></p>\n</blockquote>\n<h2 id=\"tables\">Tables</h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Italics</th><th>Bold</th><th>Code</th></tr></thead><tbody><tr><td><em>italics</em></td><td><strong>bold</strong></td><td><code>code</code></td></tr></tbody></table>\n<h2 id=\"code-blocks\">Code Blocks</h2>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;!</span><span style=\"color: #7EE787\">doctype</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">html</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">html</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">lang</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"en\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">head</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">meta</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">charset</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"utf-8\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">title</span><span style=\"color: #C9D1D9\">>Example HTML5 Document&#x3C;/</span><span style=\"color: #7EE787\">title</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">head</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">body</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">>Test&#x3C;/</span><span style=\"color: #7EE787\">p</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">body</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">html</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<h2 id=\"list-types\">List Types</h2>\n<h4 id=\"ordered-list\">Ordered List</h4>\n<ol>\n<li>First item</li>\n<li>Second item</li>\n<li>Third item</li>\n</ol>\n<h4 id=\"unordered-list\">Unordered List</h4>\n<ul>\n<li>List item</li>\n<li>Another item</li>\n<li>And another item</li>\n</ul>\n<h4 id=\"nested-list\">Nested list</h4>\n<ul>\n<li>Fruit\n<ul>\n<li>Apple</li>\n<li>Orange</li>\n<li>Banana</li>\n</ul>\n</li>\n<li>Dairy\n<ul>\n<li>Milk</li>\n<li>Cheese</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"other-elements--abbr-sub-sup-kbd-mark\">Other Elements — abbr, sub, sup, kbd, mark</h2>\n<p><abbr title=\"Graphics Interchange Format\">GIF</abbr> is a bitmap image format.</p>\n<p>H<sub>2</sub>O</p>\n<p>X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup></p>\n<p>Press <kbd><kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>Delete</kbd></kbd> to end the session.</p>\n<p>Most <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.</p>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 class=\"sr-only\" id=\"footnote-label\">Footnotes</h2>\n<ol>\n<li id=\"user-content-fn-1\">\n<p>The above quote is excerpted from Rob Pike’s <a href=\"https://www.youtube.com/watch?v=PAAkCSZUG1c\">talk</a> during Gopherfest, November 18, 2015. <a href=\"#user-content-fnref-1\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\">↩</a></p>\n</li>\n</ol>\n</section>";

				const frontmatter$7 = {"layout":"../../layouts/BlogPost.astro","title":"Markdown Style Guide","description":"Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.","pubDate":"Jul 01 2022","heroImage":"/placeholder-hero.jpg"};
				const file$7 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/markdown-style-guide.md";
				const url$7 = "/blog/markdown-style-guide";
				function rawContent$6() {
					return "\nHere is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.\n\n## Headings\n\nThe following HTML `<h1>`—`<h6>` elements represent six levels of section headings. `<h1>` is the highest section level while `<h6>` is the lowest.\n\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\n## Paragraph\n\nXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\n\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\n\n## Images\n\n![This is a placeholder image description](/placeholder-social.jpg)\n\n## Blockquotes\n\nThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a `footer` or `cite` element, and optionally with in-line changes such as annotations and abbreviations.\n\n#### Blockquote without attribution\n\n> Tiam, ad mint andaepu dandae nostion secatur sequo quae.  \n> **Note** that you can use *Markdown syntax* within a blockquote.\n\n#### Blockquote with attribution\n\n> Don't communicate by sharing memory, share memory by communicating.<br>\n> — <cite>Rob Pike[^1]</cite>\n\n[^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015.\n\n## Tables\n\n| Italics   | Bold     | Code   |\n| --------  | -------- | ------ |\n| *italics* | **bold** | `code` |\n\n## Code Blocks\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Example HTML5 Document</title>\n</head>\n<body>\n  <p>Test</p>\n</body>\n</html>\n```\n\n## List Types\n\n#### Ordered List\n\n1. First item\n2. Second item\n3. Third item\n\n#### Unordered List\n\n* List item\n* Another item\n* And another item\n\n#### Nested list\n\n* Fruit\n  * Apple\n  * Orange\n  * Banana\n* Dairy\n  * Milk\n  * Cheese\n\n## Other Elements — abbr, sub, sup, kbd, mark\n\n<abbr title=\"Graphics Interchange Format\">GIF</abbr> is a bitmap image format.\n\nH<sub>2</sub>O\n\nX<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup>\n\nPress <kbd><kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>Delete</kbd></kbd> to end the session.\n\nMost <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.\n";
				}
				function compiledContent$6() {
					return html$6;
				}
				function getHeadings$7() {
					return [{"depth":2,"slug":"headings","text":"Headings"},{"depth":1,"slug":"h1","text":"H1"},{"depth":2,"slug":"h2","text":"H2"},{"depth":3,"slug":"h3","text":"H3"},{"depth":4,"slug":"h4","text":"H4"},{"depth":5,"slug":"h5","text":"H5"},{"depth":6,"slug":"h6","text":"H6"},{"depth":2,"slug":"paragraph","text":"Paragraph"},{"depth":2,"slug":"images","text":"Images"},{"depth":2,"slug":"blockquotes","text":"Blockquotes"},{"depth":4,"slug":"blockquote-without-attribution","text":"Blockquote without attribution"},{"depth":4,"slug":"blockquote-with-attribution","text":"Blockquote with attribution"},{"depth":2,"slug":"tables","text":"Tables"},{"depth":2,"slug":"code-blocks","text":"Code Blocks"},{"depth":2,"slug":"list-types","text":"List Types"},{"depth":4,"slug":"ordered-list","text":"Ordered List"},{"depth":4,"slug":"unordered-list","text":"Unordered List"},{"depth":4,"slug":"nested-list","text":"Nested list"},{"depth":2,"slug":"other-elements--abbr-sub-sup-kbd-mark","text":"Other Elements — abbr, sub, sup, kbd, mark"},{"depth":2,"slug":"footnote-label","text":"Footnotes"}];
				}
				async function Content$7() {
					const { layout, ...content } = frontmatter$7;
					content.file = file$7;
					content.url = url$7;
					const contentFragment = createVNode(Fragment, { 'set:html': html$6 });
					return createVNode($$BlogPost, {
									file: file$7,
									url: url$7,
									content,
									frontmatter: content,
									headings: getHeadings$7(),
									rawContent: rawContent$6,
									compiledContent: compiledContent$6,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$7[Symbol.for('astro.needsHeadRendering')] = false;

const _page34 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$7,
  compiledContent: compiledContent$6,
  default: Content$7,
  file: file$7,
  frontmatter: frontmatter$7,
  getHeadings: getHeadings$7,
  rawContent: rawContent$6,
  url: url$7
}, Symbol.toStringTag, { value: 'Module' }));

const html$5 = "<p>To send a large number of emails at once in Node.js, you can use a library like Nodemailer. Here’s an example of how you might do this:</p>\n<p>Install the Nodemailer library using npm:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">npm install nodemailer</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Import the Nodemailer library into your Node.js </span><span style=\"color: #FFA657\">script</span><span style=\"color: #C9D1D9\">:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">nodemailer</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">require</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'nodemailer'</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">Create a </span><span style=\"color: #FF7B72\">new</span><span style=\"color: #C9D1D9\"> Nodemailer transporter object that will be used to send the emails:</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">transporter</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> nodemailer.</span><span style=\"color: #D2A8FF\">createTransport</span><span style=\"color: #C9D1D9\">({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  host: </span><span style=\"color: #A5D6FF\">'smtp.example.com'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  port: </span><span style=\"color: #79C0FF\">465</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  secure: </span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  auth: {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    user: </span><span style=\"color: #A5D6FF\">'username'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    pass: </span><span style=\"color: #A5D6FF\">'password'</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n<p>Create an array of email objects, where each object contains the information for a single email (e.g. recipient, subject, message):</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">emails</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    to: </span><span style=\"color: #A5D6FF\">'recipient1@example.com'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    subject: </span><span style=\"color: #A5D6FF\">'Email 1'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    text: </span><span style=\"color: #A5D6FF\">'This is the message for email 1.'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    to: </span><span style=\"color: #A5D6FF\">'recipient2@example.com'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    subject: </span><span style=\"color: #A5D6FF\">'Email 2'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    text: </span><span style=\"color: #A5D6FF\">'This is the message for email 2.'</span><span style=\"color: #C9D1D9\">,</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #8B949E\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">]</span></span></code></pre>\n<p>Use a loop to send each email in the array using the transporter object:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">emails.</span><span style=\"color: #D2A8FF\">forEach</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">email</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  transporter.</span><span style=\"color: #D2A8FF\">sendMail</span><span style=\"color: #C9D1D9\">(email, (</span><span style=\"color: #FFA657\">error</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">info</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #8B949E\">// handle error</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    } </span><span style=\"color: #FF7B72\">else</span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #8B949E\">// email sent successfully</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  })</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span></code></pre>\n<p>Keep in mind that sending a large number of emails at once can take a long time, and it may be better to use a queue system to send the emails in smaller batches. You can use a library like Bull to do this.</p>";

				const frontmatter$6 = {"layout":"../../layouts/BlogPost.astro","title":"How to send 50000 emails at once in queue node js","description":"","pubDate":"Jan 30 2023","heroImage":"/assets/blog/massmail.webp"};
				const file$6 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/send-mail-with-node.md";
				const url$6 = "/blog/send-mail-with-node";
				function rawContent$5() {
					return "\nTo send a large number of emails at once in Node.js, you can use a library like Nodemailer. Here’s an example of how you might do this:\n\nInstall the Nodemailer library using npm:\n\n```javascript\nnpm install nodemailer\nImport the Nodemailer library into your Node.js script:\nconst nodemailer = require('nodemailer');\nCreate a new Nodemailer transporter object that will be used to send the emails:\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.example.com',\n  port: 465,\n  secure: true,\n  auth: {\n    user: 'username',\n    pass: 'password'\n  }\n});\n```\n\nCreate an array of email objects, where each object contains the information for a single email (e.g. recipient, subject, message):\n\n```javascript\nconst emails = [\n  {\n    to: 'recipient1@example.com',\n    subject: 'Email 1',\n    text: 'This is the message for email 1.',\n  },\n  {\n    to: 'recipient2@example.com',\n    subject: 'Email 2',\n    text: 'This is the message for email 2.',\n  },\n  // ...\n]\n```\n\nUse a loop to send each email in the array using the transporter object:\n\n```javascript\nemails.forEach((email) => {\n  transporter.sendMail(email, (error, info) => {\n    if (error) {\n      // handle error\n    } else {\n      // email sent successfully\n    }\n  })\n})\n```\n\nKeep in mind that sending a large number of emails at once can take a long time, and it may be better to use a queue system to send the emails in smaller batches. You can use a library like Bull to do this.\n";
				}
				function compiledContent$5() {
					return html$5;
				}
				function getHeadings$6() {
					return [];
				}
				async function Content$6() {
					const { layout, ...content } = frontmatter$6;
					content.file = file$6;
					content.url = url$6;
					const contentFragment = createVNode(Fragment, { 'set:html': html$5 });
					return createVNode($$BlogPost, {
									file: file$6,
									url: url$6,
									content,
									frontmatter: content,
									headings: getHeadings$6(),
									rawContent: rawContent$5,
									compiledContent: compiledContent$5,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$6[Symbol.for('astro.needsHeadRendering')] = false;

const _page35 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$6,
  compiledContent: compiledContent$5,
  default: Content$6,
  file: file$6,
  frontmatter: frontmatter$6,
  getHeadings: getHeadings$6,
  rawContent: rawContent$5,
  url: url$6
}, Symbol.toStringTag, { value: 'Module' }));

const html$4 = "<p>The View Transition API lets you create animations declaratively between pages. Something that will further take our web apps closer to the look and feel of well designed native application on your phone.</p>\n<p>If you know me I am a succer for all things native because this means I wont have to rebuild or relearn as things evolve. So this is great news.</p>\n<p>Now the View Transition API is in beta stage and expected to soon be available in browsers. It is currently available behind a flag in chrome.</p>\n<h5 id=\"1-enable-view-transitions-in-chrome\">1. Enable View Transitions in chrome</h5>\n<p>To play around with it before it is available you need to <a href=\"chrome://flags\">enable the viewTransitions API and the viewTransitions API for navigations</a></p>\n<h5 id=\"2-add-meta-to-head\">2. Add meta to head</h5>\n<p>Then add <code>&#x3C;meta name=\"view-transition\" content=\"same-origin\"></code> to your head section on booth pages you want to add a transition between.</p>\n<h5 id=\"3-tag-the-el-you-want-to-transtition-between\">3. Tag the el you want to transtition between</h5>\n<p>Tag the el (in CSS) you want to transtition between on booth pages like so.</p>\n<p>Page1.html:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"page2.html\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">img</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"view-transition-name: myImage; contain: layout\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"200\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"cat.jpg\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<p>Page2.html:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">href</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"page1.html\"</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  &#x3C;</span><span style=\"color: #7EE787\">img</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">style</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"view-transition-name: myImage; contain: layout\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">width</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"800\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #79C0FF\">src</span><span style=\"color: #C9D1D9\">=</span><span style=\"color: #A5D6FF\">\"cat.jpg\"</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">a</span><span style=\"color: #C9D1D9\">></span></span></code></pre>\n<p>Simple and straight forward, right?</p>\n<h5 id=\"customize-transition\">Customize transition</h5>\n<p>Now you can also tweak transitions times from the default for example by adding following to the page css.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #C9D1D9\">::view-transition-group(myImage) {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #79C0FF\">animation-duration</span><span style=\"color: #C9D1D9\">: </span><span style=\"color: #79C0FF\">4</span><span style=\"color: #FF7B72\">s</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span></code></pre>\n<p>Check out <a href=\"https://caniuse.com/?search=view-transition\">can i use</a> before implementing.</p>";

				const frontmatter$5 = {"layout":"../../layouts/BlogPost.astro","title":"The new View Transition API","description":"","heroImage":"/assets/blog/view-transition-api.webp","pubDate":"Jan 9 2023"};
				const file$5 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/view-transition-api.md";
				const url$5 = "/blog/view-transition-api";
				function rawContent$4() {
					return "\nThe View Transition API lets you create animations declaratively between pages. Something that will further take our web apps closer to the look and feel of well designed native application on your phone.\n\nIf you know me I am a succer for all things native because this means I wont have to rebuild or relearn as things evolve. So this is great news.\n\nNow the View Transition API is in beta stage and expected to soon be available in browsers. It is currently available behind a flag in chrome.\n\n##### 1. Enable View Transitions in chrome\n\nTo play around with it before it is available you need to [enable the viewTransitions API and the viewTransitions API for navigations](chrome://flags)\n\n##### 2. Add meta to head\n\nThen add `<meta name=\"view-transition\" content=\"same-origin\">` to your head section on booth pages you want to add a transition between.\n\n##### 3. Tag the el you want to transtition between\n\nTag the el (in CSS) you want to transtition between on booth pages like so.\n\nPage1.html:\n\n```html\n<a href=\"page2.html\">\n  <img\n    style=\"view-transition-name: myImage; contain: layout\"\n    width=\"200\"\n    src=\"cat.jpg\"\n  />\n</a>\n```\n\nPage2.html:\n\n```html\n<a href=\"page1.html\">\n  <img\n    style=\"view-transition-name: myImage; contain: layout\"\n    width=\"800\"\n    src=\"cat.jpg\"\n  />\n</a>\n```\n\nSimple and straight forward, right?\n\n##### Customize transition\n\nNow you can also tweak transitions times from the default for example by adding following to the page css.\n\n```css\n::view-transition-group(myImage) {\n  animation-duration: 4s;\n}\n```\n\nCheck out [can i use](https://caniuse.com/?search=view-transition) before implementing.\n";
				}
				function compiledContent$4() {
					return html$4;
				}
				function getHeadings$5() {
					return [{"depth":5,"slug":"1-enable-view-transitions-in-chrome","text":"1. Enable View Transitions in chrome"},{"depth":5,"slug":"2-add-meta-to-head","text":"2. Add meta to head"},{"depth":5,"slug":"3-tag-the-el-you-want-to-transtition-between","text":"3. Tag the el you want to transtition between"},{"depth":5,"slug":"customize-transition","text":"Customize transition"}];
				}
				async function Content$5() {
					const { layout, ...content } = frontmatter$5;
					content.file = file$5;
					content.url = url$5;
					const contentFragment = createVNode(Fragment, { 'set:html': html$4 });
					return createVNode($$BlogPost, {
									file: file$5,
									url: url$5,
									content,
									frontmatter: content,
									headings: getHeadings$5(),
									rawContent: rawContent$4,
									compiledContent: compiledContent$4,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$5[Symbol.for('astro.needsHeadRendering')] = false;

const _page36 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$5,
  compiledContent: compiledContent$4,
  default: Content$5,
  file: file$5,
  frontmatter: frontmatter$5,
  getHeadings: getHeadings$5,
  rawContent: rawContent$4,
  url: url$5
}, Symbol.toStringTag, { value: 'Module' }));

const html$3 = "<p>CSS module scripts is about loading stylesheets into a JS file much like Javascript imports and being able to treat the style sheet like a variable. The style sheet can then be applied to document or shadow root in the same manner as constructable stylesheets.\nThe benefits is convenience and performance relative to other ways of importing and applying CSS.</p>\n<h5 id=\"browser-support\">Browser support</h5>\n<p>The <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#creating-a-css-module-script\">proposed HTML spec</a>.\nAt the time of writing there is a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1720570\">bug in Mozilla</a> (Firefox) and a bug in <a href=\"https://bugs.webkit.org/show_bug.cgi?id=227967\">Webkit</a> (Safari).</p>\n<h5 id=\"using-css-module-scripts\">Using CSS module scripts</h5>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> sheet </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'./styles.css'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">assert</span><span style=\"color: #C9D1D9\"> { type: </span><span style=\"color: #A5D6FF\">'css'</span><span style=\"color: #C9D1D9\"> }</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">document.adoptedStyleSheets </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [sheet]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">shadowRoot.adoptedStyleSheets </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [sheet]</span></span></code></pre>\n<p>The default export of a CSS module script is a <a href=\"https://web.dev/constructable-stylesheets/\">constructable stylesheet</a> whose contents are those of the imported file. Like any other <a href=\"https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets\">constructable stylesheet</a>, it is applied to documents or shadow roots using adoptedStyleSheets.</p>\n<p>Unlike other ways of applying CSS from JavaScript, there is no need to create <code>&#x3C;style></code> elements or mess with JavaScript strings of CSS text.</p>\n<p>CSS modules also have some of the same benefits as JavaScript modules.</p>\n<ul>\n<li>Deduplication: if the same CSS file is imported from multiple places in an application, it will still only be fetched, instantiated, and parsed a single time.</li>\n<li>Consistent order of evaluation: when the importing JavaScript is running, it can rely on the stylesheet it imports having already been fetched and parsed.</li>\n<li>Security: modules are fetched with CORS and use strict MIME-type checking.</li>\n</ul>\n<h5 id=\"import-assertions-whats-with-the-assert\">Import Assertions (what’s with the ‘assert’?)</h5>\n<p>The <code>assert { type: 'css' }</code> part of the import statement is an <a href=\"https://v8.dev/features/import-assertions\">import assertion</a>. This is required; without it, the import is treated as a normal JavaScript module import, and will fail if the imported file has a non-JavaScript MIME type.</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> sheet </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'./styles.css'</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #8B949E\">// Failed to load module script:</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// Expected a JavaScript module</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// script but the server responded</span></span>\n<span class=\"line\"><span style=\"color: #8B949E\">// with a MIME type of \"text/css\".</span></span></code></pre>\n<h5 id=\"dynamically-imported-stylesheets\">Dynamically imported stylesheets</h5>\n<p>You can also import a CSS module using dynamic import, with a new second parameter for the type: ‘css’ import assertion:</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">cssModule</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'./style.css'</span><span style=\"color: #C9D1D9\">, {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  assert: { type: </span><span style=\"color: #A5D6FF\">'css'</span><span style=\"color: #C9D1D9\"> },</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">document.adoptedStyleSheets </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [cssModule.default]</span></span></code></pre>\n<blockquote>\n<p>☝️ Gotchas\nNote that it’s <code>cssModule.default</code> (not cssModule itself) that is added to adoptedStyleSheets. This is because the object returned from dynamic import() is a module namespace object. The CSSStyleSheet is the default export of the module, so it’s accessed at <code>cssModule.default</code>.</p>\n</blockquote>\n<h5 id=\"import-rules-not-yet-allowed\">@import rules not yet allowed</h5>\n<p>Currently CSS <code>@import</code> rules don’t work in constructable stylesheets, including CSS module scripts. If <code>@import</code> rules are present in a constructable stylesheet, those rules will be ignored.</p>\n<p>Support for @import in CSS module scripts may be added to the specification. Track this specification discussion in <a href=\"https://github.com/WICG/webcomponents/issues/870\">the GitHub issue</a>.</p>\n<hr>\n<p><em><a href=\"https://web.dev/css-module-scripts/\">Source of this article</a></em></p>";

				const frontmatter$4 = {"layout":"../../layouts/BlogPost.astro","title":"CSS module scripts","description":"","pubDate":"Jan 12 2023","heroImage":"/assets/blog/css-explosion.webp","draft":false};
				const file$4 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/CSS-module-scripts.md";
				const url$4 = "/blog/CSS-module-scripts";
				function rawContent$3() {
					return "\nCSS module scripts is about loading stylesheets into a JS file much like Javascript imports and being able to treat the style sheet like a variable. The style sheet can then be applied to document or shadow root in the same manner as constructable stylesheets.\nThe benefits is convenience and performance relative to other ways of importing and applying CSS.\n\n##### Browser support\n\nThe [proposed HTML spec](https://html.spec.whatwg.org/multipage/webappapis.html#creating-a-css-module-script).\nAt the time of writing there is a [bug in Mozilla](https://bugzilla.mozilla.org/show_bug.cgi?id=1720570) (Firefox) and a bug in [Webkit](https://bugs.webkit.org/show_bug.cgi?id=227967) (Safari).\n\n##### Using CSS module scripts\n\n```javascript\nimport sheet from './styles.css' assert { type: 'css' }\ndocument.adoptedStyleSheets = [sheet]\nshadowRoot.adoptedStyleSheets = [sheet]\n```\n\nThe default export of a CSS module script is a [constructable stylesheet](https://web.dev/constructable-stylesheets/) whose contents are those of the imported file. Like any other [constructable stylesheet](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets), it is applied to documents or shadow roots using adoptedStyleSheets.\n\nUnlike other ways of applying CSS from JavaScript, there is no need to create `<style>` elements or mess with JavaScript strings of CSS text.\n\nCSS modules also have some of the same benefits as JavaScript modules.\n\n- Deduplication: if the same CSS file is imported from multiple places in an application, it will still only be fetched, instantiated, and parsed a single time.\n- Consistent order of evaluation: when the importing JavaScript is running, it can rely on the stylesheet it imports having already been fetched and parsed.\n- Security: modules are fetched with CORS and use strict MIME-type checking.\n\n##### Import Assertions (what's with the 'assert'?)\n\nThe `assert { type: 'css' }` part of the import statement is an [import assertion](https://v8.dev/features/import-assertions). This is required; without it, the import is treated as a normal JavaScript module import, and will fail if the imported file has a non-JavaScript MIME type.\n\n```javascript\nimport sheet from './styles.css' // Failed to load module script:\n// Expected a JavaScript module\n// script but the server responded\n// with a MIME type of \"text/css\".\n```\n\n##### Dynamically imported stylesheets\n\nYou can also import a CSS module using dynamic import, with a new second parameter for the type: 'css' import assertion:\n\n```javascript\nconst cssModule = await import('./style.css', {\n  assert: { type: 'css' },\n})\ndocument.adoptedStyleSheets = [cssModule.default]\n```\n\n> ☝️ Gotchas\n> Note that it's `cssModule.default` (not cssModule itself) that is added to adoptedStyleSheets. This is because the object returned from dynamic import() is a module namespace object. The CSSStyleSheet is the default export of the module, so it's accessed at `cssModule.default`.\n\n##### @import rules not yet allowed\n\nCurrently CSS `@import` rules don't work in constructable stylesheets, including CSS module scripts. If `@import` rules are present in a constructable stylesheet, those rules will be ignored.\n\nSupport for @import in CSS module scripts may be added to the specification. Track this specification discussion in [the GitHub issue](https://github.com/WICG/webcomponents/issues/870).\n\n---\n\n_[Source of this article](https://web.dev/css-module-scripts/)_\n";
				}
				function compiledContent$3() {
					return html$3;
				}
				function getHeadings$4() {
					return [{"depth":5,"slug":"browser-support","text":"Browser support"},{"depth":5,"slug":"using-css-module-scripts","text":"Using CSS module scripts"},{"depth":5,"slug":"import-assertions-whats-with-the-assert","text":"Import Assertions (what’s with the ‘assert’?)"},{"depth":5,"slug":"dynamically-imported-stylesheets","text":"Dynamically imported stylesheets"},{"depth":5,"slug":"import-rules-not-yet-allowed","text":"@import rules not yet allowed"}];
				}
				async function Content$4() {
					const { layout, ...content } = frontmatter$4;
					content.file = file$4;
					content.url = url$4;
					const contentFragment = createVNode(Fragment, { 'set:html': html$3 });
					return createVNode($$BlogPost, {
									file: file$4,
									url: url$4,
									content,
									frontmatter: content,
									headings: getHeadings$4(),
									rawContent: rawContent$3,
									compiledContent: compiledContent$3,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$4[Symbol.for('astro.needsHeadRendering')] = false;

const _page37 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$4,
  compiledContent: compiledContent$3,
  default: Content$4,
  file: file$4,
  frontmatter: frontmatter$4,
  getHeadings: getHeadings$4,
  rawContent: rawContent$3,
  url: url$4
}, Symbol.toStringTag, { value: 'Module' }));

const html$2 = "<h5 id=\"tanstackquery\"><a href=\"https://tanstack.com/query/v4\"><code>TanstackQuery</code></a> 👍</h5>\n<p>aka React Query as it changed its name and announced support for Vue, Svelte and Solid as well. This is not just a great addition in your tool belt but a milestone in modern frontend development if you ask me. No less so since it in an elegant way solves the React 18 ”double render of the useEffect hook”-issue. What it does? It manages all the caching strategies you need and if you ever tried to implement a caching strategy yourself you know what it saves you from. It also lead to less bloat in your state since you no longer need to store the fetched data in the global state. All asynchronous data fetching tasks should be wrapped in TanstackQuery from now on if you ask me. I just hope there will be support for vanillaJS soon too. (Btw, check out the recently released TanstackRouter)</p>\n<h5 id=\"fullstack-frameworks-and-the-island-architecture\"><code>Fullstack frameworks and the ”Island Architecture”</code> 👍</h5>\n<p>I.e. the React centric Next, Remix, the “ship no JS” Astro, the Deno based Fresh and I guess Vues Next equivalent Nuxt as well and so on - All these frameworks gives the frontend developer back the control over the backend/frontend bridge. And by back I mean back as in the old days of server served, multi page applications. Also we get better performance, probably better DX overall and certainly better UX if speed and TTI is an important parameter. And if you still want that “native app”-responsiveness goody only a single page application can bring, just serve that as a one-route-client-render-big-app-island and enjoy the server control you get as a bonus. Halleluja!</p>\n<h5 id=\"trpc\"><a href=\"https://trpc.io/\"><code>tRPC</code></a> 👍</h5>\n<p>I may be a bit early on this one but since Typescript practically became ubiquitous in 2022 I predict tRPC has the potential of knocking REST of the throne after more than 20 years. Although tRPC kind of uses REST under the hood. What you get is type safety and great intellisense from the backend. Works best with the fullstack frameworks where you have backend/frontend in the same repo. If GraphQL and REST are done for? No, they are still good options for different team setup. If you don’t have great communication between frontend/backend team then GraphQL is still a good solution and REST can still do its thing if the data shape is mature with Swagger, OpenApi, etc.</p>\n<h2 id=\"and-three-paradigms-that-are-in-decline-for-2023\">And three paradigms that are in decline for 2023</h2>\n<p><em>Ok, don’t be too mad at me when I take a swing at your favorite framework but here we go…</em></p>\n<h5 id=\"react\"><code>React</code> 👎</h5>\n<p>(as a single page application) - No I don’t think React will die anytime soon. It is simply almost to big to fail. But it can become less hyped or liked as new fresh frameworks emerge like Solid, Svelte, Qwik, etc. And a lot of that has to do with the Virtual DOM that React has in place to iron out the differences between modern browsers and Internet Explorer mainly. At least that is how I understand it. Since IE is officially dead as of June this year I believe many frontend devs feel weight of unnecessary bloat. Doesn’t necessarily mean they will jump ship though. The eco system around React is still unsurpassed. But even there some cornerstones of the React ecosystem are being ported to other frameworks which again lowers the barrier of entry for React devs to actually do the switch.</p>\n<p>However if you feel adventurous but don’t want to jump ship completely, try Preact. Preact is a minimal React clone-ish (3kb) with the thinnest possible Virtual DOM abstraction on top of the DOM but with the same JSX support. If you add a 5kb add-on you get most of the bells and whistles (e.g portals) from the full-grown big brother.</p>\n<h5 id=\"tailwind-css\"><code>Tailwind CSS</code> 👎</h5>\n<p>Promising to be scalable (as they do on their landing page) and not delivering must take a toll sooner or later. Despite having React on this list, this might be the most controversial prediction. There’s no denying that Tailwind have had a huge success so far but you could see the trend turning down slightly in last years’ State-of-CSS survey. And since there are many diehard fans out there I challenge you, tell me how you in a fairly complex app do a A-B test for the UX department or reuse a page component with a big number of complex and nested components but with alternate styling. That is the achilles heel of inline styles and the reason it has been considered a bad pattern for over two decades. It doesn’t matter that the inline styles is dressed up as classes. Sure this is a use case not everyone ends up in. However most can’t say in advance if they will or not. And once they do it will be to late because it is surprisingly hard to eject Tailwind once it is in your code. That’s when you find yourself staring into the abyss of a technical dead end. I should know because we lost our biggest customer, worth millions, in a project I was part of. The competitor showcased their competing implementation and they had that exact requested feature we had to turn down due to this Tailwind limitation. Not saying it was the only reason but it certainly didn’t look good to me.\nAnyway I predict a slow decay where it finally will end up beside Bootstrap as a legacy, inline css technique no one really wants. (Btw check out Open Props, it’s kind of like Tailwind done right)</p>\n<h5 id=\"redux\"><code>Redux</code> 👎</h5>\n<p>Yes, you read it here first. Don’t start a new project using Redux for your state management. It is just big, tedious and bloats your code with boilerplatey DX for no real benefit. And no, Redux Toolkit won’t save you from that. We thank you for your service but now it time to split up. I encourage anyone to try any of the new small state managers out there, like Recoil or even better - Jotai or Zustand. You can even mix since they might have slightly different unique selling points besides the tiny footprint. Jotai has the smallest footprint and some nice extras up it sleeve while Zustand while being manageable follow the flux pattern (as Redux do to) which probably makes many feel at home.</p>";

				const frontmatter$3 = {"layout":"../../layouts/BlogPost.astro","title":"Frontend: 3 hits, 3 misses for 2022-23","description":"3 hits and 3 misses in frontend that is either observations or predictions for 2023. Yes, this is the opinionated and unfiltered retrospective you've been looking for.","pubDate":"Dec 2 2022","heroImage":"/assets/blog/thumbsup.png"};
				const file$3 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/hits-n-misses-2022.md";
				const url$3 = "/blog/hits-n-misses-2022";
				function rawContent$2() {
					return "\n##### [`TanstackQuery`](https://tanstack.com/query/v4) 👍\n\naka React Query as it changed its name and announced support for Vue, Svelte and Solid as well. This is not just a great addition in your tool belt but a milestone in modern frontend development if you ask me. No less so since it in an elegant way solves the React 18 ”double render of the useEffect hook”-issue. What it does? It manages all the caching strategies you need and if you ever tried to implement a caching strategy yourself you know what it saves you from. It also lead to less bloat in your state since you no longer need to store the fetched data in the global state. All asynchronous data fetching tasks should be wrapped in TanstackQuery from now on if you ask me. I just hope there will be support for vanillaJS soon too. (Btw, check out the recently released TanstackRouter)\n\n##### `Fullstack frameworks and the ”Island Architecture”` 👍\n\nI.e. the React centric Next, Remix, the \"ship no JS\" Astro, the Deno based Fresh and I guess Vues Next equivalent Nuxt as well and so on - All these frameworks gives the frontend developer back the control over the backend/frontend bridge. And by back I mean back as in the old days of server served, multi page applications. Also we get better performance, probably better DX overall and certainly better UX if speed and TTI is an important parameter. And if you still want that \"native app\"-responsiveness goody only a single page application can bring, just serve that as a one-route-client-render-big-app-island and enjoy the server control you get as a bonus. Halleluja!\n\n##### [`tRPC`](https://trpc.io/) 👍\n\nI may be a bit early on this one but since Typescript practically became ubiquitous in 2022 I predict tRPC has the potential of knocking REST of the throne after more than 20 years. Although tRPC kind of uses REST under the hood. What you get is type safety and great intellisense from the backend. Works best with the fullstack frameworks where you have backend/frontend in the same repo. If GraphQL and REST are done for? No, they are still good options for different team setup. If you don’t have great communication between frontend/backend team then GraphQL is still a good solution and REST can still do its thing if the data shape is mature with Swagger, OpenApi, etc.\n\n## And three paradigms that are in decline for 2023\n\n_Ok, don’t be too mad at me when I take a swing at your favorite framework but here we go…_\n\n##### `React` 👎\n\n(as a single page application) - No I don’t think React will die anytime soon. It is simply almost to big to fail. But it can become less hyped or liked as new fresh frameworks emerge like Solid, Svelte, Qwik, etc. And a lot of that has to do with the Virtual DOM that React has in place to iron out the differences between modern browsers and Internet Explorer mainly. At least that is how I understand it. Since IE is officially dead as of June this year I believe many frontend devs feel weight of unnecessary bloat. Doesn’t necessarily mean they will jump ship though. The eco system around React is still unsurpassed. But even there some cornerstones of the React ecosystem are being ported to other frameworks which again lowers the barrier of entry for React devs to actually do the switch.\n\nHowever if you feel adventurous but don’t want to jump ship completely, try Preact. Preact is a minimal React clone-ish (3kb) with the thinnest possible Virtual DOM abstraction on top of the DOM but with the same JSX support. If you add a 5kb add-on you get most of the bells and whistles (e.g portals) from the full-grown big brother.\n\n##### `Tailwind CSS` 👎\n\nPromising to be scalable (as they do on their landing page) and not delivering must take a toll sooner or later. Despite having React on this list, this might be the most controversial prediction. There’s no denying that Tailwind have had a huge success so far but you could see the trend turning down slightly in last years’ State-of-CSS survey. And since there are many diehard fans out there I challenge you, tell me how you in a fairly complex app do a A-B test for the UX department or reuse a page component with a big number of complex and nested components but with alternate styling. That is the achilles heel of inline styles and the reason it has been considered a bad pattern for over two decades. It doesn't matter that the inline styles is dressed up as classes. Sure this is a use case not everyone ends up in. However most can’t say in advance if they will or not. And once they do it will be to late because it is surprisingly hard to eject Tailwind once it is in your code. That’s when you find yourself staring into the abyss of a technical dead end. I should know because we lost our biggest customer, worth millions, in a project I was part of. The competitor showcased their competing implementation and they had that exact requested feature we had to turn down due to this Tailwind limitation. Not saying it was the only reason but it certainly didn’t look good to me.\nAnyway I predict a slow decay where it finally will end up beside Bootstrap as a legacy, inline css technique no one really wants. (Btw check out Open Props, it's kind of like Tailwind done right)\n\n##### `Redux` 👎\n\nYes, you read it here first. Don’t start a new project using Redux for your state management. It is just big, tedious and bloats your code with boilerplatey DX for no real benefit. And no, Redux Toolkit won’t save you from that. We thank you for your service but now it time to split up. I encourage anyone to try any of the new small state managers out there, like Recoil or even better - Jotai or Zustand. You can even mix since they might have slightly different unique selling points besides the tiny footprint. Jotai has the smallest footprint and some nice extras up it sleeve while Zustand while being manageable follow the flux pattern (as Redux do to) which probably makes many feel at home.\n";
				}
				function compiledContent$2() {
					return html$2;
				}
				function getHeadings$3() {
					return [{"depth":5,"slug":"tanstackquery","text":"TanstackQuery 👍"},{"depth":5,"slug":"fullstack-frameworks-and-the-island-architecture","text":"Fullstack frameworks and the ”Island Architecture” 👍"},{"depth":5,"slug":"trpc","text":"tRPC 👍"},{"depth":2,"slug":"and-three-paradigms-that-are-in-decline-for-2023","text":"And three paradigms that are in decline for 2023"},{"depth":5,"slug":"react","text":"React 👎"},{"depth":5,"slug":"tailwind-css","text":"Tailwind CSS 👎"},{"depth":5,"slug":"redux","text":"Redux 👎"}];
				}
				async function Content$3() {
					const { layout, ...content } = frontmatter$3;
					content.file = file$3;
					content.url = url$3;
					const contentFragment = createVNode(Fragment, { 'set:html': html$2 });
					return createVNode($$BlogPost, {
									file: file$3,
									url: url$3,
									content,
									frontmatter: content,
									headings: getHeadings$3(),
									rawContent: rawContent$2,
									compiledContent: compiledContent$2,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$3[Symbol.for('astro.needsHeadRendering')] = false;

const _page38 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$3,
  compiledContent: compiledContent$2,
  default: Content$3,
  file: file$3,
  frontmatter: frontmatter$3,
  getHeadings: getHeadings$3,
  rawContent: rawContent$2,
  url: url$3
}, Symbol.toStringTag, { value: 'Module' }));

const html$1 = "<p>Today I’ll tell about an API even seasoned developer have missed. I know this not only from empirical studies because today I saw the statistics in freshly released <a href=\"https://2022.stateofjs.com/en-US/features/browser-apis/web_animations\">State Of Javascript</a> and the API had kind of low numbers.</p>\n<p>Animations can be a useful tool to enhance the user experience on the web. Aside from providing an appealing visual experience, animations can aid in the user’s understanding of elements appearing, moving and disappearing from a page.</p>\n<p>Currently, there are two animation techniques that are commonly used on the web: CSS transitions/animations and animating through JavaScript by modifying inline styles.</p>\n<p>Both of these offer JavaScript events like <code>animationend</code> which allow you to react to an animation that finished, though it can still be hard to synchronize animations with application state due to the way animations have to be started. They are a powerful, declarative and performant way to do animations on individual elements.</p>\n<p>The [Web Animations API] is a relatively new addition to the browser and is still very much in development. It promises to combine the benefits of CSS Transitions/Animations and JavaScript based animations.</p>\n<h5 id=\"benefits-of-the-web-animation-api\">Benefits of the Web Animation API</h5>\n<ul>\n<li>Timing, no need to sync with onAnimationEnd event.</li>\n<li>Separation of concerns, no longer mix the animation logic with CSS styling.</li>\n<li>Huge improvment in control, you can run the animation back and forward programatically.</li>\n</ul>\n<p>Check it out!</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API\">MDN</a>\n<a href=\"https://caniuse.com/web-animation\">Browser support is good</a> 👍</p>";

				const frontmatter$2 = {"layout":"../../layouts/BlogPost.astro","title":"The underused Web Animation API","description":"","heroImage":"/assets/blog/webanimationapi.webp","pubDate":"Jan 13 2023"};
				const file$2 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/we-animation-API.md";
				const url$2 = "/blog/we-animation-API";
				function rawContent$1() {
					return "\nToday I'll tell about an API even seasoned developer have missed. I know this not only from empirical studies because today I saw the statistics in freshly released [State Of Javascript](https://2022.stateofjs.com/en-US/features/browser-apis/web_animations) and the API had kind of low numbers.\n\nAnimations can be a useful tool to enhance the user experience on the web. Aside from providing an appealing visual experience, animations can aid in the user's understanding of elements appearing, moving and disappearing from a page.\n\nCurrently, there are two animation techniques that are commonly used on the web: CSS transitions/animations and animating through JavaScript by modifying inline styles.\n\nBoth of these offer JavaScript events like `animationend` which allow you to react to an animation that finished, though it can still be hard to synchronize animations with application state due to the way animations have to be started. They are a powerful, declarative and performant way to do animations on individual elements.\n\nThe [Web Animations API] is a relatively new addition to the browser and is still very much in development. It promises to combine the benefits of CSS Transitions/Animations and JavaScript based animations.\n\n##### Benefits of the Web Animation API\n\n- Timing, no need to sync with onAnimationEnd event.\n- Separation of concerns, no longer mix the animation logic with CSS styling.\n- Huge improvment in control, you can run the animation back and forward programatically.\n\nCheck it out!\n\n[MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API)\n[Browser support is good](https://caniuse.com/web-animation) 👍\n";
				}
				function compiledContent$1() {
					return html$1;
				}
				function getHeadings$2() {
					return [{"depth":5,"slug":"benefits-of-the-web-animation-api","text":"Benefits of the Web Animation API"}];
				}
				async function Content$2() {
					const { layout, ...content } = frontmatter$2;
					content.file = file$2;
					content.url = url$2;
					const contentFragment = createVNode(Fragment, { 'set:html': html$1 });
					return createVNode($$BlogPost, {
									file: file$2,
									url: url$2,
									content,
									frontmatter: content,
									headings: getHeadings$2(),
									rawContent: rawContent$1,
									compiledContent: compiledContent$1,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$2[Symbol.for('astro.needsHeadRendering')] = false;

const _page39 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$2,
  compiledContent: compiledContent$1,
  default: Content$2,
  file: file$2,
  frontmatter: frontmatter$2,
  getHeadings: getHeadings$2,
  rawContent: rawContent$1,
  url: url$2
}, Symbol.toStringTag, { value: 'Module' }));

const html = "<p>Sharing wifi to a friend is often a pain. Print a wifi QR code that anyone can scan and get easy access.</p>\n<p><a href=\"https://qifi.org/\">qifi.org</a></p>\n<p>That it for today.</p>";

				const frontmatter$1 = {"layout":"../../layouts/BlogPost.astro","title":"Tip of the day: Create a wifi QR code to print","description":"","pubDate":"Jan 18 2023"};
				const file$1 = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/create-wifi-qr.md";
				const url$1 = "/blog/create-wifi-qr";
				function rawContent() {
					return "\nSharing wifi to a friend is often a pain. Print a wifi QR code that anyone can scan and get easy access.\n\n[qifi.org](https://qifi.org/)\n\nThat it for today.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings$1() {
					return [];
				}
				async function Content$1() {
					const { layout, ...content } = frontmatter$1;
					content.file = file$1;
					content.url = url$1;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return createVNode($$BlogPost, {
									file: file$1,
									url: url$1,
									content,
									frontmatter: content,
									headings: getHeadings$1(),
									rawContent,
									compiledContent,
									'server:root': true,
									children: contentFragment
								});
				}
				Content$1[Symbol.for('astro.needsHeadRendering')] = false;

const _page40 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content: Content$1,
  compiledContent,
  default: Content$1,
  file: file$1,
  frontmatter: frontmatter$1,
  getHeadings: getHeadings$1,
  rawContent,
  url: url$1
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout = async function ({
  children
}) {
  const Layout = (await Promise.resolve().then(() => BlogPost)).default;
  const {
    layout,
    ...content
  } = frontmatter;
  content.file = file;
  content.url = url;
  return createVNode(Layout, {
    file,
    url,
    content,
    frontmatter: content,
    headings: getHeadings(),
    "server:root": true,
    children
  });
};
const frontmatter = {
  "layout": "../../layouts/BlogPost.astro",
  "title": "Using MDX in Astrojs",
  "description": "Lorem ipsum dolor sit amet",
  "pubDate": "Jul 02 2022",
  "heroImage": "/placeholder-hero.jpg"
};
function getHeadings() {
  return [{
    "depth": 2,
    "slug": "why-mdx",
    "text": "Why MDX?"
  }, {
    "depth": 2,
    "slug": "example",
    "text": "Example"
  }, {
    "depth": 2,
    "slug": "more-links",
    "text": "More Links"
  }];
}
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    a: "a",
    h2: "h2",
    br: "br",
    ul: "ul",
    li: "li",
    strong: "strong"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: ["Astro comes with the ", createVNode(_components.a, {
        href: "https://docs.astro.build/en/guides/integrations-guide/mdx/",
        children: "@astrojs/mdx"
      }), " integration."]
    }), "\n", createVNode(_components.h2, {
      id: "why-mdx",
      children: "Why MDX?"
    }), "\n", createVNode(_components.p, {
      children: ["MDX is a special flavor of Markdown that supports embedded JavaScript & JSX syntax. This unlocks the ability to ", createVNode(_components.a, {
        href: "https://docs.astro.build/en/guides/markdown-content/#mdx-features",
        children: "mix JavaScript and UI Components into your Markdown content"
      }), " for things like interactive charts or alerts."]
    }), "\n", createVNode(_components.p, {
      children: "If you have existing content authored in MDX, this integration will hopefully make migrating to Astro a breeze."
    }), "\n", createVNode(_components.h2, {
      id: "example",
      children: "Example"
    }), "\n", createVNode(_components.p, {
      children: ["Here is how you import and use a UI component inside of MDX.", createVNode(_components.br, {}), "\nWhen you open this page in the browser, you should see the clickable button below."]
    }), "\n", "\n", createVNode($$HeaderLink, {
      href: "#",
      onclick: "alert('clicked!')",
      children: createVNode(_components.p, {
        children: "Embedded component in MDX"
      })
    }), "\n", createVNode(_components.h2, {
      id: "more-links",
      children: "More Links"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: createVNode(_components.a, {
          href: "https://mdxjs.com/docs/what-is-mdx",
          children: "MDX Syntax Documentation"
        })
      }), "\n", createVNode(_components.li, {
        children: createVNode(_components.a, {
          href: "https://docs.astro.build/en/guides/markdown-content/#markdown-and-mdx-pages",
          children: "Astro Usage Documentation"
        })
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.strong, {
          children: "Note:"
        }), " ", createVNode(_components.a, {
          href: "https://docs.astro.build/en/reference/directives-reference/#client-directives",
          children: "Client Directives"
        }), " are still required to create interactive components. Otherwise, all components in your MDX will render as static HTML (no JavaScript) by default."]
      }), "\n"]
    })]
  });
}
function MDXContent(props = {}) {
  return createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings, "astro:jsx");
__astro_tag_component__(MDXContent, "astro:jsx");
const url = "/blog/using-mdx";
const file = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog/using-mdx.mdx";
const Content = (props = {}) => MDXContent({
											...props,
											components: { Fragment, ...props.components },
										});
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);

const _page41 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Content,
  default: Content,
  file,
  frontmatter,
  getHeadings,
  url
}, Symbol.toStringTag, { value: 'Module' }));

const $$Astro = createAstro("https://hervy.netlify.com/");
const $$Blog = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Blog;
  const posts = (await Astro2.glob(/* #__PURE__ */ Object.assign({"./blog/CSS-module-scripts.md": () => Promise.resolve().then(() => _page37),"./blog/create-wifi-qr.md": () => Promise.resolve().then(() => _page40),"./blog/creating-endpoint-in-astro.md": () => Promise.resolve().then(() => _page30),"./blog/css-to-inline-scroll-with-transitions.md": () => Promise.resolve().then(() => _page28),"./blog/error-handling-in-typescript.md": () => Promise.resolve().then(() => _page29),"./blog/guidlines-on-unit-testing.md": () => Promise.resolve().then(() => _page31),"./blog/hits-n-misses-2022.md": () => Promise.resolve().then(() => _page38),"./blog/hydroactive-functional-wc.md": () => Promise.resolve().then(() => _page32),"./blog/markdown-style-guide.md": () => Promise.resolve().then(() => _page34),"./blog/send-mail-with-node.md": () => Promise.resolve().then(() => _page35),"./blog/using-mdx.mdx": () => Promise.resolve().then(() => _page41),"./blog/view-transition-api.md": () => Promise.resolve().then(() => _page36),"./blog/want-to-see-the-future.md": () => Promise.resolve().then(() => _page33),"./blog/we-animation-API.md": () => Promise.resolve().then(() => _page39)}), () => "./blog/*.{md,mdx}")).filter((post) => !post.frontmatter.draft).sort(
    (a, b) => new Date(b.frontmatter.pubDate).valueOf() - new Date(a.frontmatter.pubDate).valueOf()
  );
  const snippets = (await Astro2.glob(/* #__PURE__ */ Object.assign({"./snippets/links.md": () => Promise.resolve().then(() => _page25),"./snippets/snippet-proxy-api.md": () => Promise.resolve().then(() => _page8),"./snippets/snippets-array.md": () => Promise.resolve().then(() => _page14),"./snippets/snippets-asynk.md": () => Promise.resolve().then(() => _page15),"./snippets/snippets-command-line.md": () => Promise.resolve().then(() => _page4),"./snippets/snippets-css.md": () => Promise.resolve().then(() => _page22),"./snippets/snippets-date.md": () => Promise.resolve().then(() => _page18),"./snippets/snippets-dom.md": () => Promise.resolve().then(() => _page23),"./snippets/snippets-events.md": () => Promise.resolve().then(() => _page11),"./snippets/snippets-external-npm.md": () => Promise.resolve().then(() => _page5),"./snippets/snippets-functional-p.md": () => Promise.resolve().then(() => _page6),"./snippets/snippets-git.md": () => Promise.resolve().then(() => _page24),"./snippets/snippets-helper-functions.md": () => Promise.resolve().then(() => _page2),"./snippets/snippets-html.md": () => Promise.resolve().then(() => _page19),"./snippets/snippets-math.md": () => Promise.resolve().then(() => _page20),"./snippets/snippets-node.md": () => Promise.resolve().then(() => _page21),"./snippets/snippets-objects.md": () => Promise.resolve().then(() => _page10),"./snippets/snippets-promises.md": () => Promise.resolve().then(() => _page9),"./snippets/snippets-pubsub.md": () => Promise.resolve().then(() => _page12),"./snippets/snippets-react.md": () => Promise.resolve().then(() => _page16),"./snippets/snippets-regex.md": () => Promise.resolve().then(() => _page17),"./snippets/snippets-string.md": () => Promise.resolve().then(() => _page13),"./snippets/snippets-typescript.md": () => Promise.resolve().then(() => _page7),"./snippets/snippets-web-components.md": () => Promise.resolve().then(() => _page3)}), () => "./snippets/*.{md,mdx}")).filter((a) => a.frontmatter.title.toLowerCase().includes !== "draft").filter((post) => !post.frontmatter.draft).sort(
    (a, b) => new Date(b.frontmatter.pubDate).valueOf() - new Date(a.frontmatter.pubDate).valueOf()
  );
  return renderTemplate`<html lang="en" class="astro-IJNERLR2">
  <head>
    ${renderComponent($$result, "BaseHead", $$BaseHead, { "title": SITE_TITLE, "description": SITE_DESCRIPTION, "class": "astro-IJNERLR2" })}
    
  ${renderHead($$result)}</head>
  <body class="astro-IJNERLR2">
    ${renderComponent($$result, "Header", $$Header, { "class": "astro-IJNERLR2" })}
    <main class="astro-IJNERLR2">
      <section class="neu-box astro-IJNERLR2">
        <h3 class="astro-IJNERLR2">Articles</h3>
        <ul class="astro-IJNERLR2">
          ${posts.map((post) => renderTemplate`<li class="astro-IJNERLR2">
                <time${addAttribute(post.frontmatter.pubDate, "datetime")} class="astro-IJNERLR2">
                  ${new Date(post.frontmatter.pubDate).toLocaleDateString(
    "en-us",
    {
      year: "numeric",
      month: "short",
      day: "numeric"
    }
  )}
                </time>
                <a${addAttribute(post.url, "href")} class="astro-IJNERLR2">${post.frontmatter.title}</a>
              </li>`)}
        </ul>
      </section>
      <section class="neu-box astro-IJNERLR2">
        <h3 class="astro-IJNERLR2">Code Snippets</h3>
        <ul class="astro-IJNERLR2">
          ${snippets.map((post) => renderTemplate`<li class="astro-IJNERLR2">
                <time${addAttribute(post.frontmatter.pubDate, "datetime")} class="astro-IJNERLR2">
                  ${new Date(post.frontmatter.pubDate).toLocaleDateString(
    "en-us",
    {
      year: "numeric",
      month: "short",
      day: "numeric"
    }
  )}
                </time>
                <a${addAttribute(post.url, "href")} class="astro-IJNERLR2">${post.frontmatter.title}</a>
              </li>`)}
        </ul>
      </section>
    </main>
    ${renderComponent($$result, "Footer", $$Footer, { "class": "astro-IJNERLR2" })}
  </body></html>`;
}, "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog.astro");

const $$file = "/Users/nicolashervy/Desktop/Astro-selpromo/src/pages/blog.astro";
const $$url = "/blog";

const _page42 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Blog,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page27 as A, _page28 as B, _page29 as C, _page30 as D, _page31 as E, _page32 as F, _page33 as G, _page34 as H, _page35 as I, _page36 as J, _page37 as K, _page38 as L, _page39 as M, _page40 as N, _page41 as O, _page42 as P, _page0 as _, _page1 as a, _page2 as b, _page3 as c, _page4 as d, _page5 as e, _page6 as f, _page7 as g, _page8 as h, _page9 as i, _page10 as j, _page11 as k, _page12 as l, _page13 as m, _page14 as n, _page15 as o, _page16 as p, _page17 as q, _page18 as r, _page19 as s, _page20 as t, _page21 as u, _page22 as v, _page23 as w, _page24 as x, _page25 as y, _page26 as z };

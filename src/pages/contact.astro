---
import BaseHead from '../components/BaseHead.astro'
import Header from '../components/Header.astro'
import Footer from '../components/Footer.astro'
import { SITE_TITLE, SITE_DESCRIPTION } from '../config'
import Toaster from '../components/Toaster'
---

<!DOCTYPE html>
<html lang='en'>
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style lang='scss'>
      form#form {
        display: flex;
        flex-flow: column;
        position: relative;
        padding: 1rem;
        max-inline-size: min(400px, 100%);
        margin-inline: auto;
        border-top: 1px solid hsl(0 0% 100% / 0.5);
        background: rgb(248, 248, 249);
        background: linear-gradient(
          156deg,
          rgba(255, 255, 255, 0.2903536414565826) 0%,
          rgba(187, 187, 187, 0.33237044817927175) 48%,
          rgba(0, 212, 255, 0.15870098039215685) 100%
        );
        // box-shadow: 2px 2px 6px hsl(0 0% 0% / 0.3);
        border-radius: 5px;
        h3 {
          padding: 0 0 0 0.5rem;
          color: #7ea9b8;
        }
        fieldset {
          margin: 1rem 0;
          border: none;
        }
        input,
        textarea {
          width: 100%;
          border: none;
          border-bottom: 1px solid var(--medium-dark);
          padding: 1em 1em;
          position: relative;
          color: #777;
        }
        textarea {
          min-height: 8rem;
        }
        label {
          text-transform: uppercase;
          font-size: 0.7rem;
          letter-spacing: 0.2em;
          color: #7ea9b8;
        }
        & [disable='true'] {
          pointer-events: none;
          // opacity: 0.5;
        }
        button {
          padding: 1rem 2rem;
          background-color: var(--cta-clr);
          color: hsl(0 0% 100% /0.8);
          margin: 0 auto 2rem 0.75rem;
          clip-path: polygon(
            0% 0%,
            100% 0,
            100% calc(100% - 20px),
            calc(100% - 20px) 100%,
            0% 100%
          );
          min-width: 200px;
          font-family: var(--sans-serif);
          text-transform: uppercase;
          letter-spacing: 0.2em;
          &:hover {
            background-color: var(--cta-clr-hover);
            color: white;
          }
          .loader {
            display: none;
          }
        }
        &.loading {
          button {
            .idle {
              display: none;
            }
            .loader {
              display: block;
              margin: auto;
            }
          }
          & > :is(fieldset, .columns) {
            opacity: 0.5;
          }
        }
      }
      html form :is(input, textarea) {
        background-color: white;
        color: #4a4a4a;
      }

      html.dark-theme form#form {
        background-color: hsl(0 0% 100% / 0.1);
        background: linear-gradient(
          156deg,
          rgba(248, 248, 249, 0.2903536414565826) 0%,
          rgba(92, 92, 122, 0.33237044817927175) 35%,
          rgba(0, 212, 255, 0.33237044817927175) 100%
        );
        h3,
        label {
          color: var(--color-dark);
        }

        &:is(input, textarea) {
          background-color: #1f1e1e;
          color: #9c9c9c;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <form
        id='form'
        class='neu-box'
        onsubmit='event => event.preventDefault();return false'
      >
        <h3>Kontakta f√∂reningen</h3>
        <fieldset>
          <label for='name'>Namn</label>
          <input type='text' id='name' value='' />
        </fieldset>
        <fieldset>
          <label for='email'>Epost</label>
          <input type='text' id='email' value='' />
        </fieldset>
        <fieldset>
          <label for='subject'>√Ñmne</label>
          <input type='text' id='subject' value='' />
        </fieldset>
        <fieldset>
          <textarea id='message' placeholder='...'></textarea>
        </fieldset>
        <button type='submit'>
          <div class='idle'>Skicka</div>
          <div class='loader'></div>
        </button>
      </form>
      <script is:inline>
        const get = (id) =>
          document.getElementById(id) || {
            value: '',
          }

        const submitForm = () => {
          if (formState().isLoading()) return
          formState().setToLoading(true)
          saveInput()
          sendmail()
        }

        // localStorage code
        const getFormData = () => {
          const store = Object.create(null)
          store.name = get('name')?.value
          store.email = get('email')?.value
          store.subject = get('subject')?.value
          store.message = get('message')?.value
          return store
        }
        const saveInput = () => {
          const { message, subject, ...rest } = getFormData()
          localStorage.setItem('contactinfo', JSON.stringify(rest))
        }
        const retrieveInfo = () => {
          const store = JSON.parse(localStorage.getItem('contactinfo') || '{}')
          get('name').value = store.name || ''
          get('email').value = store.email || ''
        }
        // End: localStorage

        const formState = () => {
          const inputs = [...document.querySelectorAll('input')]
          const button = document.querySelector('button')
          const form = document.querySelector('form')
          const textarea = document.querySelector('textarea')
          const disabled = [...document.querySelectorAll('[disabled]')]

          const setToLoading = (isLoading) => {
            if (!form || !button) return
            if (isLoading) {
              inputs.forEach((inpt) => {
                inpt.setAttribute('disabled', 'true')
              })
              textarea.setAttribute('disabled', 'true')
              form.classList.add('loading')
              return
            }
            form.classList.remove('loading')
            disabled.forEach((inpt) => inpt.removeAttribute('disabled'))
          }

          const isLoading = () => form.classList.contains('loading')

          return { setToLoading, isLoading }
        }

        const submitBtn = document.querySelector('[type="submit"]')
        submitBtn?.addEventListener('click', submitForm)
        retrieveInfo()
        ;[...document.querySelectorAll('input')][0]?.focus()
        // window.onload = () => {
        // }

        // ----
        const sendmail = async () => {
          let { name, email, message, subject } = getFormData()
          if (name.trim() === '') {
            displayToaster('Namn saknas.', (type = 'error'))
            name.focus()
            return
          }
          if (!/^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(email)) {
            displayToaster('Eposten √§r felformaterad.', (type = 'error'))
            email.focus()
            return
          }
          if (subject.trim() === '') {
            subject = '√Ñmne saknas'
          }
          const data = await fetch('/api/sendmail.json', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name,
              email,
              message,
              subject,
            }),
          })
            .then((res) => res.json())
            // .then((data) => console.log(data))
            .catch((err) => {
              console.log('Error', err)
              throw new Error('Network error.')
            })
          console.log(data)
          formState().setToLoading(false)
          if (data.success) {
            get('subject').value = ''
            get('message').value = ''
            displayToaster('üëç Meddelandet har skickats.')
          } else {
            displayToaster('üí© Ajd√•, n√•got gick snett.', 'error')
          }
        }

        function displayToaster(message, type = 'success') {
          document.body.dispatchEvent(
            new CustomEvent('TOASTER', {
              detail: [message, 5, type],
            })
          )
        }
      </script>
    </main>
    <Footer />
    <Toaster client:only />
  </body></html
>
